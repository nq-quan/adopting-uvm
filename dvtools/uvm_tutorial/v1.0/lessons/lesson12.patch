diff --git a/verif/alutb/alu_wrapper.sv b/verif/alutb/alu_wrapper.sv
index 2ed57bf..904b542 100755
--- a/verif/alutb/alu_wrapper.sv
+++ b/verif/alutb/alu_wrapper.sv
@@ -14,19 +14,16 @@
 
 module alu_wrapper(input logic tb_clk,
                    tb_rst_n,
-                   ctx_intf ctx_i);
+                   ctx_intf ctx_i,
+                   alu_intf alu_i);
 
    /*AUTOREGINPUT*/
    // Beginning of automatic reg inputs (for undeclared instantiated-module inputs)
-   reg                  alu_ctl;                // To dut of alu.v
-   reg [7:0]            alu_dat;                // To dut of alu.v
    reg [4:0]            frame_len;              // To dut of alu.v
    reg                  frame_len_val;          // To dut of alu.v
    // End of automatics
    /*AUTOWIRE*/
    // Beginning of automatic wires (for undeclared instantiated-module outputs)
-   wire                 alu_ready;              // From dut of alu.v
-   wire [31:0]          alu_result;             // From dut of alu.v
    wire                 frame;                  // From dut of alu.v
    wire                 frame_bp;               // From dut of alu.v
    wire [31:0]          frame_data;             // From dut of alu.v
@@ -39,6 +36,7 @@ module alu_wrapper(input logic tb_clk,
     .ctx_\(.*\)   (ctx_i.\1[]),
     .clk          (tb_clk),
     .rst_n        (tb_rst_n),
+    .alu_\(.*\)   (alu_i.\1[]),
     .\(.*\) (\1[]),
     ); */
    alu dut(/*AUTOINST*/
@@ -47,11 +45,11 @@ module alu_wrapper(input logic tb_clk,
            .frame                       (frame),                 // Templated
            .frame_bp                    (frame_bp),              // Templated
            .frame_data                  (frame_data[31:0]),      // Templated
-           .alu_ready                   (alu_ready),             // Templated
-           .alu_result                  (alu_result[31:0]),      // Templated
+           .alu_ready                   (alu_i.ready),           // Templated
+           .alu_result                  (alu_i.result[31:0]),    // Templated
            // Inputs
-           .alu_ctl                     (alu_ctl),               // Templated
-           .alu_dat                     (alu_dat[7:0]),          // Templated
+           .alu_ctl                     (alu_i.ctl),             // Templated
+           .alu_dat                     (alu_i.dat[7:0]),        // Templated
            .clk                         (tb_clk),                // Templated
            .ctx_in                      (ctx_i.in[7:0]),         // Templated
            .ctx_val                     (ctx_i.val),             // Templated
diff --git a/verif/alutb/alu_wrapper.sv.orig b/verif/alutb/alu_wrapper.sv.orig
new file mode 100755
index 0000000..2ed57bf
--- /dev/null
+++ b/verif/alutb/alu_wrapper.sv.orig
@@ -0,0 +1,78 @@
+//-*- mode: Verilog; verilog-indent-level: 3; indent-tabs-mode: nil; tab-width: 1 -*-
+
+// **********************************************************************
+// *
+// * legal mumbo jumbo
+// *
+// * Copyright 2013,
+// * (utg v0.8.2)
+// ***********************************************************************
+// File:   alutb_tb_top.sv
+// Author: bhunter
+/* About:  Wraps the ALU block to make the testbench look cleaner
+ *************************************************************************/
+
+module alu_wrapper(input logic tb_clk,
+                   tb_rst_n,
+                   ctx_intf ctx_i);
+
+   /*AUTOREGINPUT*/
+   // Beginning of automatic reg inputs (for undeclared instantiated-module inputs)
+   reg                  alu_ctl;                // To dut of alu.v
+   reg [7:0]            alu_dat;                // To dut of alu.v
+   reg [4:0]            frame_len;              // To dut of alu.v
+   reg                  frame_len_val;          // To dut of alu.v
+   // End of automatics
+   /*AUTOWIRE*/
+   // Beginning of automatic wires (for undeclared instantiated-module outputs)
+   wire                 alu_ready;              // From dut of alu.v
+   wire [31:0]          alu_result;             // From dut of alu.v
+   wire                 frame;                  // From dut of alu.v
+   wire                 frame_bp;               // From dut of alu.v
+   wire [31:0]          frame_data;             // From dut of alu.v
+   // End of automatics
+
+   // obj: alu
+   /*
+    alu AUTO_TEMPLATE (
+
+    .ctx_\(.*\)   (ctx_i.\1[]),
+    .clk          (tb_clk),
+    .rst_n        (tb_rst_n),
+    .\(.*\) (\1[]),
+    ); */
+   alu dut(/*AUTOINST*/
+           // Outputs
+           .ctx_out                     (ctx_i.out[7:0]),        // Templated
+           .frame                       (frame),                 // Templated
+           .frame_bp                    (frame_bp),              // Templated
+           .frame_data                  (frame_data[31:0]),      // Templated
+           .alu_ready                   (alu_ready),             // Templated
+           .alu_result                  (alu_result[31:0]),      // Templated
+           // Inputs
+           .alu_ctl                     (alu_ctl),               // Templated
+           .alu_dat                     (alu_dat[7:0]),          // Templated
+           .clk                         (tb_clk),                // Templated
+           .ctx_in                      (ctx_i.in[7:0]),         // Templated
+           .ctx_val                     (ctx_i.val),             // Templated
+           .frame_len                   (frame_len[4:0]),        // Templated
+           .frame_len_val               (frame_len_val),         // Templated
+           .rst_n                       (tb_rst_n));              // Templated
+
+
+   // proc: initial
+   // Clear out the unimportant signals
+   initial begin
+      frame_len_val = 0;
+      frame_len = 0;
+
+      @(posedge tb_rst_n);
+   end
+
+endmodule
+
+// Local Variables:
+// verilog-library-directories:  ("." "../../verif/hdl" "../../rtl/alu")
+// verilog-library-extensions:  (".v" ".sv" ".svh")
+// End:
+
diff --git a/verif/alutb/alutb.flist b/verif/alutb/alutb.flist
index 59fb1e8..0fa82df 100755
--- a/verif/alutb/alutb.flist
+++ b/verif/alutb/alutb.flist
@@ -6,7 +6,11 @@
 +incdir+../../rtl/include
 ../../verif/alutb/alutb_tb_top.sv
 ../../verif/alutb/alu_wrapper.sv
+../../verif/alutb/clk_duty_cycle.sv
 ../../verif/alutb/tests/basic.sv
 ../../verif/alutb/tests/base_test.sv
+../../verif/alutb/tests/fast_clk.sv
+../../verif/alutb/tests/duty_cycle.sv
+../../verif/alutb/tests/dev_ref_model.sv
+../../verif/alutb/tests/kval.sv
 -f ../../verif/alutb/rtl.flist
-
diff --git a/verif/alutb/alutb_tb_top.sv b/verif/alutb/alutb_tb_top.sv
index e789596..9e77305 100755
--- a/verif/alutb/alutb_tb_top.sv
+++ b/verif/alutb/alutb_tb_top.sv
@@ -34,6 +34,10 @@ module alutb_tb_top;
    // CTX Interface
    ctx_intf ctx_i(.clk(tb_clk), .rst_n(tb_rst_n));
 
+   // obj: alu_i
+   // The <alu_intf> instance
+   alu_intf alu_i(.clk(tb_clk), .rst_n(tb_rst_n));
+
    //----------------------------------------------------------------------------------------
    // Group: DUT
 
@@ -41,6 +45,7 @@ module alutb_tb_top;
    alu_wrapper alu_wrapper(/*AUTOINST*/
                            // Interfaces
                            .ctx_i               (ctx_i),
+                           .alu_i               (alu_i),
                            // Inputs
                            .tb_clk              (tb_clk),
                            .tb_rst_n            (tb_rst_n));
@@ -56,6 +61,8 @@ module alutb_tb_top;
       `cn_set_intf(virtual cn_rst_intf    , "cn_pkg::rst_intf"  , "tb_rst_vi", tb_rst_i);
       `cn_set_intf(virtual ctx_intf.drv_mp , "ctx_pkg::ctx_intf" , "ctx_vi"   , ctx_i.drv_mp);
       `cn_set_intf(virtual ctx_intf.mon_mp , "ctx_pkg::ctx_intf" , "ctx_vi"   , ctx_i.mon_mp);
+      `cn_set_intf(virtual alu_intf.drv_mp, "alu_pkg::alu_intf", "drv_vi", alu_i.drv_mp)
+      `cn_set_intf(virtual alu_intf.mon_mp, "alu_pkg::alu_intf", "mon_vi", alu_i.mon_mp)
    endfunction : pre_run_test
 
    `include "tb_common.v"
diff --git a/verif/alutb/alutb_tb_top.sv.orig b/verif/alutb/alutb_tb_top.sv.orig
new file mode 100755
index 0000000..e789596
--- /dev/null
+++ b/verif/alutb/alutb_tb_top.sv.orig
@@ -0,0 +1,68 @@
+//-*- mode: Verilog; verilog-indent-level: 3; indent-tabs-mode: nil; tab-width: 1 -*-
+
+// **********************************************************************
+// *
+// * legal mumbo jumbo
+// *
+// * Copyright 2013,
+// * (utg v0.8.2)
+// ***********************************************************************
+// File:   alutb_tb_top.sv
+// Author: bhunter
+/* About:  <description>
+ *************************************************************************/
+
+import uvm_pkg::*;
+
+`include "cn_msg_hdl.vh"
+
+module alutb_tb_top;
+   //----------------------------------------------------------------------------------------
+   // Group: Interfaces
+
+   // obj: tb_clk_i
+   // Testbench clock interface
+   cn_clk_intf tb_clk_i();
+   wire tb_clk = tb_clk_i.clk;
+
+   // obj: tb_rst_i
+   // Testbench reset interface
+   cn_rst_intf tb_rst_i();
+   wire tb_rst_n = tb_rst_i.rst_n;
+
+   // obj: ctx_i
+   // CTX Interface
+   ctx_intf ctx_i(.clk(tb_clk), .rst_n(tb_rst_n));
+
+   //----------------------------------------------------------------------------------------
+   // Group: DUT
+
+   // obj: dut_wrapper
+   alu_wrapper alu_wrapper(/*AUTOINST*/
+                           // Interfaces
+                           .ctx_i               (ctx_i),
+                           // Inputs
+                           .tb_clk              (tb_clk),
+                           .tb_rst_n            (tb_rst_n));
+
+   //----------------------------------------------------------------------------------------
+   // Group: Procedural Blocks
+
+   ////////////////////////////////////////////
+   // func: pre_run_test
+   // Set interface names before run_test is called
+   function void pre_run_test();
+      `cn_set_intf(virtual cn_clk_intf    , "cn_pkg::clk_intf"  , "tb_clk_vi", tb_clk_i);
+      `cn_set_intf(virtual cn_rst_intf    , "cn_pkg::rst_intf"  , "tb_rst_vi", tb_rst_i);
+      `cn_set_intf(virtual ctx_intf.drv_mp , "ctx_pkg::ctx_intf" , "ctx_vi"   , ctx_i.drv_mp);
+      `cn_set_intf(virtual ctx_intf.mon_mp , "ctx_pkg::ctx_intf" , "ctx_vi"   , ctx_i.mon_mp);
+   endfunction : pre_run_test
+
+   `include "tb_common.v"
+endmodule : alutb_tb_top
+
+// Local Variables:
+// verilog-library-extensions:(".v" ".sv")
+// verilog-library-directories:("." "../../verif/hdl" "../../rtl/alu")
+// verilog-auto-ignore-concat:t
+// End:
diff --git a/verif/alutb/clk_duty_cycle.sv b/verif/alutb/clk_duty_cycle.sv
new file mode 100755
index 0000000..73d60ed
--- /dev/null
+++ b/verif/alutb/clk_duty_cycle.sv
@@ -0,0 +1,54 @@
+//-*- mode: Verilog; verilog-indent-level: 3; indent-tabs-mode: nil; tab-width: 1 -*-
+
+// **********************************************************************
+// *
+// * legal mumbo jumbo
+// *
+// * Copyright 2013
+// * (utg v0.8.2)
+// ***********************************************************************
+// File:   clk_duty_cycle.sv
+// Author: bhunter
+/* About:  <description>
+ *************************************************************************/
+
+`ifndef __CLK_DUTY_CYCLE_SV__
+   `define __CLK_DUTY_CYCLE_SV__
+
+
+// (`includes go here)
+
+// class: clk_duty_cycle_c
+// A clock with a duty cycle of 75/25.
+class clk_duty_cycle_c extends cn_pkg::clk_drv_c;
+   `uvm_component_utils(clk_duty_cycle_c)
+
+   //----------------------------------------------------------------------------------------
+   // Group: Methods
+   function new(string name="clk_duty_cycle",
+                uvm_component parent=null);
+      super.new(name, parent);
+   endfunction : new
+
+   ////////////////////////////////////////////
+   // func: run_phase
+   virtual task run_phase(uvm_phase phase);
+      int uptime = 3*period_ps / 4;
+      int downtime = period_ps - uptime;
+
+      // set to initial value
+      clk_vi.clk = (init_x)? 'bx : init_value;
+      #(init_delay_ps * 1ps);
+
+      forever begin
+         clk_vi.clk = 1;
+         #(uptime * 1ps);
+         clk_vi.clk = 0;
+         #(downtime * 1ps);
+      end
+   endtask : run_phase
+
+endclass : clk_duty_cycle_c
+
+`endif // __CLK_DUTY_CYCLE_SV__
+
diff --git a/verif/alutb/tb.py b/verif/alutb/tb.py
index 3adcb12..113627f 100755
--- a/verif/alutb/tb.py
+++ b/verif/alutb/tb.py
@@ -1,5 +1,5 @@
 # Add vkit dependencies *in order*
-VKITS = ['cn', 'global', 'csr', 'ctx', 'alutb']
+VKITS = ['cn', 'global', 'csr', 'ctx', 'alu', 'alutb']
 
 # Add testbench flists
 FLISTS = ['alutb.flist', 'rtl.flist']
diff --git a/verif/alutb/tests/basic.sv b/verif/alutb/tests/basic.sv
index a6fcbf3..fd3ff0a 100755
--- a/verif/alutb/tests/basic.sv
+++ b/verif/alutb/tests/basic.sv
@@ -35,6 +35,40 @@ class basic_test_c extends base_test_c;
       super.build_phase(phase);
    endfunction : build_phase
 
+   ////////////////////////////////////////////
+   // func: main_phase
+   virtual task main_phase(uvm_phase phase);
+      alu_pkg::sum_of_factorials_seq_c sof_seq = new("sof");
+      alu_pkg::sum_array_seq_c sum_array_seq = new("sum_array");
+      alu_pkg::exer_seq_c exer_seq = new("exer_seq");
+
+      phase.raise_objection(this);
+      fork
+         begin
+            sof_seq.randomize();
+            `cn_info(("Starting:\\n%s", sof_seq.sprint()))
+            sof_seq.start(alutb_env.alu_agent.sqr);
+            `cn_info(("The sum-of-factorials from %0d to %0d is %d",
+                      sof_seq.op_x, sof_seq.op_y, sof_seq.result))
+         end
+
+         begin
+            sum_array_seq.randomize() with {data.size() > 8; };
+            `cn_info(("Starting:\\n%s", sum_array_seq.sprint()))
+            sum_array_seq.start(alutb_env.alu_agent.sqr);
+            `cn_info(("The sum is %0d", sum_array_seq.result))
+         end
+
+         begin
+            alu_pkg::factorial_seq_c fact_seq = new("fact_seq");
+            fact_seq.randomize();
+            fact_seq.start(alutb_env.alu_agent.sqr);
+         end
+      join
+
+      phase.drop_objection(this);
+   endtask : main_phase
+
 endclass : basic_test_c
 
 `endif // __BASIC_SV__
diff --git a/verif/alutb/tests/basic.sv.orig b/verif/alutb/tests/basic.sv.orig
new file mode 100755
index 0000000..a6fcbf3
--- /dev/null
+++ b/verif/alutb/tests/basic.sv.orig
@@ -0,0 +1,40 @@
+//-*- mode: Verilog; verilog-indent-level: 3; indent-tabs-mode: nil; tab-width: 1 -*-
+
+// **********************************************************************
+// *
+// * legal mumbo jumbo
+// *
+// * (c) 2011
+// * (utg v0.6.0)
+// ***********************************************************************
+// File:   basic.sv
+// Author: bhunter
+/* About:  <description>
+ *************************************************************************/
+
+`ifndef __BASIC_SV__
+   `define __BASIC_SV__
+
+   `include "base_test.sv"
+
+// class: basic_test_c
+// A basic ALU test
+class basic_test_c extends base_test_c;
+   `uvm_component_utils(basic_test_c)
+
+   //----------------------------------------------------------------------------------------
+   // Methods
+   function new(string name="test",
+                uvm_component parent=null);
+      super.new(name, parent);
+   endfunction : new
+
+   ////////////////////////////////////////////
+   // func: build_phase
+   virtual function void build_phase(uvm_phase phase);
+      super.build_phase(phase);
+   endfunction : build_phase
+
+endclass : basic_test_c
+
+`endif // __BASIC_SV__
diff --git a/verif/alutb/tests/basic.sv.rej b/verif/alutb/tests/basic.sv.rej
new file mode 100644
index 0000000..8c8a0c5
--- /dev/null
+++ b/verif/alutb/tests/basic.sv.rej
@@ -0,0 +1,67 @@
+***************
+*** 29,46 ****
+     `uvm_component_utils(basic_test_c)
+  
+     //----------------------------------------------------------------------------------------
+-    // Methods
+     function new(string name="test",
+                  uvm_component parent=null);
+        super.new(name, parent);
+     endfunction : new
+  
+     ////////////////////////////////////////////
+-    // func: build_phase
+-    virtual function void build_phase(uvm_phase phase);
+-       super.build_phase(phase);
+-    endfunction : build_phase
+-    
+  endclass : basic_test_c
+     
+  `endif // __BASIC_SV__
+--- 29,74 ----
+     `uvm_component_utils(basic_test_c)
+  
+     //----------------------------------------------------------------------------------------
++    // Group: Methods
+     function new(string name="test",
+                  uvm_component parent=null);
+        super.new(name, parent);
+     endfunction : new
+  
+     ////////////////////////////////////////////
++    // func: main_phase
++    virtual task main_phase(uvm_phase phase);
++       alu_pkg::sum_of_factorials_seq_c sof_seq = new("sof");
++       alu_pkg::sum_array_seq_c sum_array_seq = new("sum_array");
++       alu_pkg::exer_seq_c exer_seq = new("exer_seq");
++ 
++       phase.raise_objection(this);
++       fork
++          begin
++             sof_seq.randomize();
++             `cn_info(("Starting:\\n%s", sof_seq.sprint()))
++             sof_seq.start(alutb_env.alu_agent.sqr);
++             `cn_info(("The sum-of-factorials from %0d to %0d is %d",
++                       sof_seq.op_x, sof_seq.op_y, sof_seq.result))
++          end
++ 
++          begin
++             sum_array_seq.randomize() with {data.size() > 8; };
++             `cn_info(("Starting:\\n%s", sum_array_seq.sprint()))
++             sum_array_seq.start(alutb_env.alu_agent.sqr);
++             `cn_info(("The sum is %0d", sum_array_seq.result))
++          end
++ 
++          begin
++             alu_pkg::factorial_seq_c fact_seq = new("fact_seq");
++             fact_seq.randomize();
++             fact_seq.start(alutb_env.alu_agent.sqr);
++          end
++       join
++ 
++       phase.drop_objection(this);
++    endtask : main_phase
++ 
+  endclass : basic_test_c
+     
+  `endif // __BASIC_SV__
diff --git a/verif/alutb/tests/dev_ref_model.sv b/verif/alutb/tests/dev_ref_model.sv
new file mode 100755
index 0000000..076e9b6
--- /dev/null
+++ b/verif/alutb/tests/dev_ref_model.sv
@@ -0,0 +1,44 @@
+//-*- mode: Verilog; verilog-indent-level: 3; indent-tabs-mode: nil; tab-width: 1 -*-
+
+// **********************************************************************
+// *
+// * legal mumbo jumbo
+// *
+// * Copyright 2013
+// * (utg v0.8.2)
+// ***********************************************************************
+// File:   dev_ref_model.sv
+// Author: bhunter
+/* About:  <description>
+ *************************************************************************/
+
+`ifndef __DEV_REF_MODEL_SV__
+   `define __DEV_REF_MODEL_SV__
+
+`include "basic.sv"
+
+// class: dev_ref_model_test_c
+// Test the ALU using the predictor as a reference model
+class dev_ref_model_test_c extends basic_test_c;
+   `uvm_component_utils(dev_ref_model_test_c)
+
+   //----------------------------------------------------------------------------------------
+   // Group: Methods
+   function new(string name="test",
+                uvm_component parent=null);
+      super.new(name, parent);
+   endfunction : new
+
+   ////////////////////////////////////////////
+   // func: build_phase
+   virtual function void build_phase(uvm_phase phase);
+      super.build_phase(phase);
+      uvm_config_db#(int)::set(this, "alutb_env.alu_agent", "dev_ref_model", 1);
+
+      // reset the interface to avoid x-checkers
+      alutb_tb_top.alu_i.reset();
+   endfunction : build_phase
+endclass : dev_ref_model_test_c
+
+`endif // __DEV_REF_MODEL_SV__
+
diff --git a/verif/alutb/tests/duty_cycle.sv b/verif/alutb/tests/duty_cycle.sv
new file mode 100755
index 0000000..0940097
--- /dev/null
+++ b/verif/alutb/tests/duty_cycle.sv
@@ -0,0 +1,43 @@
+//-*- mode: Verilog; verilog-indent-level: 3; indent-tabs-mode: nil; tab-width: 1 -*-
+
+// **********************************************************************
+// *
+// * legal mumbo jumbo
+// *
+// * Copyright 2013
+// * (utg v0.8.2)
+// ***********************************************************************
+// File:   duty_cycle.sv
+// Author: bhunter
+/* About:  <description>
+ *************************************************************************/
+
+`ifndef __DUTY_CYCLE_SV__
+   `define __DUTY_CYCLE_SV__
+
+   `include "base_test.sv"
+   `include "clk_duty_cycle.sv"
+
+// class: duty_cycle_test_c
+// Run using the clk_duty_cycle_c instead of cn_pkg::clk_drv_c
+class duty_cycle_test_c extends base_test_c;
+   `uvm_component_utils(duty_cycle_test_c)
+
+   //----------------------------------------------------------------------------------------
+   // Group: Methods
+   function new(string name="duty_cycle_test",
+                uvm_component parent=null);
+      super.new(name, parent);
+   endfunction : new
+
+   ////////////////////////////////////////////
+   // func: build_phase
+   virtual function void build_phase(uvm_phase phase);
+      set_type_override_by_type(cn_pkg::clk_drv_c::get_type(),
+                                clk_duty_cycle_c::get_type(), .replace(1));
+      super.build_phase(phase);
+   endfunction : build_phase
+
+endclass : duty_cycle_test_c
+
+`endif // __DUTY_CYCLE_SV__
diff --git a/verif/alutb/tests/fast_clk.sv b/verif/alutb/tests/fast_clk.sv
new file mode 100755
index 0000000..7cd5536
--- /dev/null
+++ b/verif/alutb/tests/fast_clk.sv
@@ -0,0 +1,72 @@
+//-*- mode: Verilog; verilog-indent-level: 3; indent-tabs-mode: nil; tab-width: 1 -*-
+
+// **********************************************************************
+// *
+// * legal mumbo jumbo
+// *
+// * Copyright 2013
+// * (utg v0.8.2)
+// ***********************************************************************
+// File:   fast_clk.sv
+// Author: bhunter
+/* About:  A test that makes the clock go super fast!
+ *************************************************************************/
+
+`ifndef __FAST_CLK_SV__
+   `define __FAST_CLK_SV__
+
+
+   `include "base_test.sv"
+// (`includes go here)
+
+// class: fast_clk_test_c
+// (Describe me)
+class fast_clk_test_c extends base_test_c;
+   `uvm_component_utils_begin(fast_clk_test_c)
+   `uvm_component_utils_end
+
+   //----------------------------------------------------------------------------------------
+   // Group: Configuration Fields
+
+   //----------------------------------------------------------------------------------------
+   // Group: Fields
+
+   //----------------------------------------------------------------------------------------
+   // Group: Methods
+   function new(string name="test",
+                uvm_component parent=null);
+      super.new(name, parent);
+   endfunction : new
+
+   ////////////////////////////////////////////
+   // func: build_phase
+   virtual function void build_phase(uvm_phase phase);
+      super.build_phase(phase);
+   endfunction : build_phase
+
+   ////////////////////////////////////////////
+   // func: connect_phase
+   virtual function void connect_phase(uvm_phase phase);
+      super.connect_phase(phase);
+   endfunction : connect_phase
+
+   ////////////////////////////////////////////
+   // func: end_of_elaboration_phase
+   virtual function void end_of_elaboration_phase(uvm_phase phase);
+      super.end_of_elaboration_phase(phase);
+      tb_clk_drv.randomize(period_ps) with {
+         period_ps inside {[1800:1999]};
+      };
+      `cn_info(("Selected a period of %0dps", tb_clk_drv.period_ps))
+   endfunction : end_of_elaboration_phase
+
+   ////////////////////////////////////////////
+   // func: run_phase
+   virtual task run_phase(uvm_phase phase);
+      super.run_phase(phase);
+   endtask : run_phase
+
+endclass : fast_clk_test_c
+
+`endif // __FAST_CLK_SV__
+
diff --git a/verif/alutb/tests/kval.sv b/verif/alutb/tests/kval.sv
new file mode 100755
index 0000000..3aa88fe
--- /dev/null
+++ b/verif/alutb/tests/kval.sv
@@ -0,0 +1,51 @@
+//-*- mode: Verilog; verilog-indent-level: 3; indent-tabs-mode: nil; tab-width: 1 -*-
+
+// **********************************************************************
+// *
+// * legal mumbo jumbo
+// *
+// * Copyright 2013
+// * (utg v0.8.2)
+// ***********************************************************************
+// File:   kval.sv
+// Author: bhunter
+/* About:  Test with different values of K.
+ *************************************************************************/
+
+`ifndef __KVAL_SV__
+   `define __KVAL_SV__
+
+
+   `include "basic.sv"
+
+// class: kval_test_c
+// (Describe me)
+class kval_test_c extends basic_test_c;
+   `uvm_component_utils_begin(kval_test_c)
+   `uvm_component_utils_end
+
+   //----------------------------------------------------------------------------------------
+   // Group: Constraints
+   constraint kval_cnstr {
+      reg_block.CONST.K_VAL.value inside {[9:20]};
+   }
+
+   //----------------------------------------------------------------------------------------
+   // Group: Methods
+   function new(string name="test",
+                uvm_component parent=null);
+      super.new(name, parent);
+   endfunction : new
+
+   ////////////////////////////////////////////
+   // func: randomize_cfg
+   // Turn off the innocuous constraint
+   virtual function void randomize_cfg();
+      cfg.innocuous_cnstr.constraint_mode(0);
+      super.randomize_cfg();
+   endfunction : randomize_cfg
+
+endclass : kval_test_c
+
+`endif // __KVAL_SV__
+
diff --git a/verif/vkits/alu/alu.flist b/verif/vkits/alu/alu.flist
new file mode 100755
index 0000000..6d7328f
--- /dev/null
+++ b/verif/vkits/alu/alu.flist
@@ -0,0 +1,4 @@
++incdir+../../verif/vkits/alu
+../../verif/vkits/alu/alu_intf.sv
+../../verif/vkits/alu/alu_pkg.sv
+
diff --git a/verif/vkits/alu/alu_agent.sv b/verif/vkits/alu/alu_agent.sv
new file mode 100755
index 0000000..ca9fe10
--- /dev/null
+++ b/verif/vkits/alu/alu_agent.sv
@@ -0,0 +1,132 @@
+//-*- mode: Verilog; verilog-indent-level: 3; indent-tabs-mode: nil; tab-width: 1 -*-
+
+// **********************************************************************
+// *
+// * legal mumbo jumbo
+// *
+// * Copyright 2013
+// * (utg v0.8.2)
+// ***********************************************************************
+// File:   alu_agent.sv
+// Author: bhunter
+/* About:  <description>
+ *************************************************************************/
+
+`ifndef __ALU_AGENT_SV__
+   `define __ALU_AGENT_SV__
+
+`include "alu_drv.sv"
+`include "alu_mon.sv"
+`include "alu_sqr.sv"
+`include "alu_pred.sv"
+
+// class: agent_c
+// (Description)
+class agent_c extends uvm_agent;
+   `uvm_component_utils_begin(alu_pkg::agent_c)
+      `uvm_field_enum(uvm_active_passive_enum, is_active, UVM_ALL_ON)
+      `uvm_field_int(dev_ref_model, UVM_ALL_ON)
+   `uvm_component_utils_end
+
+   //----------------------------------------------------------------------------------------
+   // Group: Configuration Fields
+
+   // field: is_active
+   // When set to UVM_ACTIVE, the sqr and drv will be present.
+   uvm_active_passive_enum is_active = UVM_ACTIVE;
+
+   // field: dev_ref_model
+   // When set to 1, the predictor operates in reference mode and the monitor/driver are not enabled
+   bit dev_ref_model = 0;
+
+   //----------------------------------------------------------------------------------------
+   // Group: TLM Ports
+
+   // field: monitored_item_port
+   // All monitored transactions go out here
+   uvm_analysis_port #(item_c) monitored_item_port;
+
+   // field: monitored_result_port
+   // All monitored results go out here
+   uvm_analysis_port #(result_t) monitored_result_port;
+
+   //----------------------------------------------------------------------------------------
+   // Group: Fields
+
+   // fields: drv, mon, sqr
+   // Driver, monitor, and sequencer found in most agents
+   sqr_c sqr;
+   drv_c drv;
+   mon_c mon;
+
+   // field: pred
+   // The ALU Predictor
+   pred_c pred;
+   
+   //----------------------------------------------------------------------------------------
+   // Group: Methods
+   function new(string name="agent",
+                uvm_component parent=null);
+      super.new(name, parent);
+   endfunction : new
+
+   ////////////////////////////////////////////
+   // func: build_phase
+   virtual function void build_phase(uvm_phase phase);
+      super.build_phase(phase);
+
+      if(!dev_ref_model)
+         mon = mon_c::type_id::create("mon", this);
+      if(is_active) begin
+         if(!dev_ref_model)
+            drv = drv_c::type_id::create("drv", this);
+         sqr = sqr_c::type_id::create("sqr", this);
+      end
+
+      pred = pred_c::type_id::create("pred", this);
+      uvm_config_db#(int)::set(this, "pred", "dev_ref_model", dev_ref_model);
+
+      monitored_item_port = new("monitored_item_port", this);
+      monitored_result_port = new("monitored_result_port", this);
+   endfunction : build_phase
+
+   ////////////////////////////////////////////
+   // func: connect_phase
+   virtual function void connect_phase(uvm_phase phase);
+      super.connect_phase(phase);
+
+      if(!dev_ref_model) begin
+         // connect to the monitor's analysis ports
+         mon.monitored_item_port.connect(monitored_item_port);
+         mon.monitored_result_port.connect(monitored_result_port);
+         
+         if(is_active)
+            drv.seq_item_port.connect(sqr.seq_item_export);
+         
+         mon.monitored_item_port.connect(pred.monitored_item_imp);
+         mon.monitored_result_port.connect(pred.monitored_result_imp);
+      end else begin
+         // as a reference model
+         pred.seq_item_port.connect(sqr.seq_item_export);
+         pred.monitored_item_port.connect(monitored_item_port);
+         pred.monitored_result_port.connect(monitored_result_port);
+      end
+
+   endfunction : connect_phase
+
+   ////////////////////////////////////////////
+   // func: end_of_elaboration_phase
+   virtual function void end_of_elaboration_phase(uvm_phase phase);
+      super.end_of_elaboration_phase(phase);
+   endfunction : end_of_elaboration_phase
+
+   ////////////////////////////////////////////
+   // func: run_phase
+   virtual task run_phase(uvm_phase phase);
+      super.run_phase(phase);
+   endtask : run_phase
+
+endclass : agent_c
+
+`endif // __ALU_AGENT_SV__
+
diff --git a/verif/vkits/alu/alu_drv.sv b/verif/vkits/alu/alu_drv.sv
new file mode 100755
index 0000000..fc21dac
--- /dev/null
+++ b/verif/vkits/alu/alu_drv.sv
@@ -0,0 +1,111 @@
+//-*- mode: Verilog; verilog-indent-level: 3; indent-tabs-mode: nil; tab-width: 1 -*-
+
+// **********************************************************************
+// *
+// * legal mumbo jumbo
+// *
+// * Copyright 2013
+// * (utg v0.8.2)
+// ***********************************************************************
+// File:   alu_drv.sv
+// Author: bhunter
+/* About:  <description>
+ *************************************************************************/
+
+`ifndef __ALU_DRV_SV__
+   `define __ALU_DRV_SV__
+
+`include "alu_item.sv"
+
+// class: drv_c
+// (Describe me)
+class drv_c extends uvm_driver#(item_c);
+   `uvm_component_utils_begin(alu_pkg::drv_c)
+      `uvm_field_string(intf_name, UVM_ALL_ON)
+   `uvm_component_utils_end
+
+   //----------------------------------------------------------------------------------------
+   // Group: Configuration Fields
+
+   // field: intf_name
+   // The name of the virtual interface that we'll hook up to
+   string intf_name = "drv_vi";
+
+   //----------------------------------------------------------------------------------------
+   // Group: TLM Ports
+
+   //----------------------------------------------------------------------------------------
+   // Group: Fields
+
+   // field: drv_vi
+   // Virtual interface to drive on
+   virtual alu_intf.drv_mp drv_vi;
+
+   //----------------------------------------------------------------------------------------
+   // Group: Methods
+   function new(string name="drv",
+                uvm_component parent=null);
+      super.new(name, parent);
+   endfunction : new
+
+   ////////////////////////////////////////////
+   // func: build_phase
+   virtual function void build_phase(uvm_phase phase);
+      super.build_phase(phase);
+      // get the interface
+      `cn_get_intf(virtual alu_intf.drv_mp, "alu_pkg::alu_intf", intf_name, drv_vi)
+   endfunction : build_phase
+
+   ////////////////////////////////////////////
+   // func: connect_phase
+   virtual function void connect_phase(uvm_phase phase);
+      super.connect_phase(phase);
+   endfunction : connect_phase
+
+   ////////////////////////////////////////////
+   // func: end_of_elaboration_phase
+   virtual function void end_of_elaboration_phase(uvm_phase phase);
+      super.end_of_elaboration_phase(phase);
+   endfunction : end_of_elaboration_phase
+
+   ////////////////////////////////////////////
+   // func: run_phase
+   virtual task run_phase(uvm_phase phase);
+      drv_vi.reset();
+      driver();
+   endtask : run_phase
+
+   ////////////////////////////////////////////
+   // func: driver
+   // Drive transactions by packing into an array of bytes, then sending two 4-bit cycles
+   // for each byte. Then wait for the response and send it back.
+   task driver();
+      byte unsigned stream[];
+
+      @(posedge drv_vi.drv_cb.rst_n);
+      forever begin
+         seq_item_port.get_next_item(req);
+
+         req.pack_bytes(stream);
+         foreach(stream[x]) begin
+            @(drv_vi.drv_cb);
+
+            drv_vi.drv_cb.ctl <= (x == 0)? 1'b1 : 1'b0;
+            drv_vi.drv_cb.dat <= stream[x];
+         end
+
+         // wait 1 clock, then clear the bus
+         @(drv_vi.drv_cb);
+         drv_vi.reset();
+
+         // wait for result
+         @(posedge drv_vi.drv_cb.ready);
+         req.result = drv_vi.drv_cb.result;
+         seq_item_port.item_done(req);
+      end
+   endtask : driver
+
+endclass : drv_c
+
+`endif // __ALU_DRV_SV__
+
diff --git a/verif/vkits/alu/alu_intf.sv b/verif/vkits/alu/alu_intf.sv
new file mode 100755
index 0000000..42f6821
--- /dev/null
+++ b/verif/vkits/alu/alu_intf.sv
@@ -0,0 +1,114 @@
+//-*- mode: Verilog; verilog-indent-level: 3; indent-tabs-mode: nil; tab-width: 1 -*-
+
+// **********************************************************************
+// *
+// * legal mumbo jumbo
+// *
+// * Copyright 2013
+// * (utg v0.8.2)
+// ***********************************************************************
+// File:   alu_intf.sv
+// Author: bhunter
+/* About:  <description>
+ *************************************************************************/
+
+`ifndef __ALU_INTF_SV__
+   `define __ALU_INTF_SV__
+
+// class: alu_intf
+interface alu_intf(input logic clk,
+                   input logic rst_n);
+
+   import uvm_pkg::*;
+   
+   //----------------------------------------------------------------------------------------
+   // Group: Signals
+
+   // var: ctl
+   // Asserted only on the first cycle of a new transaction, while dat contains the operation
+   logic        ctl;
+
+   // var: dat
+   // The input data nibble that contains the operation and operands
+   logic [7:0]  dat;
+
+   // var: ready
+   // The output of the ALU that indicates when the result data is valid
+   logic        ready;
+
+   // var: result
+   // The 32-bit result data
+   logic [31:0] result;
+
+   //----------------------------------------------------------------------------------------
+   // Group: Clocking blocks
+
+   // var: drv_cb
+   // A clocking block that represents how the environment's driver sees the interface
+   clocking drv_cb @(posedge clk);
+      output    ctl;
+      output    dat;
+      input     ready;
+      input     result;
+      input     rst_n;
+   endclocking : drv_cb
+
+   // var: mon_cb
+   // A clocking block that represents how the environment's monitor sees the interface
+   clocking mon_cb @(posedge clk);
+      input     ctl;
+      input     dat;
+      input     ready;
+      input     result;
+      input     rst_n;
+   endclocking : mon_cb
+
+   //----------------------------------------------------------------------------------------
+   // Group: Modports
+
+   modport drv_mp(clocking drv_cb,
+                  import reset);
+   modport mon_mp(clocking mon_cb);
+
+   //----------------------------------------------------------------------------------------
+   // Group: Methods
+
+   // func: reset
+   // Convenience function for the driver to reset its outputs
+   function void reset();
+      ctl = 0;
+      dat = 8'b0;
+   endfunction : reset
+
+   //----------------------------------------------------------------------------------------
+   // Group: Assertions
+
+   ctl_not_x :
+      assert property(@(posedge clk)
+                      disable iff (~rst_n || rst_n === 1'bx)
+                      (!$isunknown(ctl))) else
+         `cn_err_intf(("ctl signal is an X"))
+
+   dat_not_x :       
+      assert property(@(posedge clk)
+                      disable iff (~rst_n || rst_n === 1'bx)
+                      (!$isunknown(dat))) else
+         `cn_err_intf(("dat signal is an X"))
+
+   ready_not_x : 
+      assert property(@(posedge clk)
+                      disable iff (~rst_n || rst_n === 1'bx)
+                      (!$isunknown(ready))) else
+         `cn_err_intf(("ready signal is an X"))
+
+   result_not_x : 
+      assert property(@(posedge clk)
+                      disable iff (~rst_n || rst_n === 1'bx || ready == 0)
+                      (!$isunknown(result))) else
+         `cn_err_intf(("result signal is an X"))
+         
+endinterface : alu_intf
+
+
+`endif // __ALU_INTF_SV__
+
diff --git a/verif/vkits/alu/alu_item.sv b/verif/vkits/alu/alu_item.sv
new file mode 100755
index 0000000..49d3caa
--- /dev/null
+++ b/verif/vkits/alu/alu_item.sv
@@ -0,0 +1,119 @@
+//-*- mode: Verilog; verilog-indent-level: 3; indent-tabs-mode: nil; tab-width: 1 -*-
+
+// **********************************************************************
+// *
+// * legal mumbo jumbo
+// *
+// * Copyright 2013
+// * (utg v0.8.2)
+// ***********************************************************************
+// File:   alu_item.sv
+// Author: bhunter
+/* About:  <description>
+ *************************************************************************/
+
+`ifndef __ALU_ITEM_SV__
+   `define __ALU_ITEM_SV__
+
+// class: item_c
+// An ALU Transaction as a sequence item
+class item_c extends uvm_sequence_item;
+   //----------------------------------------------------------------------------------------
+   // Group: Types
+   typedef enum bit [7:0] {
+                           ADD_A_B = 0,
+                           SUB_A_B = 1,
+                           SUB_B_A = 2,
+                           MUL_A_B = 3,
+                           DIV_A_B = 4,
+                           DIV_B_A = 5,
+                           INC_A   = 6,
+                           INC_B   = 7,
+                           CLR_RES = 8,
+                           ACCUM   = 9
+                           } operation_e;
+
+   `uvm_object_utils_begin(alu_pkg::item_c)
+      `uvm_field_enum(operation_e, operation, UVM_ALL_ON)
+      `uvm_field_int (alpha,                  UVM_ALL_ON | UVM_NOPACK | UVM_NOCOMPARE)
+      `uvm_field_int (beta,                   UVM_ALL_ON | UVM_NOPACK | UVM_NOCOMPARE)
+   `uvm_object_utils_end
+
+   //----------------------------------------------------------------------------------------
+   // Group: Fields
+
+   // var: operation
+   rand operation_e operation;
+
+   // var: A variable
+   rand bit [15:0] alpha;
+
+   // var: B variable
+   rand bit [15:0] beta;
+
+   // ensure that all operands have legal values
+   constraint protocol_cnstr {
+      (operation == DIV_A_B) -> beta != 0;
+      (operation == DIV_B_A) -> alpha != 0;
+      (operation == SUB_A_B) -> alpha > beta;
+      (operation == SUB_B_A) -> beta > alpha;
+   }
+
+   // var: result
+   // This is the result of the operation, filled in by the driver and sent back with the response
+   result_t result;
+
+   //----------------------------------------------------------------------------------------
+   // Group: Methods
+   function new(string name="item");
+      super.new(name);
+   endfunction : new
+
+   //----------------------------------------------------------------------------------------
+   // func: convert2string
+   // Single-line printing
+   virtual function string convert2string();
+      convert2string = $psprintf("%s A:%04X B:%04X", operation, alpha, beta);
+   endfunction : convert2string
+
+   ////////////////////////////////////////////
+   // func: do_pack
+   virtual function void do_pack(uvm_packer packer);
+      super.do_pack(packer);
+
+      if(operation inside {[ADD_A_B : INC_A], ACCUM})
+         packer.pack_field_int(alpha, 16);
+      if(operation inside {[ADD_A_B : DIV_B_A], INC_B})
+         packer.pack_field_int(beta, 16);
+   endfunction : do_pack
+
+   ////////////////////////////////////////////
+   // func: do_unpack
+   virtual function void do_unpack(uvm_packer packer);
+      super.do_unpack(packer);
+
+      if(operation inside {[ADD_A_B : INC_A], ACCUM})
+         alpha = packer.unpack_field_int(16);
+      if(operation inside {[ADD_A_B : DIV_B_A], INC_B})
+         beta = packer.unpack_field_int(16);
+   endfunction : do_unpack
+
+   ////////////////////////////////////////////
+   // func: do_compare
+   virtual function bit do_compare(uvm_object rhs,
+                                   uvm_comparer comparer);
+      item_c _rhs;
+      $cast(_rhs, rhs);
+      do_compare = super.do_compare(rhs, comparer);
+      if(operation inside {[ADD_A_B : INC_A], ACCUM})
+         do_compare &= comparer.compare_field_int("alpha", alpha, _rhs.alpha, 16);
+      if(operation inside {[ADD_A_B : DIV_B_A], INC_B})
+         do_compare &= comparer.compare_field_int("beta", beta, _rhs.beta, 16);
+   endfunction : do_compare
+
+endclass : item_c
+
+
+`endif // __ALU_ITEM_SV__
+
+
diff --git a/verif/vkits/alu/alu_mon.sv b/verif/vkits/alu/alu_mon.sv
new file mode 100755
index 0000000..5bb1016
--- /dev/null
+++ b/verif/vkits/alu/alu_mon.sv
@@ -0,0 +1,151 @@
+//-*- mode: Verilog; verilog-indent-level: 3; indent-tabs-mode: nil; tab-width: 1 -*-
+
+// **********************************************************************
+// *
+// * legal mumbo jumbo
+// *
+// * Copyright 2013
+// * (utg v0.8.2)
+// ***********************************************************************
+// File:   alu_mon.sv
+// Author: bhunter
+/* About:  <description>
+ *************************************************************************/
+
+`ifndef __ALU_MON_SV__
+   `define __ALU_MON_SV__
+
+`include "alu_item.sv"
+
+// class: mon_c
+// Monitors an ALU bus and reports activity.
+class mon_c extends uvm_monitor;
+   `uvm_component_utils_begin(alu_pkg::mon_c)
+      `uvm_field_string(intf_name, UVM_ALL_ON)
+   `uvm_component_utils_end
+
+   //----------------------------------------------------------------------------------------
+   // Group: Configuration Fields
+
+   // field: intf_name
+   // The name of the virtual interface that we'll hook up to
+   string intf_name = "mon_vi";
+
+   //----------------------------------------------------------------------------------------
+   // Group: TLM Ports
+
+   // field: monitored_item_port
+   // All monitored transactions go out here
+   uvm_analysis_port #(item_c) monitored_item_port;
+
+   // field: monitored_result_port
+   // All monitored results go out here
+   uvm_analysis_port #(result_t) monitored_result_port;
+
+   //----------------------------------------------------------------------------------------
+   // Group: Fields
+
+   // field: mon_vi
+   // Virtual interface to monitor
+   virtual alu_intf.mon_mp mon_vi;
+
+   //----------------------------------------------------------------------------------------
+   // Group: Methods
+   function new(string name="mon",
+                uvm_component parent=null);
+      super.new(name, parent);
+   endfunction : new
+
+   ////////////////////////////////////////////
+   // func: build_phase
+   virtual function void build_phase(uvm_phase phase);
+      super.build_phase(phase);
+
+      // get the interface
+      `cn_get_intf(virtual alu_intf.mon_mp, "alu_pkg::alu_intf", intf_name, mon_vi)
+
+      monitored_item_port = new("monitored_item_port", this);
+      monitored_result_port = new("monitored_result_port", this);
+   endfunction : build_phase
+
+   ////////////////////////////////////////////
+   // func: run_phase
+   virtual task run_phase(uvm_phase phase);
+      forever begin
+         @(posedge mon_vi.mon_cb.rst_n);
+
+         fork
+            monitor_item();
+            monitor_result();
+            @(negedge mon_vi.mon_cb.rst_n);
+         join_any
+
+         `cn_info(("Stopping monitor due to reset."))
+         disable fork;
+      end
+
+   endtask : run_phase
+
+   ////////////////////////////////////////////
+   // func: monitor_item
+   // Watch and broadcast the transactions on the bus
+   virtual task monitor_item();
+      int num_clocks;
+      byte unsigned data[];
+      item_c item;
+
+      forever begin
+         // wait for the rising edge of the control
+         @(posedge mon_vi.mon_cb.ctl);
+
+         // determine how many clocks are in this item
+         case(mon_vi.mon_cb.dat)
+            // 5-cycle transactions
+            item_c::ADD_A_B, item_c::SUB_A_B, item_c::SUB_B_A,
+            item_c::MUL_A_B, item_c::DIV_A_B, item_c::DIV_B_A :
+               num_clocks = 5;
+
+            // 3-cycle transactions
+            item_c::INC_A, item_c::INC_B, item_c::ACCUM :
+               num_clocks = 3;
+
+            // 1-cycle transactions
+            item_c::CLR_RES :
+               num_clocks = 1;
+
+            default:
+               `cn_err(("Unknown operation type: %02X", mon_vi.mon_cb.dat))
+         endcase
+
+         // collect the data for each cycle
+         data = new[num_clocks];
+         for(int clk=0; clk < num_clocks; clk++) begin
+            data[clk] = mon_vi.mon_cb.dat;
+            @(mon_vi.mon_cb);
+            if(mon_vi.mon_cb.ctl == 1)
+               `cn_err(("The CTL signal is high during a transaction that should have been %0d clocks.", num_clocks))
+         end
+
+         // create the transaction, unpack into it, and write it out the monitored_item_port
+         item = item_c::type_id::create("mon_item");
+         item.unpack_bytes(data);
+         `cn_info(("Monitored: %s", item.convert2string()))
+         monitored_item_port.write(item);
+      end
+   endtask : monitor_item
+
+   ////////////////////////////////////////////
+   // func: monitor_result
+   // Monitor the ready and result signal and broadcast it out the monitored_result_port
+   virtual task monitor_result();
+      forever begin
+         @(posedge mon_vi.mon_cb.ready);
+         `cn_info(("Monitored Result: %08X", mon_vi.mon_cb.result))
+         monitored_result_port.write(mon_vi.mon_cb.result);
+      end
+   endtask : monitor_result
+
+endclass : mon_c
+
+`endif // __ALU_MON_SV__
+
diff --git a/verif/vkits/alu/alu_pkg.sv b/verif/vkits/alu/alu_pkg.sv
new file mode 100755
index 0000000..1cf08b0
--- /dev/null
+++ b/verif/vkits/alu/alu_pkg.sv
@@ -0,0 +1,50 @@
+//-*- mode: Verilog; verilog-indent-level: 3; indent-tabs-mode: nil; tab-width: 1 -*-
+
+// **********************************************************************
+// *
+// * legal mumbo jumbo
+// *
+// * Copyright 2013
+// * (utg v0.8.2)
+// ***********************************************************************
+// File:   alu_pkg.sv
+// Author: bhunter
+/* About:  alu package
+ *************************************************************************/
+
+
+// (`includes of macros may go here)
+`include "uvm_macros.svh"
+
+// package: alu_pkg
+// (Describe me)
+package alu_pkg;
+
+   //----------------------------------------------------------------------------------------
+   // Group: Imports
+   import uvm_pkg::*;
+
+   //----------------------------------------------------------------------------------------
+   // Group: Imp Declarations
+
+   `uvm_analysis_imp_decl(_item)
+   `uvm_analysis_imp_decl(_result)
+
+   //----------------------------------------------------------------------------------------
+   // Group: Types
+   typedef logic [31:0] result_t;
+   
+   //----------------------------------------------------------------------------------------
+   // Group: Includes
+
+`include "alu_agent.sv"
+`include "alu_drv.sv"
+`include "alu_item.sv"
+`include "alu_mon.sv"
+`include "alu_pred.sv"
+`include "alu_seq_lib.sv"
+`include "alu_sqr.sv"
+
+endpackage : alu_pkg
+
+
diff --git a/verif/vkits/alu/alu_pred.sv b/verif/vkits/alu/alu_pred.sv
new file mode 100755
index 0000000..13015b3
--- /dev/null
+++ b/verif/vkits/alu/alu_pred.sv
@@ -0,0 +1,152 @@
+//-*- mode: Verilog; verilog-indent-level: 3; indent-tabs-mode: nil; tab-width: 1 -*-
+
+// **********************************************************************
+// *
+// * legal mumbo jumbo
+// *
+// * Copyright 2013
+// * (utg v0.8.2)
+// ***********************************************************************
+// File:   alu_pred.sv
+// Author: bhunter
+/* About:  ALU Predictor
+ *************************************************************************/
+
+`ifndef __ALU_PRED_SV__
+   `define __ALU_PRED_SV__
+
+   `include "alu_item.sv"
+
+class pred_c extends uvm_component;
+   `uvm_component_utils_begin(pred_c)
+      `uvm_field_object(reg_block,   UVM_REFERENCE)
+      `uvm_field_int(dev_ref_model, UVM_ALL_ON)
+   `uvm_component_utils_end
+
+   //----------------------------------------------------------------------------------------
+   // Group: Configuration Fields
+
+   // field: reg_block
+   // Auto-generated Register Block
+   alu_csr_pkg::reg_block_c reg_block;
+
+   // field: dev_ref_model
+   // When set, operates in reference model mode
+   bit dev_ref_model = 0;
+
+   //----------------------------------------------------------------------------------------
+   // Group: TLM Ports
+
+   // field: monitored_item_imp
+   uvm_analysis_imp_item #(item_c, pred_c) monitored_item_imp;
+
+   // field: monitored_result_imp
+   uvm_analysis_imp_result #(result_t, pred_c) monitored_result_imp;
+
+   // field: seq_item_port
+   // As a reference model, pulls transactions from the sequencer
+   uvm_seq_item_pull_port #(item_c) seq_item_port;
+
+   // field: monitored_item_port
+   // As a reference model, drives out the transactions that were "driven"
+   uvm_analysis_port #(item_c) monitored_item_port;
+
+   // field: monitored_result_port
+   // As a reference model, drives out the results that were "seen"
+   uvm_analysis_port #(result_t) monitored_result_port;
+
+   //----------------------------------------------------------------------------------------
+   // Group: Fields
+
+   // field: result
+   // The result of the monitored transaction is stored here and checked with the received result
+   result_t result = 0;
+
+   // field:
+   //----------------------------------------------------------------------------------------
+   // Group: Methods
+   function new(string name="pred",
+                uvm_component parent=null);
+      super.new(name, parent);
+   endfunction : new
+
+   ////////////////////////////////////////////
+   // func: build_phase
+   function void build_phase(uvm_phase phase);
+      super.build_phase(phase);
+
+      if(dev_ref_model) begin
+         seq_item_port = new("seq_item_port", this);
+         monitored_item_port = new("monitored_item_port", this);
+         monitored_result_port = new("monitored_result_port", this);
+      end else begin
+         monitored_item_imp = new("monitored_item_imp", this);
+         monitored_result_imp = new("monitored_result_imp", this);
+      end
+
+   endfunction : build_phase
+
+   ////////////////////////////////////////////
+   // func: main_phase
+   task main_phase(uvm_phase phase);
+      if(dev_ref_model) begin
+         item_c item;
+         forever begin
+            seq_item_port.get_next_item(item);
+
+            `cn_dbg(30, ("Dev_Ref_Model: %s", item.convert2string()))
+
+            // create a delay that models the transmission of the transaction
+            #5ns;
+            monitored_item_port.write(item);
+
+            // calculate result
+            write_item(item);
+
+            // create a delay that models the ALU calulation speed
+            #15ns;
+
+            // send back the result
+            write_result(result);
+            item.result = result;
+            seq_item_port.item_done(item);
+            monitored_result_port.write(result);
+         end
+      end
+   endtask : main_phase
+
+   ////////////////////////////////////////////
+   // func: write_item
+   // Accepts ALU transactions and sets the next expected result
+   virtual function void write_item(item_c _item);
+      bit [7:0] k_val = reg_block.CONST.K_VAL.value;
+      bit [7:0] c_val = reg_block.CONST.C_VAL.value;
+
+      case(_item.operation)
+         item_c::ADD_A_B :  result = k_val * (_item.alpha + _item.beta) + c_val;
+         item_c::SUB_A_B :  result = k_val * (_item.alpha - _item.beta) + c_val;
+         item_c::SUB_B_A :  result = k_val * (_item.beta  - _item.alpha) + c_val;
+         item_c::MUL_A_B :  result = k_val * (_item.alpha * _item.beta) + c_val;
+         item_c::DIV_A_B :  result = k_val * (_item.alpha / _item.beta) + c_val;
+         item_c::DIV_B_A :  result = k_val * (_item.beta  / _item.alpha) + c_val;
+         item_c::INC_A   :  result = k_val * (_item.alpha + 1) + c_val;
+         item_c::INC_B   :  result = k_val * (_item.beta  + 1) + c_val;
+         item_c::CLR_RES :  result = 0;
+         item_c::ACCUM   :  result += _item.alpha;
+      endcase
+
+      `cn_dbg(30, ("Calculated result %08X on item: %s", result, _item.convert2string()))
+   endfunction : write_item
+
+   ////////////////////////////////////////////
+   // func: write_result
+   // Called when a result is monitored
+   virtual function void write_result(result_t _result);
+      if(_result != result)
+         `cn_err(("Actual result: %08X != Expected result: %08x",
+                  _result, result))
+   endfunction : write_result
+endclass : pred_c
+
+`endif // __ALU_PRED_SV__
+
diff --git a/verif/vkits/alu/alu_seq_lib.sv b/verif/vkits/alu/alu_seq_lib.sv
new file mode 100755
index 0000000..3e75572
--- /dev/null
+++ b/verif/vkits/alu/alu_seq_lib.sv
@@ -0,0 +1,239 @@
+//-*- mode: Verilog; verilog-indent-level: 3; indent-tabs-mode: nil; tab-width: 1 -*-
+
+// **********************************************************************
+// *
+// * legal mumbo jumbo
+// *
+// * Copyright 2013
+// * (utg v0.8.2)
+// ***********************************************************************
+// File:   alu_seq_lib.sv
+// Author: bhunter
+/* About:  [description]
+ *************************************************************************/
+
+`ifndef __ALU_SEQ_LIB_SV__
+   `define __ALU_SEQ_LIB_SV__
+
+   `include "alu_item.sv"
+
+// Forward declaration of library sequence
+/* -----\/----- EXCLUDED -----\/-----
+typedef class lib_seq_c;
+ -----/\----- EXCLUDED -----/\----- */
+
+//****************************************************************************************
+// class: exer_seq_c
+// Runs <count> transactions
+class exer_seq_c extends uvm_sequence #(item_c, item_c);
+   `uvm_object_utils_begin(alu_pkg::exer_seq_c)
+      `uvm_field_int(count, UVM_ALL_ON | UVM_DEC)
+   `uvm_object_utils_end
+
+   //----------------------------------------------------------------------------------------
+   // Group: Fields
+
+   // field: count
+   // The number of random transactions to perform
+   rand int count;
+   constraint reasonable_cnstr { count inside {[1:100]}; }
+
+   //----------------------------------------------------------------------------------------
+   // Group: Methods
+
+   function new(string name="alu_seq");
+      super.new(name);
+   endfunction : new
+
+   ////////////////////////////////////////////
+   // func: body
+   virtual task body();
+      item_c item;
+
+      repeat(count) begin
+         `uvm_do(item)
+         get_response(rsp);
+         `cn_info(("Got response result: %08X", rsp.result))
+      end
+   endtask
+endclass : exer_seq_c
+
+//****************************************************************************************
+// class: factorial_seq_c
+// Calculates the factorial of the operand value
+class factorial_seq_c extends uvm_sequence #(item_c, item_c);
+   `uvm_object_utils_begin(alu_pkg::factorial_seq_c)
+      `uvm_field_int(operand, UVM_ALL_ON)
+      `uvm_field_int(result,  UVM_ALL_ON)
+   `uvm_object_utils_end
+
+   //----------------------------------------------------------------------------------------
+   // Group: Fields
+
+   // field: operand
+   // The value to perform the factorial on
+   rand bit [15:0] operand;
+   constraint operand_cnstr { operand <= 9; }
+
+   // field: result
+   // The final result
+   result_t result = 1;
+
+   //----------------------------------------------------------------------------------------
+   // Group: Methods
+   function new(string name="factorial_seq");
+      super.new(name);
+   endfunction : new
+
+   ////////////////////////////////////////////
+   // func: body
+   // Loop from 1..operand and multiply all the numbers together
+   virtual task body();
+      item_c item;
+      byte num;
+
+      for(num = 1; num <= operand; num++) begin
+         `uvm_do_with(item, { operation == MUL_A_B; alpha == num; beta == local::result[15:0]; })
+         get_response(rsp);
+         result = rsp.result;
+         `cn_info(("num=%0d, result=%0d", num, result))
+      end
+      `cn_info(("%0d! = %0d", operand, result))
+   endtask : body
+endclass : factorial_seq_c
+
+//****************************************************************************************
+// class: sum_array_seq_c
+// Creates a randomly-sized array and adds up their values
+class sum_array_seq_c extends uvm_sequence #(item_c, item_c);
+   `uvm_object_utils_begin(alu_pkg::sum_array_seq_c)
+      `uvm_field_array_int(data, UVM_ALL_ON | UVM_DEC)
+   `uvm_object_utils_end
+
+   //----------------------------------------------------------------------------------------
+   // Group: Fields
+
+   // field: data
+   // An array of words to be summed
+   rand bit [15:0] data[];
+
+   // constraint: data_cnstr
+   // keep it to a reasonable size
+   // and use small numbers only
+   constraint data_cnstr { 
+      data.size() inside {[1:50]};
+      foreach(data[x]) {
+         data[x] inside {[0:100]};
+      }
+   }
+
+   // field: result
+   // The final answer
+   result_t result;
+
+   //----------------------------------------------------------------------------------------
+   // Group: Methods
+
+   function new(string name="sum_array_seq");
+      super.new(name);
+   endfunction : new
+
+   ////////////////////////////////////////////
+   // func: body
+   virtual task body();
+      item_c item;
+
+      lock();
+      `uvm_do_with(item, { operation == CLR_RES; })
+      get_response(rsp);
+      foreach(data[x]) begin
+         `uvm_do_with(item, { operation == ACCUM; alpha == data[x]; })
+         get_response(rsp);
+      end
+      unlock();
+      result = rsp.result;
+      `cn_info(("Sum of this array = %0x:", result))
+   endtask : body
+endclass : sum_array_seq_c
+
+//****************************************************************************************
+// class: sum_of_factorials_seq_c
+// Sum the factorials between op_x and op_y
+class sum_of_factorials_seq_c extends uvm_sequence #(item_c);
+   `uvm_object_utils_begin(alu_pkg::sum_of_factorials_seq_c)
+      `uvm_field_int(op_x, UVM_ALL_ON | UVM_DEC)
+      `uvm_field_int(op_y, UVM_ALL_ON | UVM_DEC)
+      `uvm_field_int(result, UVM_ALL_ON | UVM_DEC)
+   `uvm_object_utils_end
+
+   //----------------------------------------------------------------------------------------
+   // Group: Fields
+
+   // vars: op_x, op_y
+   // Operands for this summation function
+   rand bit [15:0] op_x;
+   rand bit [15:0] op_y;
+
+   constraint operands_cnstr {
+      op_x < op_y;
+      op_x inside {[1:8]};
+      op_y inside {[1:8]};
+   }
+
+   // field: result
+   // The final result
+   result_t result;
+
+   //----------------------------------------------------------------------------------------
+   // Group: Methods
+   function new(string name="sum_of_factorials_array_seq");
+      super.new(name);
+   endfunction : new
+
+   ////////////////////////////////////////////
+   // func: body
+   virtual task body();
+      int num;
+      bit [15:0] data[];
+      factorial_seq_c fact_seq;
+      sum_array_seq_c sum_seq;
+      int  idx;
+
+      // fill the data array with all the factorials
+      data = new[(op_y - op_x + 1)];
+      idx = 0;
+      for(num = op_x; num <= op_y; num++) begin
+         `uvm_do_with(fact_seq, { operand == num; })
+         data[idx] = fact_seq.result;
+         idx++;
+      end
+
+      // now sum the array
+      `uvm_create(sum_seq)
+      sum_seq.data = data;
+      `uvm_send(sum_seq)
+      result = sum_seq.result;
+      `cn_info(("The sum of factorials from %0d to %0d is %0d.",
+                op_x, op_y, result))
+   endtask : body
+endclass : sum_of_factorials_seq_c
+
+//****************************************************************************************
+/* -----\/----- EXCLUDED -----\/-----
+class lib_seq_c extends uvm_sequence_library #(item_c);
+   `uvm_object_utils(alu_pkg::lib_seq_c)
+   `uvm_sequence_library_utils(lib_seq_c)
+
+   //----------------------------------------------------------------------------------------
+   // Group: Methods
+   function new(string name="lib_seq");
+      super.new(name);
+      init_sequence_library();
+   endfunction : new
+
+endclass : lib_seq_c
+ -----/\----- EXCLUDED -----/\----- */
+
+
+`endif // __ALU_SEQ_LIB_SV__
+
diff --git a/verif/vkits/alu/alu_sqr.sv b/verif/vkits/alu/alu_sqr.sv
new file mode 100755
index 0000000..35e7e85
--- /dev/null
+++ b/verif/vkits/alu/alu_sqr.sv
@@ -0,0 +1,69 @@
+//-*- mode: Verilog; verilog-indent-level: 3; indent-tabs-mode: nil; tab-width: 1 -*-
+
+// **********************************************************************
+// *
+// * legal mumbo jumbo
+// *
+// * Copyright 2013
+// * (utg v0.8.2)
+// ***********************************************************************
+// File:   alu_sqr.sv
+// Author: bhunter
+/* About:  <description>
+ *************************************************************************/
+
+`ifndef __ALU_SQR_SV__
+   `define __ALU_SQR_SV__
+
+`include "alu_item.sv"
+
+// class: sqr_c
+// (Describe me)
+class sqr_c extends uvm_sequencer#(item_c);
+   `uvm_component_utils_begin(alu_pkg::sqr_c)
+   `uvm_component_utils_end
+
+   //----------------------------------------------------------------------------------------
+   // Group: Configuration Fields
+
+   //----------------------------------------------------------------------------------------
+   // Group: TLM Ports
+
+   //----------------------------------------------------------------------------------------
+   // Group: Fields
+
+   //----------------------------------------------------------------------------------------
+   // Group: Methods
+   function new(string name="sqr",
+                uvm_component parent=null);
+      super.new(name, parent);
+   endfunction : new
+
+   ////////////////////////////////////////////
+   // func: build_phase
+   virtual function void build_phase(uvm_phase phase);
+      super.build_phase(phase);
+   endfunction : build_phase
+
+   ////////////////////////////////////////////
+   // func: connect_phase
+   virtual function void connect_phase(uvm_phase phase);
+      super.connect_phase(phase);
+   endfunction : connect_phase
+
+   ////////////////////////////////////////////
+   // func: end_of_elaboration_phase
+   virtual function void end_of_elaboration_phase(uvm_phase phase);
+      super.end_of_elaboration_phase(phase);
+   endfunction : end_of_elaboration_phase
+
+   ////////////////////////////////////////////
+   // func: run_phase
+   virtual task run_phase(uvm_phase phase);
+      super.run_phase(phase);
+   endtask : run_phase
+
+endclass : sqr_c
+
+`endif // __ALU_SQR_SV__
+
diff --git a/verif/vkits/alutb/alutb_alu_item_subscriber.sv b/verif/vkits/alutb/alutb_alu_item_subscriber.sv
new file mode 100755
index 0000000..6b3b417
--- /dev/null
+++ b/verif/vkits/alutb/alutb_alu_item_subscriber.sv
@@ -0,0 +1,39 @@
+//-*- mode: Verilog; verilog-indent-level: 3; indent-tabs-mode: nil; tab-width: 1 -*-
+
+// **********************************************************************
+// *
+// * legal mumbo jumbo
+// *
+// * Copyright 2013
+// * (utg v0.8.2)
+// ***********************************************************************
+// File:   alutb_alu_item_subscriber.sv
+// Author: bhunter
+/* About:   Listens for all monitored ALU transactions.
+ *************************************************************************/
+
+`ifndef __ALUTB_ALU_ITEM_SUBSCRIBER_SV__
+   `define __ALUTB_ALU_ITEM_SUBSCRIBER_SV__
+
+// class: alu_item_subscriber_c
+// Print out all ALU transactions.
+class alu_item_subscriber_c extends uvm_subscriber#(alu_pkg::item_c);
+   `uvm_component_utils(alutb_pkg::alu_item_subscriber_c)
+
+   //----------------------------------------------------------------------------------------
+   // Group: Methods
+   function new(string name="alu_item_subscriber",
+                uvm_component parent=null);
+      super.new(name, parent);
+   endfunction : new
+
+    ////////////////////////////////////////////
+   // func: write
+   // Receives the alu_pkg::item_c
+   virtual function void write(alu_pkg::item_c t);
+      `cn_info(("Received this ALU transaction: %s", t.convert2string()))
+   endfunction : write
+endclass : alu_item_subscriber_c
+
+`endif // __ALUTB_ALU_ITEM_SUBSCRIBER_SV__
+
diff --git a/verif/vkits/alutb/alutb_env.sv b/verif/vkits/alutb/alutb_env.sv
index 667f35f..f60ed7b 100755
--- a/verif/vkits/alutb/alutb_env.sv
+++ b/verif/vkits/alutb/alutb_env.sv
@@ -17,6 +17,7 @@
    `define __ALUTB_ENV_SV__
 
    `include "alutb_cfg.sv"
+   `include "alutb_alu_item_subscriber.sv"
 
 // class: env_c
 // ALUTB Environment class
@@ -44,9 +45,17 @@ class env_c extends uvm_env;
    //----------------------------------------------------------------------------------------
    // Group: Fields
 
-   // field: Drives the CTX traffic
+   // field: ctx_agent
+   // Drives the CTX traffic
    ctx_pkg::agent_c ctx_agent;
 
+   // field: alu_agent
+   // The ALU agent
+   alu_pkg::agent_c alu_agent;
+
+   // field: alu_item_subscriber
+   alu_item_subscriber_c alu_item_subscriber;
+
    //----------------------------------------------------------------------------------------
    // Group: Methods
    function new(string name="env",
@@ -62,12 +71,18 @@ class env_c extends uvm_env;
 
       // build ctx agent
       ctx_agent = ctx_pkg::agent_c::type_id::create("ctx_agent", this);
+
+      // create the ALU agent
+      uvm_config_db#(int)::set(this, "alu_agent", "is_active", is_active);
+      alu_agent = alu_pkg::agent_c::type_id::create("alu_agent", this);
+      alu_item_subscriber = alu_item_subscriber_c::type_id::create("alu_item_subscriber", this);
    endfunction : build_phase
 
    ////////////////////////////////////////////
    // func: connect_phase
    virtual function void connect_phase(uvm_phase phase);
       super.connect_phase(phase);
+      alu_agent.monitored_item_port.connect(alu_item_subscriber.analysis_export);
    endfunction : connect_phase
 
    ////////////////////////////////////////////
diff --git a/verif/vkits/alutb/alutb_env.sv.orig b/verif/vkits/alutb/alutb_env.sv.orig
new file mode 100755
index 0000000..667f35f
--- /dev/null
+++ b/verif/vkits/alutb/alutb_env.sv.orig
@@ -0,0 +1,81 @@
+//-*- mode: Verilog; verilog-indent-level: 3; indent-tabs-mode: nil; tab-width: 1 -*-
+
+// **********************************************************************
+// *
+// * legal mumbo jumbo
+// *
+// * (c) 2011
+// * (utg v0.3.3)
+// ***********************************************************************
+// File:   alutb_env.sv
+// Author: bhunter
+/* About:  ALUTB Environment
+ *************************************************************************/
+
+
+`ifndef __ALUTB_ENV_SV__
+   `define __ALUTB_ENV_SV__
+
+   `include "alutb_cfg.sv"
+
+// class: env_c
+// ALUTB Environment class
+class env_c extends uvm_env;
+   `uvm_component_utils_begin(alutb_pkg::env_c)
+      `uvm_field_object(cfg,       UVM_REFERENCE)
+      `uvm_field_object(reg_block, UVM_REFERENCE)
+      `uvm_field_enum(uvm_active_passive_enum, is_active, UVM_ALL_ON)
+   `uvm_component_utils_end
+
+   //----------------------------------------------------------------------------------------
+   // Group: Configuration Fields
+
+   // var: cfg
+   // environment configurations
+   cfg_c cfg;
+
+   // var: reg_block
+   // alu register block (reference to the one in cfg)
+   alu_csr_pkg::reg_block_c reg_block;
+
+   // var: is_active
+   uvm_active_passive_enum is_active = UVM_ACTIVE;
+
+   //----------------------------------------------------------------------------------------
+   // Group: Fields
+
+   // field: Drives the CTX traffic
+   ctx_pkg::agent_c ctx_agent;
+
+   //----------------------------------------------------------------------------------------
+   // Group: Methods
+   function new(string name="env",
+                uvm_component parent=null);
+      super.new(name, parent);
+   endfunction : new
+
+   ////////////////////////////////////////////
+   // func: build_phase
+   // Build all the agents, and environments, mostly based on <is_active>
+   virtual function void build_phase(uvm_phase phase);
+      super.build_phase(phase);
+
+      // build ctx agent
+      ctx_agent = ctx_pkg::agent_c::type_id::create("ctx_agent", this);
+   endfunction : build_phase
+
+   ////////////////////////////////////////////
+   // func: connect_phase
+   virtual function void connect_phase(uvm_phase phase);
+      super.connect_phase(phase);
+   endfunction : connect_phase
+
+   ////////////////////////////////////////////
+   // func: end_of_elaboration_phase
+   virtual function void end_of_elaboration_phase(uvm_phase phase);
+      super.end_of_elaboration_phase(phase);
+   endfunction : end_of_elaboration_phase
+
+endclass : env_c
+
+`endif // __ALUTB_ENV_SV__
diff --git a/verif/vkits/alutb/alutb_env.sv.rej b/verif/vkits/alutb/alutb_env.sv.rej
new file mode 100644
index 0000000..ae69cb2
--- /dev/null
+++ b/verif/vkits/alutb/alutb_env.sv.rej
@@ -0,0 +1,23 @@
+***************
+*** 47,52 ****
+     // field: Drives the CTX traffic
+     ctx_pkg::agent_c ctx_agent;
+     
+     //----------------------------------------------------------------------------------------
+     // Group: Methods
+     function new(string name="env",
+--- 48,61 ----
+     // field: Drives the CTX traffic
+     ctx_pkg::agent_c ctx_agent;
+     
++    // field: alu_agent
++    // The ALU agent
++    alu_pkg::agent_c alu_agent;
++ 
++    // field: alu_item_subscriber
++    // Prints out all of the Monitored items
++    alu_item_subscriber_c alu_item_subscriber;   
++    
+     //----------------------------------------------------------------------------------------
+     // Group: Methods
+     function new(string name="env",
diff --git a/verif/vkits/alutb/alutb_pkg.sv b/verif/vkits/alutb/alutb_pkg.sv
index 1997758..70fbedd 100755
--- a/verif/vkits/alutb/alutb_pkg.sv
+++ b/verif/vkits/alutb/alutb_pkg.sv
@@ -25,9 +25,10 @@ package alutb_pkg;
 
    //----------------------------------------------------------------------------------------
    // Group: Includes
+`include "alutb_alu_item_subscriber.sv"
 `include "alutb_cfg.sv"
 `include "alutb_env.sv"
-
+   
 endpackage : alutb_pkg
 
 
diff --git a/verif/vkits/alutb/alutb_pkg.sv.orig b/verif/vkits/alutb/alutb_pkg.sv.orig
new file mode 100755
index 0000000..1997758
--- /dev/null
+++ b/verif/vkits/alutb/alutb_pkg.sv.orig
@@ -0,0 +1,33 @@
+//-*- mode: Verilog; verilog-indent-level: 3; indent-tabs-mode: nil; tab-width: 1 -*-
+
+// **********************************************************************
+// *
+// * legal mumbo jumbo
+// *
+// * (c) 2011
+// * (utg v0.3.3)
+// ***********************************************************************
+// File:   alutb_pkg.sv
+// Author: bhunter
+/* About:  ALUTB package
+ *************************************************************************/
+
+
+`include "uvm_macros.svh"
+
+// package: alutb_pkg
+// The ALUT Testbench Tutorial package
+package alutb_pkg;
+
+   //----------------------------------------------------------------------------------------
+   // Group: Imports
+   import uvm_pkg::*;
+
+   //----------------------------------------------------------------------------------------
+   // Group: Includes
+`include "alutb_cfg.sv"
+`include "alutb_env.sv"
+
+endpackage : alutb_pkg
+
+
