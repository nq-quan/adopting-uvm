Index: verif/vkits/alu/alu.flist
===================================================================
--- verif/vkits/alu/alu.flist	(revision 0)
+++ verif/vkits/alu/alu.flist	(revision 0)
@@ -0,0 +1,4 @@
++incdir+../../verif/vkits/alu
+../../verif/vkits/alu/alu_intf.sv
+../../verif/vkits/alu/alu_pkg.sv
+
Index: verif/vkits/alu/alu_mon.sv
===================================================================
--- verif/vkits/alu/alu_mon.sv	(revision 0)
+++ verif/vkits/alu/alu_mon.sv	(revision 0)
@@ -0,0 +1,74 @@
+//-*- mode: Verilog; verilog-indent-level: 3; indent-tabs-mode: nil; tab-width: 1 -*-
+
+// **********************************************************************
+// * CAVIUM CONFIDENTIAL AND PROPRIETARY NOTE
+// *
+// * This software contains information confidential and proprietary to
+// * Cavium, Inc. It shall not be reproduced in whole or in part, or
+// * transferred to other documents, or disclosed to third parties, or
+// * used for any purpose other than that for which it was obtained,
+// * without the prior written consent of Cavium, Inc.
+// * Copyright 2013, Cavium, Inc.  All rights reserved.
+// * (utg v0.8.2)
+// ***********************************************************************
+// File:   alu_mon.sv
+// Author: bhunter
+/* About:  <description>
+ *************************************************************************/
+
+`ifndef __ALU_MON_SV__
+   `define __ALU_MON_SV__
+
+
+// (`includes go here)
+
+// class: mon_c
+// (Describe me)
+class mon_c extends uvm_monitor;
+   `uvm_component_utils_begin(alu_pkg::mon_c)
+   `uvm_component_utils_end
+
+   //----------------------------------------------------------------------------------------
+   // Group: Configuration Fields
+
+   //----------------------------------------------------------------------------------------
+   // Group: TLM Ports
+
+   //----------------------------------------------------------------------------------------
+   // Group: Fields
+
+   //----------------------------------------------------------------------------------------
+   // Group: Methods
+   function new(string name="mon",
+                uvm_component parent=null);
+      super.new(name, parent);
+   endfunction : new
+
+   ////////////////////////////////////////////
+   // func: build_phase
+   virtual function void build_phase(uvm_phase phase);
+      super.build_phase(phase);
+   endfunction : build_phase
+
+   ////////////////////////////////////////////
+   // func: connect_phase
+   virtual function void connect_phase(uvm_phase phase);
+      super.connect_phase(phase);
+   endfunction : connect_phase
+
+   ////////////////////////////////////////////
+   // func: end_of_elaboration_phase
+   virtual function void end_of_elaboration_phase(uvm_phase phase);
+      super.end_of_elaboration_phase(phase);
+   endfunction : end_of_elaboration_phase
+
+   ////////////////////////////////////////////
+   // func: run_phase
+   virtual task run_phase(uvm_phase phase);
+      super.run_phase(phase);
+   endtask : run_phase
+
+endclass : mon_c
+
+`endif // __ALU_MON_SV__
+
Index: verif/vkits/alu/alu_drv.sv
===================================================================
--- verif/vkits/alu/alu_drv.sv	(revision 0)
+++ verif/vkits/alu/alu_drv.sv	(revision 0)
@@ -0,0 +1,73 @@
+//-*- mode: Verilog; verilog-indent-level: 3; indent-tabs-mode: nil; tab-width: 1 -*-
+
+// **********************************************************************
+// * CAVIUM CONFIDENTIAL AND PROPRIETARY NOTE
+// *
+// * This software contains information confidential and proprietary to
+// * Cavium, Inc. It shall not be reproduced in whole or in part, or
+// * transferred to other documents, or disclosed to third parties, or
+// * used for any purpose other than that for which it was obtained,
+// * without the prior written consent of Cavium, Inc.
+// * Copyright 2013, Cavium, Inc.  All rights reserved.
+// * (utg v0.8.2)
+// ***********************************************************************
+// File:   alu_drv.sv
+// Author: bhunter
+/* About:  <description>
+ *************************************************************************/
+
+`ifndef __ALU_DRV_SV__
+   `define __ALU_DRV_SV__
+
+`include "alu_item.sv"
+
+// class: drv_c
+// (Describe me)
+class drv_c extends uvm_driver#(item_c);
+   `uvm_component_utils_begin(alu_pkg::drv_c)
+   `uvm_component_utils_end
+
+   //----------------------------------------------------------------------------------------
+   // Group: Configuration Fields
+
+   //----------------------------------------------------------------------------------------
+   // Group: TLM Ports
+
+   //----------------------------------------------------------------------------------------
+   // Group: Fields
+
+   //----------------------------------------------------------------------------------------
+   // Group: Methods
+   function new(string name="drv",
+                uvm_component parent=null);
+      super.new(name, parent);
+   endfunction : new
+
+   ////////////////////////////////////////////
+   // func: build_phase
+   virtual function void build_phase(uvm_phase phase);
+      super.build_phase(phase);
+   endfunction : build_phase
+
+   ////////////////////////////////////////////
+   // func: connect_phase
+   virtual function void connect_phase(uvm_phase phase);
+      super.connect_phase(phase);
+   endfunction : connect_phase
+
+   ////////////////////////////////////////////
+   // func: end_of_elaboration_phase
+   virtual function void end_of_elaboration_phase(uvm_phase phase);
+      super.end_of_elaboration_phase(phase);
+   endfunction : end_of_elaboration_phase
+
+   ////////////////////////////////////////////
+   // func: run_phase
+   virtual task run_phase(uvm_phase phase);
+      super.run_phase(phase);
+   endtask : run_phase
+
+endclass : drv_c
+
+`endif // __ALU_DRV_SV__
+
Index: verif/vkits/alu/alu_item.sv
===================================================================
--- verif/vkits/alu/alu_item.sv	(revision 0)
+++ verif/vkits/alu/alu_item.sv	(revision 0)
@@ -0,0 +1,123 @@
+//-*- mode: Verilog; verilog-indent-level: 3; indent-tabs-mode: nil; tab-width: 1 -*-
+
+// **********************************************************************
+// * CAVIUM CONFIDENTIAL AND PROPRIETARY NOTE
+// *
+// * This software contains information confidential and proprietary to
+// * Cavium, Inc. It shall not be reproduced in whole or in part, or
+// * transferred to other documents, or disclosed to third parties, or
+// * used for any purpose other than that for which it was obtained,
+// * without the prior written consent of Cavium, Inc.
+// * Copyright 2013, Cavium, Inc.  All rights reserved.
+// * (utg v0.8.2)
+// ***********************************************************************
+// File:   alu_item.sv
+// Author: bhunter
+/* About:  <description>
+ *************************************************************************/
+
+`ifndef __ALU_ITEM_SV__
+   `define __ALU_ITEM_SV__
+
+// class: item_c
+// An ALU Transaction as a sequence item
+class item_c extends uvm_sequence_item;
+   //----------------------------------------------------------------------------------------
+   // Group: Types
+   typedef enum bit [7:0] {
+                           ADD_A_B = 0,
+                           SUB_A_B = 1,
+                           SUB_B_A = 2,
+                           MUL_A_B = 3,
+                           DIV_A_B = 4,
+                           DIV_B_A = 5,
+                           INC_A   = 6,
+                           INC_B   = 7,
+                           CLR_RES = 8,
+                           ACCUM   = 9
+                           } operation_e;
+
+   `uvm_object_utils_begin(alu_pkg::item_c)
+      `uvm_field_enum(operation_e, operation, UVM_ALL_ON)
+      `uvm_field_int (alpha,                  UVM_ALL_ON | UVM_NOPACK | UVM_NOCOMPARE)
+      `uvm_field_int (beta,                   UVM_ALL_ON | UVM_NOPACK | UVM_NOCOMPARE)
+   `uvm_object_utils_end
+
+   //----------------------------------------------------------------------------------------
+   // Group: Fields
+
+   // var: operation
+   rand operation_e operation;
+
+   // var: A variable
+   rand bit [15:0] alpha;
+
+   // var: B variable
+   rand bit [15:0] beta;
+
+   // ensure that all operands have legal values
+   constraint protocol_cnstr {
+      (operation == DIV_A_B) -> beta != 0;
+      (operation == DIV_B_A) -> alpha != 0;
+      (operation == SUB_A_B) -> alpha > beta;
+      (operation == SUB_B_A) -> beta > alpha;
+   }
+
+   // var: result
+   // This is the result of the operation, filled in by the driver and sent back with the response
+   result_t result;
+
+   //----------------------------------------------------------------------------------------
+   // Group: Methods
+   function new(string name="item");
+      super.new(name);
+   endfunction : new
+
+   //----------------------------------------------------------------------------------------
+   // func: convert2string
+   // Single-line printing
+   virtual function string convert2string();
+      convert2string = $psprintf("%s A:%04X B:%04X", operation, alpha, beta);
+   endfunction : convert2string
+
+   ////////////////////////////////////////////
+   // func: do_pack
+   virtual function void do_pack(uvm_packer packer);
+      super.do_pack(packer);
+
+      if(operation inside {[ADD_A_B : INC_A], ACCUM})
+         packer.pack_field_int(alpha, 16);
+      if(operation inside {[ADD_A_B : DIV_B_A], INC_B})
+         packer.pack_field_int(beta, 16);
+   endfunction : do_pack
+
+   ////////////////////////////////////////////
+   // func: do_unpack
+   virtual function void do_unpack(uvm_packer packer);
+      super.do_unpack(packer);
+
+      if(operation inside {[ADD_A_B : INC_A], ACCUM})
+         alpha = packer.unpack_field_int(16);
+      if(operation inside {[ADD_A_B : DIV_B_A], INC_B})
+         beta = packer.unpack_field_int(16);
+   endfunction : do_unpack
+
+   ////////////////////////////////////////////
+   // func: do_compare
+   virtual function bit do_compare(uvm_object rhs,
+                                   uvm_comparer comparer);
+      item_c _rhs;
+      $cast(_rhs, rhs);
+      do_compare = super.do_compare(rhs, comparer);
+      if(operation inside {[ADD_A_B : INC_A], ACCUM})
+         do_compare &= comparer.compare_field_int("alpha", alpha, _rhs.alpha, 16);
+      if(operation inside {[ADD_A_B : DIV_B_A], INC_B})
+         do_compare &= comparer.compare_field_int("beta", beta, _rhs.beta, 16);
+   endfunction : do_compare
+
+endclass : item_c
+
+
+`endif // __ALU_ITEM_SV__
+
+
Index: verif/vkits/alu/alu_agent.sv
===================================================================
--- verif/vkits/alu/alu_agent.sv	(revision 0)
+++ verif/vkits/alu/alu_agent.sv	(revision 0)
@@ -0,0 +1,97 @@
+//-*- mode: Verilog; verilog-indent-level: 3; indent-tabs-mode: nil; tab-width: 1 -*-
+
+// **********************************************************************
+// * CAVIUM CONFIDENTIAL AND PROPRIETARY NOTE
+// *
+// * This software contains information confidential and proprietary to
+// * Cavium, Inc. It shall not be reproduced in whole or in part, or
+// * transferred to other documents, or disclosed to third parties, or
+// * used for any purpose other than that for which it was obtained,
+// * without the prior written consent of Cavium, Inc.
+// * Copyright 2013, Cavium, Inc.  All rights reserved.
+// * (utg v0.8.2)
+// ***********************************************************************
+// File:   alu_agent.sv
+// Author: bhunter
+/* About:  <description>
+ *************************************************************************/
+
+`ifndef __ALU_AGENT_SV__
+   `define __ALU_AGENT_SV__
+
+
+`include "alu_drv.sv"
+`include "alu_mon.sv"
+`include "alu_sqr.sv"
+// (`includes go here)
+
+// class: agent_c
+// (Description)
+class agent_c extends uvm_agent;
+   `uvm_component_utils_begin(alu_pkg::agent_c)
+      `uvm_field_enum(uvm_active_passive_enum, is_active, UVM_ALL_ON)
+   `uvm_component_utils_end
+
+   //----------------------------------------------------------------------------------------
+   // Group: Configuration Fields
+
+   // field: is_active
+   // When set to UVM_ACTIVE, the sqr and drv will be present.
+   uvm_active_passive_enum is_active = UVM_ACTIVE;
+
+   //----------------------------------------------------------------------------------------
+   // Group: TLM Ports
+
+   //----------------------------------------------------------------------------------------
+   // Group: Fields
+
+   // fields: drv, mon, sqr
+   // Driver, monitor, and sequencer found in most agents
+   sqr_c sqr;
+   drv_c drv;
+   mon_c mon;
+
+   //----------------------------------------------------------------------------------------
+   // Group: Methods
+   function new(string name="agent",
+                uvm_component parent=null);
+      super.new(name, parent);
+   endfunction : new
+
+   ////////////////////////////////////////////
+   // func: build_phase
+   virtual function void build_phase(uvm_phase phase);
+      super.build_phase(phase);
+
+      mon = mon_c::type_id::create("mon", this);
+      if(is_active) begin
+         drv = drv_c::type_id::create("drv", this);
+         sqr = sqr_c::type_id::create("sqr", this);
+      end
+   endfunction : build_phase
+
+   ////////////////////////////////////////////
+   // func: connect_phase
+   virtual function void connect_phase(uvm_phase phase);
+      super.connect_phase(phase);
+
+      if(is_active)
+         drv.seq_item_port.connect(sqr.seq_item_export);
+   endfunction : connect_phase
+
+   ////////////////////////////////////////////
+   // func: end_of_elaboration_phase
+   virtual function void end_of_elaboration_phase(uvm_phase phase);
+      super.end_of_elaboration_phase(phase);
+   endfunction : end_of_elaboration_phase
+
+   ////////////////////////////////////////////
+   // func: run_phase
+   virtual task run_phase(uvm_phase phase);
+      super.run_phase(phase);
+   endtask : run_phase
+
+endclass : agent_c
+
+`endif // __ALU_AGENT_SV__
+
Index: verif/vkits/alu/alu_intf.sv
===================================================================
--- verif/vkits/alu/alu_intf.sv	(revision 0)
+++ verif/vkits/alu/alu_intf.sv	(revision 0)
@@ -0,0 +1,118 @@
+//-*- mode: Verilog; verilog-indent-level: 3; indent-tabs-mode: nil; tab-width: 1 -*-
+
+// **********************************************************************
+// * CAVIUM CONFIDENTIAL AND PROPRIETARY NOTE
+// *
+// * This software contains information confidential and proprietary to
+// * Cavium, Inc. It shall not be reproduced in whole or in part, or
+// * transferred to other documents, or disclosed to third parties, or
+// * used for any purpose other than that for which it was obtained,
+// * without the prior written consent of Cavium, Inc.
+// * Copyright 2013, Cavium, Inc.  All rights reserved.
+// * (utg v0.8.2)
+// ***********************************************************************
+// File:   alu_intf.sv
+// Author: bhunter
+/* About:  <description>
+ *************************************************************************/
+
+`ifndef __ALU_INTF_SV__
+   `define __ALU_INTF_SV__
+
+// class: alu_intf
+interface alu_intf(input logic clk,
+                   input logic rst_n);
+
+   import uvm_pkg::*;
+   
+   //----------------------------------------------------------------------------------------
+   // Group: Signals
+
+   // var: ctl
+   // Asserted only on the first cycle of a new transaction, while dat contains the operation
+   logic        ctl;
+
+   // var: dat
+   // The input data nibble that contains the operation and operands
+   logic [7:0]  dat;
+
+   // var: ready
+   // The output of the ALU that indicates when the result data is valid
+   logic        ready;
+
+   // var: result
+   // The 32-bit result data
+   logic [31:0] result;
+
+   //----------------------------------------------------------------------------------------
+   // Group: Clocking blocks
+
+   // var: drv_cb
+   // A clocking block that represents how the environment's driver sees the interface
+   clocking drv_cb @(posedge clk);
+      output    ctl;
+      output    dat;
+      input     ready;
+      input     result;
+      input     rst_n;
+   endclocking : drv_cb
+
+   // var: mon_cb
+   // A clocking block that represents how the environment's monitor sees the interface
+   clocking mon_cb @(posedge clk);
+      input     ctl;
+      input     dat;
+      input     ready;
+      input     result;
+      input     rst_n;
+   endclocking : mon_cb
+
+   //----------------------------------------------------------------------------------------
+   // Group: Modports
+
+   modport drv_mp(clocking drv_cb,
+                  import reset);
+   modport mon_mp(clocking mon_cb);
+
+   //----------------------------------------------------------------------------------------
+   // Group: Methods
+
+   // func: reset
+   // Convenience function for the driver to reset its outputs
+   function void reset();
+      ctl = 0;
+      dat = 8'b0;
+   endfunction : reset
+
+   //----------------------------------------------------------------------------------------
+   // Group: Assertions
+
+   ctl_not_x :
+      assert property(@(posedge clk)
+                      disable iff (~rst_n || rst_n === 1'bx)
+                      (!$isunknown(ctl))) else
+         `cn_err_intf(("ctl signal is an X"))
+
+   dat_not_x :       
+      assert property(@(posedge clk)
+                      disable iff (~rst_n || rst_n === 1'bx)
+                      (!$isunknown(dat))) else
+         `cn_err_intf(("dat signal is an X"))
+
+   ready_not_x : 
+      assert property(@(posedge clk)
+                      disable iff (~rst_n || rst_n === 1'bx)
+                      (!$isunknown(ready))) else
+         `cn_err_intf(("ready signal is an X"))
+
+   result_not_x : 
+      assert property(@(posedge clk)
+                      disable iff (~rst_n || rst_n === 1'bx || ready == 0)
+                      (!$isunknown(result))) else
+         `cn_err_intf(("result signal is an X"))
+         
+endinterface : alu_intf
+
+
+`endif // __ALU_INTF_SV__
+
Index: verif/vkits/alu/alu_pkg.sv
===================================================================
--- verif/vkits/alu/alu_pkg.sv	(revision 0)
+++ verif/vkits/alu/alu_pkg.sv	(revision 0)
@@ -0,0 +1,46 @@
+//-*- mode: Verilog; verilog-indent-level: 3; indent-tabs-mode: nil; tab-width: 1 -*-
+
+// **********************************************************************
+// * CAVIUM CONFIDENTIAL AND PROPRIETARY NOTE
+// *
+// * This software contains information confidential and proprietary to
+// * Cavium, Inc. It shall not be reproduced in whole or in part, or
+// * transferred to other documents, or disclosed to third parties, or
+// * used for any purpose other than that for which it was obtained,
+// * without the prior written consent of Cavium, Inc.
+// * Copyright 2013, Cavium, Inc.  All rights reserved.
+// * (utg v0.8.2)
+// ***********************************************************************
+// File:   alu_pkg.sv
+// Author: bhunter
+/* About:  alu package
+ *************************************************************************/
+
+
+// (`includes of macros may go here)
+`include "uvm_macros.svh"
+
+// package: alu_pkg
+// (Describe me)
+package alu_pkg;
+
+   //----------------------------------------------------------------------------------------
+   // Group: Imports
+   import uvm_pkg::*;
+
+   //----------------------------------------------------------------------------------------
+   // Group: Types
+   typedef logic [31:0] result_t;
+   
+   //----------------------------------------------------------------------------------------
+   // Group: Includes
+
+`include "alu_agent.sv"
+`include "alu_drv.sv"
+`include "alu_item.sv"
+`include "alu_mon.sv"
+`include "alu_sqr.sv"
+
+endpackage : alu_pkg
+
+
Index: verif/vkits/alu/alu_sqr.sv
===================================================================
--- verif/vkits/alu/alu_sqr.sv	(revision 0)
+++ verif/vkits/alu/alu_sqr.sv	(revision 0)
@@ -0,0 +1,73 @@
+//-*- mode: Verilog; verilog-indent-level: 3; indent-tabs-mode: nil; tab-width: 1 -*-
+
+// **********************************************************************
+// * CAVIUM CONFIDENTIAL AND PROPRIETARY NOTE
+// *
+// * This software contains information confidential and proprietary to
+// * Cavium, Inc. It shall not be reproduced in whole or in part, or
+// * transferred to other documents, or disclosed to third parties, or
+// * used for any purpose other than that for which it was obtained,
+// * without the prior written consent of Cavium, Inc.
+// * Copyright 2013, Cavium, Inc.  All rights reserved.
+// * (utg v0.8.2)
+// ***********************************************************************
+// File:   alu_sqr.sv
+// Author: bhunter
+/* About:  <description>
+ *************************************************************************/
+
+`ifndef __ALU_SQR_SV__
+   `define __ALU_SQR_SV__
+
+`include "alu_item.sv"
+
+// class: sqr_c
+// (Describe me)
+class sqr_c extends uvm_sequencer#(item_c);
+   `uvm_component_utils_begin(alu_pkg::sqr_c)
+   `uvm_component_utils_end
+
+   //----------------------------------------------------------------------------------------
+   // Group: Configuration Fields
+
+   //----------------------------------------------------------------------------------------
+   // Group: TLM Ports
+
+   //----------------------------------------------------------------------------------------
+   // Group: Fields
+
+   //----------------------------------------------------------------------------------------
+   // Group: Methods
+   function new(string name="sqr",
+                uvm_component parent=null);
+      super.new(name, parent);
+   endfunction : new
+
+   ////////////////////////////////////////////
+   // func: build_phase
+   virtual function void build_phase(uvm_phase phase);
+      super.build_phase(phase);
+   endfunction : build_phase
+
+   ////////////////////////////////////////////
+   // func: connect_phase
+   virtual function void connect_phase(uvm_phase phase);
+      super.connect_phase(phase);
+   endfunction : connect_phase
+
+   ////////////////////////////////////////////
+   // func: end_of_elaboration_phase
+   virtual function void end_of_elaboration_phase(uvm_phase phase);
+      super.end_of_elaboration_phase(phase);
+   endfunction : end_of_elaboration_phase
+
+   ////////////////////////////////////////////
+   // func: run_phase
+   virtual task run_phase(uvm_phase phase);
+      super.run_phase(phase);
+   endtask : run_phase
+
+endclass : sqr_c
+
+`endif // __ALU_SQR_SV__
+
Index: verif/vkits/alutb/alutb_env.sv
===================================================================
--- verif/vkits/alutb/alutb_env.sv	(revision 156811)
+++ verif/vkits/alutb/alutb_env.sv	(working copy)
@@ -53,6 +53,10 @@
    // field: Drives the CTX traffic
    ctx_pkg::agent_c ctx_agent;
    
+   // field: alu_agent
+   // The ALU agent
+   alu_pkg::agent_c alu_agent;
+
    //----------------------------------------------------------------------------------------
    // Group: Methods
    function new(string name="env",
@@ -68,6 +72,10 @@
 
       // build ctx agent
       ctx_agent = ctx_pkg::agent_c::type_id::create("ctx_agent", this);
+
+      // create the ALU agent
+      uvm_config_db#(int)::set(this, "alu_agent", "is_active", is_active);
+      alu_agent = alu_pkg::agent_c::type_id::create("alu_agent", this);
    endfunction : build_phase
 
    ////////////////////////////////////////////
Index: verif/alutb/tests/basic.sv
===================================================================
--- verif/alutb/tests/basic.sv	(revision 156811)
+++ verif/alutb/tests/basic.sv	(working copy)
@@ -29,18 +29,36 @@
    `uvm_component_utils(basic_test_c)
 
    //----------------------------------------------------------------------------------------
-   // Methods
+   // Group: Methods
    function new(string name="test",
                 uvm_component parent=null);
       super.new(name, parent);
    endfunction : new
 
    ////////////////////////////////////////////
-   // func: build_phase
-   virtual function void build_phase(uvm_phase phase);
-      super.build_phase(phase);
-   endfunction : build_phase
-   
+   // func: main_phase
+   virtual task main_phase(uvm_phase phase);
+      byte unsigned stream[];
+      alu_pkg::item_c item;
+      alu_pkg::item_c unp_item = alu_pkg::item_c::type_id::create("unp_item");;
+
+      phase.raise_objection(this);
+
+      repeat(50) begin
+         item = alu_pkg::item_c::type_id::create("item");
+         item.randomize();
+         `cn_info(("Created ALU transaction: %s", item.convert2string()))
+         item.pack_bytes(stream);
+         `cn_info(("Bytes: %s", cn_pkg::print_ubyte_array(stream)))
+         unp_item.unpack_bytes(stream);
+         `cn_info(("Unpacked: %s", unp_item.convert2string()))
+         if(item.compare(unp_item) == 0)
+            `cn_err(("Miscompare!"))
+      end
+
+      phase.drop_objection(this);
+   endtask : main_phase
+
 endclass : basic_test_c
    
 `endif // __BASIC_SV__
Index: verif/alutb/tests/duty_cycle.sv
===================================================================
--- verif/alutb/tests/duty_cycle.sv	(revision 0)
+++ verif/alutb/tests/duty_cycle.sv	(revision 0)
@@ -0,0 +1,47 @@
+//-*- mode: Verilog; verilog-indent-level: 3; indent-tabs-mode: nil; tab-width: 1 -*-
+
+// **********************************************************************
+// * CAVIUM CONFIDENTIAL AND PROPRIETARY NOTE
+// *
+// * This software contains information confidential and proprietary to
+// * Cavium, Inc. It shall not be reproduced in whole or in part, or
+// * transferred to other documents, or disclosed to third parties, or
+// * used for any purpose other than that for which it was obtained,
+// * without the prior written consent of Cavium, Inc.
+// * Copyright 2013, Cavium, Inc.  All rights reserved.
+// * (utg v0.8.2)
+// ***********************************************************************
+// File:   duty_cycle.sv
+// Author: bhunter
+/* About:  <description>
+ *************************************************************************/
+
+`ifndef __DUTY_CYCLE_SV__
+   `define __DUTY_CYCLE_SV__
+
+   `include "base_test.sv"
+   `include "clk_duty_cycle.sv"
+
+// class: duty_cycle_test_c
+// Run using the clk_duty_cycle_c instead of cn_pkg::clk_drv_c
+class duty_cycle_test_c extends base_test_c;
+   `uvm_component_utils(duty_cycle_test_c)
+
+   //----------------------------------------------------------------------------------------
+   // Group: Methods
+   function new(string name="duty_cycle_test",
+                uvm_component parent=null);
+      super.new(name, parent);
+   endfunction : new
+
+   ////////////////////////////////////////////
+   // func: build_phase
+   virtual function void build_phase(uvm_phase phase);
+      set_type_override_by_type(cn_pkg::clk_drv_c::get_type(),
+                                clk_duty_cycle_c::get_type(), .replace(1));
+      super.build_phase(phase);
+   endfunction : build_phase
+
+endclass : duty_cycle_test_c
+
+`endif // __DUTY_CYCLE_SV__
Index: verif/alutb/tests/fast_clk.sv
===================================================================
--- verif/alutb/tests/fast_clk.sv	(revision 0)
+++ verif/alutb/tests/fast_clk.sv	(revision 0)
@@ -0,0 +1,76 @@
+//-*- mode: Verilog; verilog-indent-level: 3; indent-tabs-mode: nil; tab-width: 1 -*-
+
+// **********************************************************************
+// * CAVIUM CONFIDENTIAL AND PROPRIETARY NOTE
+// *
+// * This software contains information confidential and proprietary to
+// * Cavium, Inc. It shall not be reproduced in whole or in part, or
+// * transferred to other documents, or disclosed to third parties, or
+// * used for any purpose other than that for which it was obtained,
+// * without the prior written consent of Cavium, Inc.
+// * Copyright 2013, Cavium, Inc.  All rights reserved.
+// * (utg v0.8.2)
+// ***********************************************************************
+// File:   fast_clk.sv
+// Author: bhunter
+/* About:  A test that makes the clock go super fast!
+ *************************************************************************/
+
+`ifndef __FAST_CLK_SV__
+   `define __FAST_CLK_SV__
+
+
+   `include "base_test.sv"
+// (`includes go here)
+
+// class: fast_clk_test_c
+// (Describe me)
+class fast_clk_test_c extends base_test_c;
+   `uvm_component_utils_begin(fast_clk_test_c)
+   `uvm_component_utils_end
+
+   //----------------------------------------------------------------------------------------
+   // Group: Configuration Fields
+
+   //----------------------------------------------------------------------------------------
+   // Group: Fields
+
+   //----------------------------------------------------------------------------------------
+   // Group: Methods
+   function new(string name="test",
+                uvm_component parent=null);
+      super.new(name, parent);
+   endfunction : new
+
+   ////////////////////////////////////////////
+   // func: build_phase
+   virtual function void build_phase(uvm_phase phase);
+      super.build_phase(phase);
+   endfunction : build_phase
+
+   ////////////////////////////////////////////
+   // func: connect_phase
+   virtual function void connect_phase(uvm_phase phase);
+      super.connect_phase(phase);
+   endfunction : connect_phase
+
+   ////////////////////////////////////////////
+   // func: end_of_elaboration_phase
+   virtual function void end_of_elaboration_phase(uvm_phase phase);
+      super.end_of_elaboration_phase(phase);
+      tb_clk_drv.randomize(period_ps) with {
+         period_ps inside {[1800:1999]};
+      };
+      `cn_info(("Selected a period of %0dps", tb_clk_drv.period_ps))
+   endfunction : end_of_elaboration_phase
+
+   ////////////////////////////////////////////
+   // func: run_phase
+   virtual task run_phase(uvm_phase phase);
+      super.run_phase(phase);
+   endtask : run_phase
+
+endclass : fast_clk_test_c
+
+`endif // __FAST_CLK_SV__
+
Index: verif/alutb/clk_duty_cycle.sv
===================================================================
--- verif/alutb/clk_duty_cycle.sv	(revision 0)
+++ verif/alutb/clk_duty_cycle.sv	(revision 0)
@@ -0,0 +1,58 @@
+//-*- mode: Verilog; verilog-indent-level: 3; indent-tabs-mode: nil; tab-width: 1 -*-
+
+// **********************************************************************
+// * CAVIUM CONFIDENTIAL AND PROPRIETARY NOTE
+// *
+// * This software contains information confidential and proprietary to
+// * Cavium, Inc. It shall not be reproduced in whole or in part, or
+// * transferred to other documents, or disclosed to third parties, or
+// * used for any purpose other than that for which it was obtained,
+// * without the prior written consent of Cavium, Inc.
+// * Copyright 2013, Cavium, Inc.  All rights reserved.
+// * (utg v0.8.2)
+// ***********************************************************************
+// File:   clk_duty_cycle.sv
+// Author: bhunter
+/* About:  <description>
+ *************************************************************************/
+
+`ifndef __CLK_DUTY_CYCLE_SV__
+   `define __CLK_DUTY_CYCLE_SV__
+
+
+// (`includes go here)
+
+// class: clk_duty_cycle_c
+// A clock with a duty cycle of 75/25.
+class clk_duty_cycle_c extends cn_pkg::clk_drv_c;
+   `uvm_component_utils(clk_duty_cycle_c)
+
+   //----------------------------------------------------------------------------------------
+   // Group: Methods
+   function new(string name="clk_duty_cycle",
+                uvm_component parent=null);
+      super.new(name, parent);
+   endfunction : new
+
+   ////////////////////////////////////////////
+   // func: run_phase
+   virtual task run_phase(uvm_phase phase);
+      int uptime = 3*period_ps / 4;
+      int downtime = period_ps - uptime;
+
+      // set to initial value
+      clk_vi.clk = (init_x)? 'bx : init_value;
+      #(init_delay_ps * 1ps);
+
+      forever begin
+         clk_vi.clk = 1;
+         #(uptime * 1ps);
+         clk_vi.clk = 0;
+         #(downtime * 1ps);
+      end
+   endtask : run_phase
+
+endclass : clk_duty_cycle_c
+
+`endif // __CLK_DUTY_CYCLE_SV__
+
Index: verif/alutb/alutb_tb_top.sv
===================================================================
--- verif/alutb/alutb_tb_top.sv	(revision 156811)
+++ verif/alutb/alutb_tb_top.sv	(working copy)
@@ -38,6 +38,12 @@
    // CTX Interface
    ctx_intf ctx_i(.clk(tb_clk), .rst_n(tb_rst_n));
 
+   // obj: alu_i
+   // The <alu_intf> instance
+   alu_intf alu_i(.clk(tb_clk), .rst_n(tb_rst_n));
+   initial
+      alu_i.reset();
+
    //----------------------------------------------------------------------------------------
    // Group: DUT
 
@@ -45,6 +51,7 @@
    alu_wrapper alu_wrapper(/*AUTOINST*/
                            // Interfaces
                            .ctx_i               (ctx_i),
+                           .alu_i               (alu_i),
                            // Inputs
                            .tb_clk              (tb_clk),
                            .tb_rst_n            (tb_rst_n));
@@ -60,6 +67,8 @@
       `cn_set_intf(virtual cn_rst_intf    , "cn_pkg::rst_intf"  , "tb_rst_vi", tb_rst_i);
       `cn_set_intf(virtual ctx_intf.drv_mp , "ctx_pkg::ctx_intf" , "ctx_vi"   , ctx_i.drv_mp);
       `cn_set_intf(virtual ctx_intf.mon_mp , "ctx_pkg::ctx_intf" , "ctx_vi"   , ctx_i.mon_mp);
+      `cn_set_intf(virtual alu_intf.drv_mp, "alu_pkg::alu_intf", "drv_vi", alu_i.drv_mp)
+      `cn_set_intf(virtual alu_intf.mon_mp, "alu_pkg::alu_intf", "mon_vi", alu_i.mon_mp)
    endfunction : pre_run_test
 
    `include "tbv_common.v"
Index: verif/alutb/alutb.flist
===================================================================
--- verif/alutb/alutb.flist	(revision 156811)
+++ verif/alutb/alutb.flist	(working copy)
@@ -6,7 +6,9 @@
 +incdir+../../rtl/include
 ../../verif/alutb/alutb_tb_top.sv
 ../../verif/alutb/alu_wrapper.sv
+../../verif/alutb/clk_duty_cycle.sv
 ../../verif/alutb/tests/basic.sv
 ../../verif/alutb/tests/base_test.sv
+../../verif/alutb/tests/fast_clk.sv
+../../verif/alutb/tests/duty_cycle.sv
 -f ../../verif/alutb/rtl.flist
-
Index: verif/alutb/alu_wrapper.sv
===================================================================
--- verif/alutb/alu_wrapper.sv	(revision 156811)
+++ verif/alutb/alu_wrapper.sv	(working copy)
@@ -18,19 +18,16 @@
 
 module alu_wrapper(input logic tb_clk,
                    tb_rst_n,
-                   ctx_intf ctx_i);
+                   ctx_intf ctx_i,
+                   alu_intf alu_i);
 
    /*AUTOREGINPUT*/
    // Beginning of automatic reg inputs (for undeclared instantiated-module inputs)
-   reg                  alu_ctl;                // To dut of alu.v
-   reg [7:0]            alu_dat;                // To dut of alu.v
    reg [4:0]            frame_len;              // To dut of alu.v
    reg                  frame_len_val;          // To dut of alu.v
    // End of automatics
    /*AUTOWIRE*/
    // Beginning of automatic wires (for undeclared instantiated-module outputs)
-   wire                 alu_ready;              // From dut of alu.v
-   wire [31:0]          alu_result;             // From dut of alu.v
    wire                 frame;                  // From dut of alu.v
    wire                 frame_bp;               // From dut of alu.v
    wire [31:0]          frame_data;             // From dut of alu.v
@@ -43,6 +40,7 @@
     .ctx_\(.*\)   (ctx_i.\1[]),
     .clk          (tb_clk),
     .rst_n        (tb_rst_n),
+    .alu_\(.*\)   (alu_i.\1[]),
     .\(.*\) (\1[]),
     ); */
    alu dut(/*AUTOINST*/
@@ -51,11 +49,11 @@
            .frame                       (frame),                 // Templated
            .frame_bp                    (frame_bp),              // Templated
            .frame_data                  (frame_data[31:0]),      // Templated
-           .alu_ready                   (alu_ready),             // Templated
-           .alu_result                  (alu_result[31:0]),      // Templated
+           .alu_ready                   (alu_i.ready),           // Templated
+           .alu_result                  (alu_i.result[31:0]),    // Templated
            // Inputs
-           .alu_ctl                     (alu_ctl),               // Templated
-           .alu_dat                     (alu_dat[7:0]),          // Templated
+           .alu_ctl                     (alu_i.ctl),             // Templated
+           .alu_dat                     (alu_i.dat[7:0]),        // Templated
            .clk                         (tb_clk),                // Templated
            .ctx_in                      (ctx_i.in[7:0]),         // Templated
            .ctx_val                     (ctx_i.val),             // Templated
Index: verif/alutb/Makefile
===================================================================
--- verif/alutb/Makefile	(revision 156811)
+++ verif/alutb/Makefile	(working copy)
@@ -43,7 +43,8 @@
 	verif/vkits/global/global.flist \
 	verif/vkits/sps/sps.flist \
        verif/vkits/cn_csr/cn_csr.flist \
 	verif/vkits/reg/reg.flist \
+	verif/vkits/alu/alu.flist \
 	verif/vkits/ctx/ctx.flist \
 	verif/vkits/alutb/alutb.flist \
 	verif/alutb/alutb.flist
