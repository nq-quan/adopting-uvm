diff --git a/rtl/alu/alu_math.v b/rtl/alu/alu_math.v
index 3697871..2db3611 100755
--- a/rtl/alu/alu_math.v
+++ b/rtl/alu/alu_math.v
@@ -61,6 +61,8 @@ module alu_math(// Outputs
    reg [31:0]    result;
    reg           ready;
 
+   reg [15:0]    denom;
+
    // register inputs
    always @(posedge clk) begin
       ctl_r <= ctl;
@@ -150,16 +152,20 @@ module alu_math(// Outputs
          ready      <= 1'b0;
          operation  <= 4'b0;
       end else begin
-         nxt_result <= (state == COMPUTE_1 && operation == ADD_A_B)?  (k_val_r * (aval+bval) + c_val_r) :
-                       (state == COMPUTE_1 && operation == SUB_A_B)?  (k_val_r * (aval-bval) + c_val_r) :
-                       (state == COMPUTE_1 && operation == SUB_B_A)?  (k_val_r * (bval-aval) + c_val_r) :
-                       (state == COMPUTE_1 && operation == INC_A)?    (k_val_r * (aval+1)    + c_val_r) :
-                       (state == COMPUTE_1 && operation == INC_B)?    (k_val_r * (bval+1)    + c_val_r) :
-                       (state == COMPUTE_2 && operation == MUL_A_B)?  (k_val_r * (aval*bval) + c_val_r) :
-                       (state == COMPUTE_3 && operation == DIV_A_B)?  (k_val_r * (aval/bval) + c_val_r) :
-                       (state == COMPUTE_3 && operation == DIV_B_A)?  (k_val_r * (bval/aval) + c_val_r) :
-                       (state == COMPUTE_1 && operation == CLR_RES)?  0                                 :
-                       (state == COMPUTE_1 && operation == ACCUM)?    (aval + result)                   :
+         denom      <= (state == COMPUTE_1 && operation == DIV_A_B)? ((bval == 0)? 1 : bval) :
+                       (state == COMPUTE_1 && operation == DIV_B_A)? ((aval == 0)? 1 : aval) :
+                       denom;
+
+         nxt_result <= (state == COMPUTE_1 && operation == ADD_A_B)?  (k_val_r * (aval+bval)  + c_val_r) :
+                       (state == COMPUTE_1 && operation == SUB_A_B)?  (k_val_r * (aval-bval)  + c_val_r) :
+                       (state == COMPUTE_1 && operation == SUB_B_A)?  (k_val_r * (bval-aval)  + c_val_r) :
+                       (state == COMPUTE_1 && operation == INC_A)?    (k_val_r * (aval+1)     + c_val_r) :
+                       (state == COMPUTE_1 && operation == INC_B)?    (k_val_r * (bval+1)     + c_val_r) :
+                       (state == COMPUTE_2 && operation == MUL_A_B)?  (k_val_r * (aval*bval)  + c_val_r) :
+                       (state == COMPUTE_3 && operation == DIV_A_B)?  (k_val_r * (aval/denom) + c_val_r) :
+                       (state == COMPUTE_3 && operation == DIV_B_A)?  (k_val_r * (bval/denom) + c_val_r) :
+                       (state == COMPUTE_1 && operation == CLR_RES)?  0                                  :
+                       (state == COMPUTE_1 && operation == ACCUM)?    (aval + result)                    :
                        nxt_result;
          result     <= nxt_result;
          ready      <= (state == RESULT)? 1'b1 : 1'b0;
diff --git a/verif/alutb/alu_wrapper.sv b/verif/alutb/alu_wrapper.sv
index 14950c1..994a9e4 100755
--- a/verif/alutb/alu_wrapper.sv
+++ b/verif/alutb/alu_wrapper.sv
@@ -13,7 +13,8 @@
 
 module alu_wrapper(input logic tb_clk,
                    tb_rst_n,
-                   ctx_intf ctx_i);
+                   ctx_intf ctx_i,
+						 alu_intf alu_i);
 
    reg                  alu_ctl;
    reg [7:0]            alu_dat;
@@ -32,11 +33,11 @@ module alu_wrapper(input logic tb_clk,
            .frame                       (frame),
            .frame_bp                    (frame_bp),
            .frame_data                  (frame_data[31:0]),
-           .alu_ready                   (alu_ready),
-           .alu_result                  (alu_result[31:0]),
+           .alu_ready                   (alu_i.ready),
+           .alu_result                  (alu_i.result[31:0]),
            // Inputs
-           .alu_ctl                     (alu_ctl),
-           .alu_dat                     (alu_dat[7:0]),
+           .alu_ctl                     (alu_i.ctl),
+           .alu_dat                     (alu_i.dat[7:0]),
            .clk                         (tb_clk),
            .ctx_in                      (ctx_i.in[7:0]),
            .ctx_val                     (ctx_i.val),
diff --git a/verif/alutb/alutb.flist b/verif/alutb/alutb.flist
index 59fb1e8..34b381d 100755
--- a/verif/alutb/alutb.flist
+++ b/verif/alutb/alutb.flist
@@ -8,5 +8,11 @@
 ../../verif/alutb/alu_wrapper.sv
 ../../verif/alutb/tests/basic.sv
 ../../verif/alutb/tests/base_test.sv
+../../verif/alutb/tests/fast_clk.sv
+../../verif/alutb/tests/duty_cycle.sv
+../../verif/alutb/tests/dev_ref_model.sv
+../../verif/alutb/tests/kval.sv
+../../verif/alutb/tests/exer.sv
+../../verif/alutb/tests/div0.sv
 -f ../../verif/alutb/rtl.flist
 
diff --git a/verif/alutb/alutb_tb_top.sv b/verif/alutb/alutb_tb_top.sv
index a9a5bfb..e3a80d9 100755
--- a/verif/alutb/alutb_tb_top.sv
+++ b/verif/alutb/alutb_tb_top.sv
@@ -33,13 +33,19 @@ module alutb_tb_top;
    // CTX Interface
    ctx_intf ctx_i(.clk(tb_clk), .rst_n(tb_rst_n));
 
+   // field: alu_i
+   // The <alu_intf> instance
+   alu_intf alu_i(.clk(tb_clk), .rst_n(tb_rst_n));
+   initial
+      alu_i.reset();
+
    //----------------------------------------------------------------------------------------
    // Group: DUT
 
    // obj: dut_wrapper
-   alu_wrapper alu_wrapper(/*AUTOINST*/
-                           // Interfaces
+   alu_wrapper alu_wrapper(// Interfaces
                            .ctx_i               (ctx_i),
+                           .alu_i               (alu_i),
                            // Inputs
                            .tb_clk              (tb_clk),
                            .tb_rst_n            (tb_rst_n));
@@ -51,10 +57,12 @@ module alutb_tb_top;
    // func: pre_run_test
    // Set interface names before run_test is called
    function void pre_run_test();
-      `cn_set_intf(virtual cn_clk_intf    , "cn_pkg::clk_intf"  , "tb_clk_vi", tb_clk_i);
-      `cn_set_intf(virtual cn_rst_intf    , "cn_pkg::rst_intf"  , "tb_rst_vi", tb_rst_i);
-      `cn_set_intf(virtual ctx_intf.drv_mp, "ctx_pkg::ctx_intf" , "ctx_vi"   , ctx_i.drv_mp);
-      `cn_set_intf(virtual ctx_intf.mon_mp, "ctx_pkg::ctx_intf" , "ctx_vi"   , ctx_i.mon_mp);
+      `cn_set_intf(virtual cn_clk_intf    , "cn_pkg::clk_intf"  , "tb_clk_vi", tb_clk_i)
+      `cn_set_intf(virtual cn_rst_intf    , "cn_pkg::rst_intf"  , "tb_rst_vi", tb_rst_i)
+      `cn_set_intf(virtual ctx_intf.drv_mp, "ctx_pkg::ctx_intf" , "ctx_vi"   , ctx_i.drv_mp)
+      `cn_set_intf(virtual ctx_intf.mon_mp, "ctx_pkg::ctx_intf" , "ctx_vi"   , ctx_i.mon_mp)
+      `cn_set_intf(virtual alu_intf.drv_mp, "alu_pkg::alu_intf" , "drv_vi"   , alu_i.drv_mp)
+      `cn_set_intf(virtual alu_intf.mon_mp, "alu_pkg::alu_intf" , "mon_vi"   , alu_i.mon_mp)
    endfunction : pre_run_test
 
    `include "tb_common.v"
diff --git a/verif/alutb/clk_duty_cycle.sv b/verif/alutb/clk_duty_cycle.sv
new file mode 100644
index 0000000..937e0f6
--- /dev/null
+++ b/verif/alutb/clk_duty_cycle.sv
@@ -0,0 +1,49 @@
+
+// **********************************************************************
+// *
+// * legal mumbo jumbo
+// *
+// * (c) 2013
+// * (utg v1.0)
+// ***********************************************************************
+// File:   clk_duty_cycle.sv
+// Author: bhunter
+/* About:  <description>
+ *************************************************************************/
+
+`ifndef __CLK_DUTY_CYCLE_SV__
+   `define __CLK_DUTY_CYCLE_SV__
+
+// class: clk_duty_cycle_c
+// A clock with a duty cycle of 75/25.
+class clk_duty_cycle_c extends cn_pkg::clk_drv_c;
+   `uvm_component_utils(clk_duty_cycle_c)
+
+   //----------------------------------------------------------------------------------------
+   // Group: Methods
+   function new(string name="clk_duty_cycle",
+                uvm_component parent=null);
+      super.new(name, parent);
+   endfunction : new
+
+   ////////////////////////////////////////////
+   // func: run_phase
+   virtual task run_phase(uvm_phase phase);
+      int uptime = 3*period_ps / 4;
+      int downtime = period_ps - uptime;
+
+      // set to initial value
+      clk_vi.clk = (init_x)? 'bx : init_value;
+      #(init_delay_ps * 1ps);
+
+      forever begin
+         clk_vi.clk = 1;
+         #(uptime * 1ps);
+         clk_vi.clk = 0;
+         #(downtime * 1ps);
+      end
+   endtask : run_phase
+
+endclass : clk_duty_cycle_c
+
+`endif // __CLK_DUTY_CYCLE_SV__
diff --git a/verif/alutb/tb.py b/verif/alutb/tb.py
index 3adcb12..113627f 100755
--- a/verif/alutb/tb.py
+++ b/verif/alutb/tb.py
@@ -1,5 +1,5 @@
 # Add vkit dependencies *in order*
-VKITS = ['cn', 'global', 'csr', 'ctx', 'alutb']
+VKITS = ['cn', 'global', 'csr', 'ctx', 'alu', 'alutb']
 
 # Add testbench flists
 FLISTS = ['alutb.flist', 'rtl.flist']
diff --git a/verif/alutb/tests/basic.sv b/verif/alutb/tests/basic.sv
index ab5848d..c2c6b2b 100755
--- a/verif/alutb/tests/basic.sv
+++ b/verif/alutb/tests/basic.sv
@@ -16,22 +16,22 @@
 
    `include "base_test.sv"
 
-// class: basic_test_c
-// A basic ALU test
 class basic_test_c extends base_test_c;
    `uvm_component_utils(basic_test_c)
 
    //----------------------------------------------------------------------------------------
-   // Methods
+   // Group: Methods
    function new(string name="test",
                 uvm_component parent=null);
       super.new(name, parent);
    endfunction : new
 
    ////////////////////////////////////////////
-   // func: build_phase
    virtual function void build_phase(uvm_phase phase);
       super.build_phase(phase);
+
+      uvm_config_db#(uvm_object_wrapper)::set(this, "alutb_env.alu_agent.sqr.main_phase",
+		                                              "default_sequence", alu_pkg::lib_seq_c::type_id::get());
    endfunction : build_phase
 
 endclass : basic_test_c
diff --git a/verif/alutb/tests/dev_ref_model.sv b/verif/alutb/tests/dev_ref_model.sv
new file mode 100644
index 0000000..fd47c89
--- /dev/null
+++ b/verif/alutb/tests/dev_ref_model.sv
@@ -0,0 +1,42 @@
+
+// **********************************************************************
+// *
+// * legal mumbo jumbo
+// *
+// * (c) 2013
+// * (utg v1.0)
+// ***********************************************************************
+// File:   dev_ref_model.sv
+// Author: bhunter
+/* About:  Run the ALU in device reference model mode.
+ *************************************************************************/
+
+`ifndef __DEV_REF_MODEL_SV__
+   `define __DEV_REF_MODEL_SV__
+
+`include "basic.sv"
+
+// class: dev_ref_model_test_c
+// Test the ALU using the predictor as a reference model
+class dev_ref_model_test_c extends basic_test_c;
+   `uvm_component_utils(dev_ref_model_test_c)
+
+   //----------------------------------------------------------------------------------------
+   // Group: Methods
+   function new(string name="test",
+                uvm_component parent=null);
+      super.new(name, parent);
+   endfunction : new
+
+   ////////////////////////////////////////////
+   // func: build_phase
+   virtual function void build_phase(uvm_phase phase);
+      super.build_phase(phase);
+      uvm_config_db#(int)::set(this, "alutb_env.alu_agent", "dev_ref_model", 1);
+
+      // reset the interface to avoid x-checkers
+      alutb_tb_top.alu_i.reset();
+   endfunction : build_phase
+endclass : dev_ref_model_test_c
+
+`endif // __DEV_REF_MODEL_SV__
diff --git a/verif/alutb/tests/div0.sv b/verif/alutb/tests/div0.sv
new file mode 100644
index 0000000..dea549a
--- /dev/null
+++ b/verif/alutb/tests/div0.sv
@@ -0,0 +1,63 @@
+
+// **********************************************************************
+// *
+// * legal mumbo jumbo
+// *
+// * (c) 2013
+// * (utg v1.0)
+// ***********************************************************************
+// File:   div0.sv
+// Author: bhunter
+/* About:  <description>
+ *************************************************************************/
+
+`ifndef __DIV0_SV__
+   `define __DIV0_SV__
+
+`include "basic.sv"
+
+//****************************************************************************************
+// class: div0_item_c
+// Causes a divide-by-zero on 50% of all divide operations
+class div0_item_c extends alu_pkg::item_c;
+   `uvm_object_utils(div0_item_c)
+
+   constraint protocol_cnstr {
+      (operation == DIV_A_B) -> beta dist { 0 :/ 50,
+                                            [1:'hffff] :/ 50};
+      (operation == DIV_B_A) -> alpha dist { 0 :/ 50,
+                                            [1:'hffff] :/ 50};
+      (operation == SUB_A_B) -> alpha > beta;
+      (operation == SUB_B_A) -> beta > alpha;
+   }
+
+   //----------------------------------------------------------------------------------------
+   // Group: Methods
+   function new(string name="div0_item");
+      super.new(name);
+   endfunction : new
+endclass : div0_item_c
+
+//****************************************************************************************
+// class: div0_test_c
+// Uses the div0_item_c class instead
+class div0_test_c extends basic_test_c;
+   `uvm_component_utils(div0_test_c)
+
+   //----------------------------------------------------------------------------------------
+   // Group: Methods
+   function new(string name="div0_test",
+                uvm_component parent=null);
+      super.new(name, parent);
+   endfunction : new
+
+   ////////////////////////////////////////////
+   // func: build_phase
+   virtual function void build_phase(uvm_phase phase);
+      super.build_phase(phase);
+      set_type_override_by_type(alu_pkg::item_c::get_type(), div0_item_c::get_type());
+   endfunction : build_phase
+
+endclass : div0_test_c
+
+`endif // __DIV0_SV__
diff --git a/verif/alutb/tests/duty_cycle.sv b/verif/alutb/tests/duty_cycle.sv
new file mode 100644
index 0000000..b6bd0c6
--- /dev/null
+++ b/verif/alutb/tests/duty_cycle.sv
@@ -0,0 +1,42 @@
+
+// **********************************************************************
+// *
+// * legal mumbo jumbo
+// *
+// * (c) 2013
+// * (utg v1.0)
+// ***********************************************************************
+// File:   duty_cycle.sv
+// Author: bhunter
+/* About:  <description>
+ *************************************************************************/
+
+`ifndef __DUTY_CYCLE_SV__
+   `define __DUTY_CYCLE_SV__
+
+   `include "base_test.sv"
+   `include "clk_duty_cycle.sv"
+
+// class: duty_cycle_test_c
+// Run using the clk_duty_cycle_c instead of cn_pkg::clk_drv_c
+class duty_cycle_test_c extends base_test_c;
+   `uvm_component_utils(duty_cycle_test_c)
+
+   //----------------------------------------------------------------------------------------
+   // Group: Methods
+   function new(string name="duty_cycle_test",
+                uvm_component parent=null);
+      super.new(name, parent);
+   endfunction : new
+
+   ////////////////////////////////////////////
+   // func: build_phase
+   virtual function void build_phase(uvm_phase phase);
+      set_type_override_by_type(cn_pkg::clk_drv_c::get_type(),
+                                clk_duty_cycle_c::get_type(), .replace(1));
+      super.build_phase(phase);
+   endfunction : build_phase
+
+endclass : duty_cycle_test_c
+
+`endif // __DUTY_CYCLE_SV__
diff --git a/verif/alutb/tests/exer.sv b/verif/alutb/tests/exer.sv
new file mode 100644
index 0000000..f2d62e3
--- /dev/null
+++ b/verif/alutb/tests/exer.sv
@@ -0,0 +1,52 @@
+
+// **********************************************************************
+// *
+// * legal mumbo jumbo
+// *
+// * (c) 2013
+// * (utg v1.0)
+// ***********************************************************************
+// File:   exer.sv
+// Author: bhunter
+/* About:  <description>
+ *************************************************************************/
+
+`ifndef __EXER_SV__
+   `define __EXER_SV__
+
+   `include "basic.sv"
+// (`includes go here)
+
+// class: exer_test_c
+// Turns on all possible values of K_VAL and C_VAL
+class exer_test_c extends basic_test_c;
+   `uvm_component_utils(exer_test_c)
+
+   //----------------------------------------------------------------------------------------
+   // Group: Configuration Fields
+   constraint const_knob_cnstr {
+      cfg.alu_const_knob dist { alutb_pkg::cfg_c::INNOCUOUS :/ 20,
+                                alutb_pkg::cfg_c::SMALL     :/ 50,
+                                alutb_pkg::cfg_c::LARGE     :/ 15,
+                                alutb_pkg::cfg_c::XLARGE    :/ 5,
+                                alutb_pkg::cfg_c::UNLIMITED :/ 10
+      };
+   }
+
+   //----------------------------------------------------------------------------------------
+   // Group: Methods
+   function new(string name="alu_exer",
+                uvm_component parent=null);
+      super.new(name, parent);
+   endfunction : new
+
+   ////////////////////////////////////////////
+   // func: randomize_cfg
+   // Disable the const_knob_cnstr in cfg
+   virtual function void randomize_cfg();
+      cfg.const_knob_cnstr.constraint_mode(0);
+      super.randomize_cfg();
+   endfunction : randomize_cfg
+endclass : exer_test_c
+
+`endif // __EXER_SV__
diff --git a/verif/alutb/tests/fast_clk.sv b/verif/alutb/tests/fast_clk.sv
new file mode 100644
index 0000000..d226acd
--- /dev/null
+++ b/verif/alutb/tests/fast_clk.sv
@@ -0,0 +1,69 @@
+
+// **********************************************************************
+// *
+// * legal mumbo jumbo
+// *
+// * (c) 2013
+// * (utg v1.0)
+// ***********************************************************************
+// File:   fast_clk.sv
+// Author: bhunter
+/* About:  <description>
+ *************************************************************************/
+
+`ifndef __FAST_CLK_SV__
+   `define __FAST_CLK_SV__
+
+   `include "basic.sv"
+// (`includes go here)
+
+// class: fast_clk_test_c
+// (Describe me)
+class fast_clk_test_c extends base_test_c;
+   `uvm_component_utils_begin(fast_clk_test_c)
+   `uvm_component_utils_end
+
+   //----------------------------------------------------------------------------------------
+   // Group: Configuration Fields
+
+   //----------------------------------------------------------------------------------------
+   // Group: Fields
+
+   //----------------------------------------------------------------------------------------
+   // Group: Methods
+   function new(string name="fast_clk",
+                uvm_component parent=null);
+      super.new(name, parent);
+   endfunction : new
+
+   ////////////////////////////////////////////
+   // func: build_phase
+   virtual function void build_phase(uvm_phase phase);
+      super.build_phase(phase);
+   endfunction : build_phase
+
+   ////////////////////////////////////////////
+   // func: connect_phase
+   virtual function void connect_phase(uvm_phase phase);
+      super.connect_phase(phase);
+   endfunction : connect_phase
+
+   ////////////////////////////////////////////
+   // func: end_of_elaboration_phase
+   virtual function void end_of_elaboration_phase(uvm_phase phase);
+      super.end_of_elaboration_phase(phase);
+      tb_clk_drv.randomize(period_ps) with {
+         period_ps inside {[1800:1999]};
+      };
+      `cn_info(("Selected a period of %0dps", tb_clk_drv.period_ps))
+   endfunction : end_of_elaboration_phase
+
+   ////////////////////////////////////////////
+   // func: run_phase
+   virtual task run_phase(uvm_phase phase);
+      super.run_phase(phase);
+   endtask : run_phase
+
+endclass : fast_clk_test_c
+
+`endif // __FAST_CLK_SV__
diff --git a/verif/alutb/tests/kval.sv b/verif/alutb/tests/kval.sv
new file mode 100644
index 0000000..8c42205
--- /dev/null
+++ b/verif/alutb/tests/kval.sv
@@ -0,0 +1,44 @@
+
+// **********************************************************************
+// *
+// * legal mumbo jumbo
+// *
+// * (c) 2013
+// * (utg v1.0)
+// ***********************************************************************
+// File:   kval.sv
+// Author: bhunter
+/* About:  <description>
+ *************************************************************************/
+
+`ifndef __KVAL_SV__
+   `define __KVAL_SV__
+
+   `include "basic.sv"
+
+// class: kval_test_c
+// (Describe me)
+class kval_test_c extends basic_test_c;
+   `uvm_component_utils_begin(kval_test_c)
+   `uvm_component_utils_end
+
+   //----------------------------------------------------------------------------------------
+   // Group: Constraints
+
+   constraint kval_cnstr {
+      reg_block.CONST.K_VAL.value inside {[9:20]};
+   }
+
+   //----------------------------------------------------------------------------------------
+   // Group: Fields
+
+   //----------------------------------------------------------------------------------------
+   // Group: Methods
+   function new(string name="kval",
+                uvm_component parent=null);
+      super.new(name, parent);
+   endfunction : new
+
+endclass : kval_test_c
+
+`endif // __KVAL_SV__
diff --git a/verif/frm/DVEfiles/dve_gui.log b/verif/frm/DVEfiles/dve_gui.log
new file mode 100644
index 0000000..6bdd254
--- /dev/null
+++ b/verif/frm/DVEfiles/dve_gui.log
@@ -0,0 +1,4 @@
+Reading user setup file /nfs/causers2/bhunter/.synopsys_dve_usersetup.tcl
+The design has assertions or cover properties.
+The assertion browser can be used to view them. Click on the assertion toolbar button or use the menu 'Window->Panes->Assertion' to open it.
+The file 'sim/basic/waves.vpd' was opened successfully.
diff --git a/verif/frm/DVEfiles/dve_gui.log.sml b/verif/frm/DVEfiles/dve_gui.log.sml
new file mode 100644
index 0000000..10f5acd
Binary files /dev/null and b/verif/frm/DVEfiles/dve_gui.log.sml differ
diff --git a/verif/frm/DVEfiles/dve_history.log b/verif/frm/DVEfiles/dve_history.log
new file mode 100644
index 0000000..af2f96c
--- /dev/null
+++ b/verif/frm/DVEfiles/dve_history.log
@@ -0,0 +1,404 @@
+# Preference setting overrides
+gui_set_pref_value -category {Data} -key {iniSortMode} -value {ascending}
+gui_set_pref_value -category {Data} -key {showValueAnnotation} -value {true}
+gui_set_pref_value -category {Data} -key {showgrid} -value {true}
+gui_set_pref_value -category {Globals} -key {app_use_vpd_time_unit} -value {no}
+gui_create_pref_key -category {Globals} -key {load_detail_for_funcov} -value_type {bool} -value {false}
+gui_set_pref_value -category {Hier} -key {showDollarUnit} -value {false}
+gui_set_pref_value -category {Hier} -key {showLeafScCell} -value {false}
+gui_set_pref_value -category {Hier} -key {showLeafVhdCell} -value {false}
+gui_set_pref_value -category {Hier} -key {showLeafVlgCell} -value {false}
+gui_set_pref_value -category {Hier} -key {showOVAUnit} -value {false}
+gui_create_pref_key -category {Hier} -key {showPowerSwitch} -value_type {bool} -value {false}
+gui_set_pref_value -category {Hier} -key {showUnnamedProcess} -value {false}
+gui_set_pref_value -category {Hier} -key {showVhdBlock} -value {false}
+gui_set_pref_value -category {Hier} -key {showVhdPackage} -value {false}
+gui_set_pref_value -category {Hier} -key {showVhdProcess} -value {false}
+gui_set_pref_value -category {Hier} -key {showVlgNamedBlock} -value {false}
+gui_set_pref_value -category {Hier} -key {showVlgPackage} -value {false}
+gui_set_pref_value -category {Hier} -key {showVlgVeraClassDef} -value {false}
+gui_set_pref_value -category {Source} -key {editor} -value {emacs}
+gui_set_pref_value -category {Source} -key {tabWidth} -value {3}
+gui_set_pref_value -category {Source} -key {wordWrapOn} -value {false}
+gui_set_pref_value -category {console} -key {max_log_lines} -value {100000}
+gui_create_pref_key -category {coverageColors} -key {fillColor_10} -value_type {string} -value {green4}
+gui_create_pref_key -category {coverageColors} -key {fillColor_11} -value_type {string} -value {green4}
+gui_create_pref_key -category {coverageColors} -key {fillColor_12} -value_type {string} -value {green4}
+gui_create_pref_key -category {coverageColors} -key {fillColor_13} -value_type {string} -value {green4}
+gui_create_pref_key -category {coverageColors} -key {fillColor_14} -value_type {string} -value {green4}
+gui_create_pref_key -category {coverageColors} -key {fillColor_15} -value_type {string} -value {green4}
+gui_create_pref_key -category {coverageColors} -key {fillColor_16} -value_type {string} -value {green4}
+gui_create_pref_key -category {coverageColors} -key {fillColor_17} -value_type {string} -value {green4}
+gui_create_pref_key -category {coverageColors} -key {fillColor_18} -value_type {string} -value {green4}
+gui_create_pref_key -category {coverageColors} -key {fillColor_19} -value_type {string} -value {green4}
+gui_create_pref_key -category {coverageColors} -key {fillColor_20} -value_type {string} -value {green4}
+gui_create_pref_key -category {coverageColors} -key {fillColor_21} -value_type {string} -value {green4}
+gui_create_pref_key -category {coverageColors} -key {fillColor_22} -value_type {string} -value {green4}
+gui_create_pref_key -category {coverageColors} -key {fillColor_23} -value_type {string} -value {green4}
+gui_create_pref_key -category {coverageColors} -key {fillColor_24} -value_type {string} -value {green4}
+gui_create_pref_key -category {coverageColors} -key {fillColor_25} -value_type {string} -value {green4}
+gui_create_pref_key -category {coverageColors} -key {fillColor_26} -value_type {string} -value {green4}
+gui_create_pref_key -category {coverageColors} -key {fillColor_27} -value_type {string} -value {green4}
+gui_create_pref_key -category {coverageColors} -key {fillColor_28} -value_type {string} -value {green4}
+gui_create_pref_key -category {coverageColors} -key {fillColor_29} -value_type {string} -value {green4}
+gui_create_pref_key -category {coverageColors} -key {fillColor_30} -value_type {string} -value {green4}
+gui_create_pref_key -category {coverageColors} -key {fillColor_31} -value_type {string} -value {green4}
+gui_create_pref_key -category {coverageColors} -key {fillColor_32} -value_type {string} -value {green4}
+gui_create_pref_key -category {coverageColors} -key {fillColor_33} -value_type {string} -value {green4}
+gui_create_pref_key -category {coverageColors} -key {fillColor_34} -value_type {string} -value {green4}
+gui_create_pref_key -category {coverageColors} -key {fillColor_35} -value_type {string} -value {green4}
+gui_create_pref_key -category {coverageColors} -key {fillColor_36} -value_type {string} -value {green4}
+gui_create_pref_key -category {coverageColors} -key {fillColor_37} -value_type {string} -value {green4}
+gui_create_pref_key -category {coverageColors} -key {fillColor_38} -value_type {string} -value {green4}
+gui_create_pref_key -category {coverageColors} -key {fillColor_39} -value_type {string} -value {green4}
+gui_create_pref_key -category {coverageColors} -key {fillColor_40} -value_type {string} -value {green4}
+gui_create_pref_key -category {coverageColors} -key {fillColor_41} -value_type {string} -value {green4}
+gui_create_pref_key -category {coverageColors} -key {fillColor_42} -value_type {string} -value {green4}
+gui_create_pref_key -category {coverageColors} -key {fillColor_43} -value_type {string} -value {green4}
+gui_create_pref_key -category {coverageColors} -key {fillColor_44} -value_type {string} -value {green4}
+gui_create_pref_key -category {coverageColors} -key {fillColor_45} -value_type {string} -value {green4}
+gui_create_pref_key -category {coverageColors} -key {fillColor_46} -value_type {string} -value {green4}
+gui_create_pref_key -category {coverageColors} -key {fillColor_47} -value_type {string} -value {green4}
+gui_create_pref_key -category {coverageColors} -key {fillColor_48} -value_type {string} -value {green4}
+gui_create_pref_key -category {coverageColors} -key {fillColor_49} -value_type {string} -value {green4}
+gui_create_pref_key -category {coverageColors} -key {fillColor_6} -value_type {string} -value {green4}
+gui_create_pref_key -category {coverageColors} -key {fillColor_7} -value_type {string} -value {green4}
+gui_create_pref_key -category {coverageColors} -key {fillColor_8} -value_type {string} -value {green4}
+gui_create_pref_key -category {coverageColors} -key {fillColor_9} -value_type {string} -value {green4}
+gui_create_pref_key -category {coverageColors} -key {rangeMax_10} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMax_11} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMax_12} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMax_13} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMax_14} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMax_15} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMax_16} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMax_17} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMax_18} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMax_19} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMax_20} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMax_21} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMax_22} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMax_23} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMax_24} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMax_25} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMax_26} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMax_27} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMax_28} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMax_29} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMax_30} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMax_31} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMax_32} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMax_33} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMax_34} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMax_35} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMax_36} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMax_37} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMax_38} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMax_39} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMax_40} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMax_41} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMax_42} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMax_43} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMax_44} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMax_45} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMax_46} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMax_47} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMax_48} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMax_49} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMax_6} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMax_7} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMax_8} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMax_9} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMin_10} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMin_11} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMin_12} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMin_13} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMin_14} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMin_15} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMin_16} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMin_17} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMin_18} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMin_19} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMin_20} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMin_21} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMin_22} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMin_23} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMin_24} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMin_25} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMin_26} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMin_27} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMin_28} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMin_29} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMin_30} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMin_31} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMin_32} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMin_33} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMin_34} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMin_35} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMin_36} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMin_37} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMin_38} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMin_39} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMin_40} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMin_41} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMin_42} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMin_43} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMin_44} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMin_45} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMin_46} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMin_47} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMin_48} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMin_49} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMin_6} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMin_7} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMin_8} -value_type {string} -value {100}
+gui_create_pref_key -category {coverageColors} -key {rangeMin_9} -value_type {string} -value {100}
+gui_set_pref_value -category {data_value_column} -key {justify} -value {true}
+gui_create_pref_category -category {dlg_settings}
+gui_create_pref_key -category {dlg_settings} -key {tableWithImmediatePopup} -value_type {bool} -value {true}
+gui_create_pref_category -category {schem_obj_name}
+gui_create_pref_key -category {schem_obj_name} -key {show_cell_and_pin_with_symbol_name} -value_type {bool} -value {false}
+gui_create_pref_key -category {schem_pin_hc} -key {textExtFont} -value_type {string} -value {Helvetica,10,-1,5,50,0,0,0,0,0}
+gui_set_pref_value -category {transaction} -key {wave_show_caller_option} -value {Tail}
+gui_set_pref_value -category {transaction} -key {wave_show_relations} -value {true}
+gui_set_pref_value -category {transaction} -key {wave_show_values} -value {true}
+gui_set_pref_value -category {transaction} -key {wave_tip_show_relations} -value {true}
+gui_set_pref_value -category {transaction} -key {wave_tip_show_values} -value {true}
+gui_set_pref_value -category {waveCompare} -key {end_unit} -value {1fs}
+gui_set_pref_value -category {waveCompare} -key {start_unit} -value {1fs}
+gui_set_pref_value -category {wave_value_column} -key {justify} -value {true}
+
+# State setting overrides
+gui_state_default_create -off -ini
+gui_set_state_value -category Globals -key open_list_inside -value true
+gui_set_state_value -category Globals -key open_wave_inside -value true
+gui_set_state_value -category Globals -key recent_cov_databases -value {{gui_cov_open_dlg -showgui -design /nfs/cadv1/bhunter/o78a/verif/bgx_cmr/merged.vdb} {gui_cov_open_dlg -showgui -design /nfs/cadv1/bhunter/uvmtut_v1.0/verif/alutb/merged.vdb} {gui_cov_open_dlg -showgui -design /nfs/cadv1/bhunter/o70a/verif/agl/merged.vdb} {gui_cov_open_dlg -showgui -design /nfs/cadv1/bhunter/o70c/verif/agl/merged.vdb} {gui_cov_open_dlg -showgui -design /nfs/cadv1/bhunter/o70b/verif/agl/merged.vdb}}
+gui_set_state_value -category Globals -key recent_cov_sessions -value {{gui_load_session -file /nfs/cadv1/bhunter/o78c/verif/bgx_cmr/session.tcl}}
+gui_set_state_value -category Globals -key recent_databases -value {{gui_open_db -file sim/div0/waves.vpd} {gui_open_db -file /nfs/cadv1/bhunter/ostut/verif/alutb/sim/div0/waves.vpd -design V1} {gui_open_db -file sim/basic/waves.vpd} {gui_open_db -file sim/fast_clk/waves.vpd} {gui_open_db -file sim/duty_cycle/waves.vpd}}
+gui_set_state_value -category Globals -key recent_sessions -value {{gui_load_session -ignore_errors -file /nfs/cadv1/bhunter/o70b/verif/fc/session.waves.vpd.tcl -ignore_errors} {gui_load_session -ignore_errors -file /nfs/cadv1/bhunter/o70b/verif/fc/session.waves.vpd.tcl} {gui_load_session -file /nfs/cadv1/bhunter/o78c/verif/bgx_cmr/session.tcl -ignore_errors} {gui_load_session -file /nfs/cadv1/bhunter/o78c/verif/bgx_spu/DVEfiles/dve_checkpoint_15025_1.tcl} {gui_load_session -file /nfs/cadv1/pscrobohaci/dev/o78a.Rx_CBFC.Tx_PAD___BUGS/verif/smu/DVEfiles/crash_09.21:15.46/dve_session09.21:15.46.tcl}}
+gui_set_state_value -category Globals -key recent_tcl_scripts -value {{gui_dve_source -global /nfs/dv3/bhunter/o63e/verif/srio/markers.tcl} {gui_dve_source -global /nfs/dv5/bhunter/14229/verif/srio/markers.tcl} {gui_dve_source -global /nfs/dv3/bhunter/o63a/verif/srio/markers.tcl} {gui_dve_source -global /nfs/dv5/bhunter/091225/verif/srio/markers.tcl} {gui_dve_source -global /nfs/dv3/bhunter/o63b/verif/srio/markers.tcl}}
+gui_set_state_value -category Layout -key child_assertion_size_x -value 1887
+gui_set_state_value -category Layout -key child_assertion_size_y -value 284
+gui_set_state_value -category Layout -key child_console_size_x -value 1886
+gui_set_state_value -category Layout -key child_console_size_y -value 185
+gui_set_state_value -category Layout -key child_covdetail_docknewline -value false
+gui_set_state_value -category Layout -key child_covdetail_pos_x -value {-2}
+gui_set_state_value -category Layout -key child_covdetail_pos_y -value {-15}
+gui_set_state_value -category Layout -key child_covdetail_size_x -value 1164
+gui_set_state_value -category Layout -key child_covdetail_size_y -value 698
+gui_set_state_value -category Layout -key child_coveragemap_docknewline -value false
+gui_set_state_value -category Layout -key child_coveragemap_pos_x -value {-2}
+gui_set_state_value -category Layout -key child_coveragemap_pos_y -value {-15}
+gui_set_state_value -category Layout -key child_coveragemap_size_x -value 1143
+gui_set_state_value -category Layout -key child_coveragemap_size_y -value 712
+gui_set_state_value -category Layout -key child_coveragetable_docknewline -value false
+gui_set_state_value -category Layout -key child_coveragetable_pos_x -value {-2}
+gui_set_state_value -category Layout -key child_coveragetable_pos_y -value {-15}
+gui_set_state_value -category Layout -key child_coveragetable_size_x -value 959
+gui_set_state_value -category Layout -key child_coveragetable_size_y -value 687
+gui_set_state_value -category Layout -key child_covhier_colhier -value 595
+gui_set_state_value -category Layout -key child_covhier_size_x -value 702
+gui_set_state_value -category Layout -key child_covhier_size_y -value 592
+gui_set_state_value -category Layout -key child_data_coltype -value 435
+gui_set_state_value -category Layout -key child_data_colvalue -value 550
+gui_set_state_value -category Layout -key child_data_colvariable -value 464
+gui_set_state_value -category Layout -key child_data_docknewline -value false
+gui_set_state_value -category Layout -key child_data_dockstate -value undocked
+gui_set_state_value -category Layout -key child_data_pos_x -value {-2}
+gui_set_state_value -category Layout -key child_data_pos_y -value {-15}
+gui_set_state_value -category Layout -key child_data_showstate -value maximized
+gui_set_state_value -category Layout -key child_data_size_x -value 1459
+gui_set_state_value -category Layout -key child_data_size_y -value 692
+gui_set_state_value -category Layout -key child_driver_showstate -value normal
+gui_set_state_value -category Layout -key child_driver_size_x -value 222
+gui_set_state_value -category Layout -key child_driver_size_y -value 451
+gui_set_state_value -category Layout -key child_hier_col3 -value {-1}
+gui_set_state_value -category Layout -key child_hier_colhier -value 399
+gui_set_state_value -category Layout -key child_hier_colpd -value 0
+gui_set_state_value -category Layout -key child_hier_coltype -value 71
+gui_set_state_value -category Layout -key child_hier_size_x -value 431
+gui_set_state_value -category Layout -key child_hier_size_y -value 723
+gui_set_state_value -category Layout -key child_list_docknewline -value false
+gui_set_state_value -category Layout -key child_list_down -value 559
+gui_set_state_value -category Layout -key child_list_pos_x -value {-2}
+gui_set_state_value -category Layout -key child_list_pos_y -value {-15}
+gui_set_state_value -category Layout -key child_list_right -value 1041
+gui_set_state_value -category Layout -key child_list_size_x -value 1201
+gui_set_state_value -category Layout -key child_list_size_y -value 704
+gui_set_state_value -category Layout -key child_memory_docknewline -value false
+gui_set_state_value -category Layout -key child_memory_pos_x -value {-2}
+gui_set_state_value -category Layout -key child_memory_pos_y -value {-15}
+gui_set_state_value -category Layout -key child_memory_size_x -value 1235
+gui_set_state_value -category Layout -key child_memory_size_y -value 752
+gui_set_state_value -category Layout -key child_schematic_docknewline -value false
+gui_set_state_value -category Layout -key child_schematic_pos_x -value {-2}
+gui_set_state_value -category Layout -key child_schematic_pos_y -value {-15}
+gui_set_state_value -category Layout -key child_schematic_size_x -value 1459
+gui_set_state_value -category Layout -key child_schematic_size_y -value 704
+gui_set_state_value -category Layout -key child_source_docknewline -value false
+gui_set_state_value -category Layout -key child_source_pos_x -value {-2}
+gui_set_state_value -category Layout -key child_source_pos_y -value {-15}
+gui_set_state_value -category Layout -key child_source_size_x -value 1459
+gui_set_state_value -category Layout -key child_source_size_y -value 718
+gui_set_state_value -category Layout -key child_watch_size_x -value 1250
+gui_set_state_value -category Layout -key child_watch_size_y -value 476
+gui_set_state_value -category Layout -key child_wave_colname -value 236
+gui_set_state_value -category Layout -key child_wave_colvalue -value 274
+gui_set_state_value -category Layout -key child_wave_docknewline -value false
+gui_set_state_value -category Layout -key child_wave_left -value 514
+gui_set_state_value -category Layout -key child_wave_pos_x -value {-2}
+gui_set_state_value -category Layout -key child_wave_pos_y -value {-15}
+gui_set_state_value -category Layout -key child_wave_right -value 935
+gui_set_state_value -category Layout -key child_wave_size_x -value 1459
+gui_set_state_value -category Layout -key child_wave_size_y -value 718
+gui_set_state_value -category Layout -key cov_main_pos_x -value 204
+gui_set_state_value -category Layout -key cov_main_pos_y -value 79
+gui_set_state_value -category Layout -key cov_main_size_x -value 1860
+gui_set_state_value -category Layout -key cov_main_size_y -value 1034
+gui_set_state_value -category Layout -key main_pos_x -value 28
+gui_set_state_value -category Layout -key main_pos_y -value 45
+gui_set_state_value -category Layout -key main_size_x -value 1914
+gui_set_state_value -category Layout -key main_size_y -value 1034
+gui_set_state_value -category Layout -key stand_list_child_docknewline -value false
+gui_set_state_value -category Layout -key stand_list_child_pos_x -value {-2}
+gui_set_state_value -category Layout -key stand_list_child_pos_y -value {-15}
+gui_set_state_value -category Layout -key stand_list_child_size_x -value 1676
+gui_set_state_value -category Layout -key stand_list_child_size_y -value 868
+gui_set_state_value -category Layout -key stand_list_top_pos_x -value 4
+gui_set_state_value -category Layout -key stand_list_top_pos_y -value 25
+gui_set_state_value -category Layout -key stand_list_top_size_x -value 1675
+gui_set_state_value -category Layout -key stand_list_top_size_y -value 1005
+gui_set_state_value -category Layout -key stand_source_child_docknewline -value false
+gui_set_state_value -category Layout -key stand_source_child_size_x -value 364
+gui_set_state_value -category Layout -key stand_source_child_size_y -value 294
+gui_set_state_value -category Layout -key stand_source_top_pos_x -value 578
+gui_set_state_value -category Layout -key stand_source_top_pos_y -value 520
+gui_set_state_value -category Layout -key stand_source_top_size_x -value 1076
+gui_set_state_value -category Layout -key stand_source_top_size_y -value 918
+gui_set_state_value -category Layout -key stand_wave_child_docknewline -value false
+gui_set_state_value -category Layout -key stand_wave_child_pos_x -value {-2}
+gui_set_state_value -category Layout -key stand_wave_child_pos_y -value {-15}
+gui_set_state_value -category Layout -key stand_wave_child_size_x -value 1864
+gui_set_state_value -category Layout -key stand_wave_child_size_y -value 853
+gui_set_state_value -category Layout -key stand_wave_top_pos_x -value 14
+gui_set_state_value -category Layout -key stand_wave_top_pos_y -value 70
+gui_set_state_value -category Layout -key stand_wave_top_size_x -value 1873
+gui_set_state_value -category Layout -key stand_wave_top_size_y -value 1035
+gui_set_state_value -category Assertion -key show_assertion_type -value all
+gui_set_state_value -category Class -key showOVM -value false
+gui_set_state_value -category Class -key showRVM -value false
+gui_set_state_value -category Class -key showVMM -value false
+gui_set_state_value -category Member -key showInternalMember -value true
+gui_set_state_value -category Local -key showParameter -value false
+gui_set_state_value -category SaveSession -key open_database_info -value false
+gui_create_state_key -category Widget_History -key Cnst.1|m_pSplitter|m_pCnstSharedWidget|pages|Solver.1|hbox|textfilter -value_type string -value {*pkt_le* *pkt_type* *crc* *direction}
+gui_create_state_key -category Widget_History -key Cnst.1|m_pSplitter|m_pCnstSharedWidget|pages|Solver.1|solversearch|nameCombo -value_type string -value oversize_err
+gui_create_state_key -category Widget_History -key Cnst.1|m_pViewSplitter|m_pSplitter|m_pCnstSharedWidget|pages|Solver.1|hbox|textfilter -value_type string -value {*RX_LOGL* *lmac_type *RX_LOGL_XOFF*}
+gui_create_state_key -category Widget_History -key Cnst.1|m_pViewSplitter|m_pSplitter|m_pCnstSharedWidget|pages|Solver.1|solversearch|nameCombo -value_type string -value *LOGL*
+gui_create_state_key -category Widget_History -key CovTopLevel.1|qt_left_dock|DockWnd1|CovHier.1|pages|CovHier.1|hbox|unnamed -value_type string -value {per* *lmac* *filter* *filter}
+gui_create_state_key -category Widget_History -key Find|m_pFindFrame|m_pFindCombo -value_type string -value {powerdown krq_i updatedr_o south28__updatedr south28_updatedr}
+gui_create_state_key -category Widget_History -key {Search.1|m_FilterBar|Signal Filter HBox|unnamed} -value_type string -value {*srio__qlm_loopback* *.core.*}
+gui_create_state_key -category Widget_History -key Search.1|m_pStringCombo -value_type string -value {portn_ctrl_CSR_data *port0ctl* *port_0* enable i_enable}
+gui_create_state_key -category Widget_History -key SeekValueD|VBox1|HBox1|valueentry -value_type string -value {0000 DCE6}
+gui_create_state_key -category Widget_History -key TopLevel.1|EkTopVbox|EkWorkspace|qt_workspacechild1|DLPane.1|pages|Data.1|hbox|textfilter -value_type string -value srio_clk*
+gui_create_state_key -category Widget_History -key TopLevel.1|EkTopVbox|EkWorkspace|qt_workspacechild2|DLPane.1|pages|Data.1|hbox|textfilter -value_type string -value {csr_core__maint_wr_m_n log* ctrl_dec_state_encode* *clear_bist}
+gui_create_state_key -category Widget_History -key TopLevel.1|EkTopVbox|EkWorkspace|qt_workspacechild4|HSPane.1|pages|Hier.1|hbox|unnamed -value_type string -value {srio_01_t* srio_roct*}
+gui_create_state_key -category Widget_History -key TopLevel.1|EkTopVbox|EkWorkspace|qt_workspacechild5|DLPane.1|pages|Data.1|hbox|textfilter -value_type string -value {srio_* srio_clk*}
+gui_create_state_key -category Widget_History -key TopLevel.1|EkTopVbox|wndWorkspace|qt_workspacechild1|DLPane.1|pages|Data.1|hbox|textfilter -value_type string -value {*pipe* *rdata tbv*rgm* tbv*}
+gui_create_state_key -category Widget_History -key TopLevel.1|EkTopVbox|wndWorkspace|qt_workspacechild1|DLPane.1|pages|Local.1|Local.1_hbox|textfilter -value_type string -value {vintf* krq_i* *uvm_top* cmn_cfg}
+gui_create_state_key -category Widget_History -key TopLevel.1|EkTopVbox|wndWorkspace|qt_workspacechild1|DLPane.1|pages|Local.1|textfilter -value_type string -value {*name* *full*}
+gui_create_state_key -category Widget_History -key TopLevel.1|EkTopVbox|wndWorkspace|qt_workspacechild1|DLPane.1|pages|Member.1|hbox|textfilter -value_type string -value {drv_vi* *drv_vi cmn* m_*}
+gui_create_state_key -category Widget_History -key TopLevel.1|EkTopVbox|wndWorkspace|qt_workspacechild2|DLPane.1|pages|Data.1|hbox|textfilter -value_type string -value *dbg*
+gui_create_state_key -category Widget_History -key TopLevel.1|EkTopVbox|wndWorkspace|qt_workspacechild4|Wave.1|left|filterVBox|controlHBox|unnamed -value_type string -value *agl*
+gui_create_state_key -category Widget_History -key TopLevel.1|qt_left_dock|DockWnd1|HSPane.1|pages|Class.1|hbox|textfilter -value_type string -value {*krq_agent* *vsqr_c *vsqr *rx_logl*}
+gui_create_state_key -category Widget_History -key TopLevel.1|qt_left_dock|DockWnd1|HSPane.1|pages|Hier.1|hbox|textfilter -value_type string -value {*exer_vseq* *skid *skid* agent*}
+gui_create_state_key -category Widget_History -key {TopLevel.1|qt_left_dock|DockWnd1|HSPane.1|pages|Object.1|hbox|Filter by Hierarchy} -value_type string -value {x2p_lmac_sem* *x2p_lmac_sem* *x2p_lmac_sem *agent_c*}
+gui_create_state_key -category Widget_History -key TopLevel.1|qt_top_dock|&Edit|FindCombo -value_type string -value {powerdown krq_i updatedr_o south28__updatedr south28_updatedr}
+gui_create_state_key -category Widget_History -key TopLevel.2|qt_top_dock|&Edit|FindCombo -value_type string -value {data_s1 log2_rlnk_d}
+gui_create_state_key -category Widget_History -key {UVM.1|m_UvmTabWidget|tab pages|ResourceView|m_ResourceNameFilter} -value_type string -value *krq*
+gui_create_state_key -category Widget_History -key {dlgSimSetup|m_setupTab|tab pages|BuildTab|m_rebuildBtnGroup|m_customCmdCombo} -value_type string -value {{cnmake sim TEST=interrupts_msix_vf SEED=9 VGUI=1} runner.py}
+gui_create_state_key -category Widget_History -key {dlgSimSetup|m_setupTab|tab pages|BuildTab|m_rebuildBtnGroup|m_customDirCombo} -value_type string -value runner
+gui_create_state_key -category Widget_History -key {dlgSimSetup|m_setupTab|tab pages|SimTab|m_VPDCombo} -value_type string -value inter.vpd
+gui_create_state_key -category Widget_History -key {dlgSimSetup|m_setupTab|tab pages|SimTab|m_argsCombo} -value_type string -value {{-l sim/exer_unfiltered/logfile +sim_dir=sim/exer_unfiltered +hdl_top=bgx_cmr_tb_top +dbg=0 +UVM_VERBOSITY=UVM_NONE +cfg_file= +bug_file=../../verif/bugs.bdf +verrtime=0 -cm_dir coverage/coverage -cg_coverage_control=0 +UVM_TESTNAME=exer_unfiltered_test_c +projmode=uvm +showlev +dbglen=75 +filelen=30 +fsdbLogOff +rand_sync +ntb_random_seed=1 +tbvTestName= +vcs+lic+wait +lint=noPCTIO-L,noPCTI-L +warn=noRT-ISV -assert nopostproc +vcs+flush+all +seed=1 +seed_file=sim/exer_unfiltered/seed.log +from_host=cahw-vnc2:56248 +chip_pass=1.0 +err=10 +UVM_MAX_QUIT_COUNT=10,0 +fsdb+mda +fsdb+struct -ucligui} {-l sim/exer_unfiltered/logfile +sim_dir=sim/exer_unfiltered +hdl_top=bgx_cmr_tb_top +dbg=0 +UVM_VERBOSITY=UVM_NONE +cfg_file= +bug_file=../../verif/bugs.bdf +verrtime=0 -cm_dir coverage/coverage -cg_coverage_control=0 +UVM_TESTNAME=exer_unfiltered_test_c +projmode=uvm +showlev +dbglen=75 +filelen=30 +fsdbLogOff +rand_sync +ntb_random_seed=1 +tbvTestName= +vcs+lic+wait +lint=noPCTIO-L,noPCTI-L +warn=noRT-ISV -assert nopostproc +vcs+flush+all +seed=1 +seed_file=sim/exer_unfiltered/seed.log +from_host=cahw-vnc2:56248 +chip_pass=1.0 +err=10 +UVM_MAX_QUIT_COUNT=10,0 +fsdb+mda +fsdb+struct} {-l sim/basic/logfile +sim_dir=sim/basic +hdl_top=bgx_cmr_tb_top +dbg=200 +UVM_VERBOSITY=200 +cfg_file= +bug_file=../../verif/bugs.bdf +verrtime=0 -cm_dir coverage/coverage -cg_coverage_control=0 +UVM_TESTNAME=basic_test_c +projmode=uvm +showlev +dbglen=75 +filelen=30 +fsdbLogOff +rand_sync +ntb_random_seed=1 +tbvTestName= +vcs+lic+wait +lint=noPCTIO-L,noPCTI-L +warn=noRT-ISV +seed=1 +seed_file=sim/basic/seed.log +from_host=cahw-vnc2:56735 +chip_pass=1.0 +err=10 +UVM_MAX_QUIT_COUNT=10,0 +fsdb+mda +fsdb+struct -ucligui} {+vcs+lic+wait +UVM_PHASE_TRACE +UVM_TESTNAME=domain_reset_test_c -ucligui} {+vcs+lic+wait +UVM_PHASE_TRACE +UVM_TESTNAME=idle_reset_test_c -ucligui}}
+gui_create_state_key -category Widget_History -key {dlgSimSetup|m_setupTab|tab pages|SimTab|m_curDirCombo} -value_type string -value {/nfs/cadv1/bhunter/o78a/verif/bgx_cmr /nfs/causers2/bhunter/test/resets /nfs/cadv1/bhunter/o78c/verif/bgx_spu /nfs/cadv1/bhunter/o78d/verif/bgx_smu /nfs/cadv1/bhunter/smu_branch/verif/bgx_spu}
+gui_create_state_key -category Widget_History -key {dlgSimSetup|m_setupTab|tab pages|SimTab|m_exeCombo} -value_type string -value {/nfs/cadv1/bhunter/o78a/verif/bgx_cmr/sim/.vcomp_VCS_9ff9c77ac18389a2474517c4ce858c45/simvTBV sim/.vcomp_VCS_9ff9c77ac18389a2474517c4ce858c45/simvTBV /nfs/cadv1/bhunter/o78a/verif/bgx_cmr/sim/.vcomp_VCS_c7e3b67c5f7646576f65ae794526b79d/simvTBV /nfs/causers2/bhunter/test/resets/simv simv}
+gui_create_state_key -category FindDialog -key m_pMatchCase -value_type bool -value false
+gui_create_state_key -category FindDialog -key m_pMatchWord -value_type bool -value false
+gui_create_state_key -category FindDialog -key m_pUseCombo -value_type string -value {}
+gui_create_state_key -category FindDialog -key m_pWrapAround -value_type bool -value true
+gui_create_state_key -category SearchDialog -key MatchCase -value_type bool -value false
+gui_create_state_key -category SearchDialog -key MatchWord -value_type bool -value true
+gui_create_state_key -category SearchDialog -key SearchMode -value_type string -value Wildcards
+gui_create_state_key -category SearchDialog -key UseCombo -value_type bool -value true
+gui_create_state_key -category Layout_CoverageTable_covtblFGroupsList -key names -value_type string -value {Group, , ,  ,   ,Score,Covergroup,}
+gui_create_state_key -category Layout_CoverageTable_covtblFGroupsList -key orders -value_type string -value 4,0,1,2,3,5,6,
+gui_create_state_key -category Layout_CoverageTable_covtblFGroupsList -key widths -value_type string -value 220,0,25,0,0,125,125,
+gui_create_state_key -category Layout_CoverageTable_covtblInstancesList -key names -value_type string -value {Name, , ,  ,   ,Score,}
+gui_create_state_key -category Layout_CoverageTable_covtblInstancesList -key orders -value_type string -value 4,0,1,2,3,5,
+gui_create_state_key -category Layout_CoverageTable_covtblInstancesList -key widths -value_type string -value 359,0,25,0,0,125,
+gui_create_state_key -category Layout_CoverageTable_covtblModulesList -key names -value_type string -value {Name, , ,  ,   ,Score,}
+gui_create_state_key -category Layout_CoverageTable_covtblModulesList -key orders -value_type string -value 4,0,1,2,3,5,
+gui_create_state_key -category Layout_CoverageTable_covtblModulesList -key widths -value_type string -value 291,0,25,0,0,125,
+gui_create_state_key -category Layout_CovDetail_lnListView -key names -value_type string -value Category,Coverage,
+gui_create_state_key -category Layout_CovDetail_lnListView -key orders -value_type string -value 0,1,
+gui_create_state_key -category Layout_CovDetail_lnListView -key widths -value_type string -value 118,125,
+gui_create_state_key -category Layout_CovDetail_tglListView -key names -value_type string -value {Variable, ,  ,   ,Type,Coverage,Display,}
+gui_create_state_key -category Layout_CovDetail_tglListView -key orders -value_type string -value 3,0,1,2,4,5,6,
+gui_create_state_key -category Layout_CovDetail_tglListView -key widths -value_type string -value 140,25,0,0,50,125,140,
+gui_create_state_key -category Layout_CovDetail_fsmListView -key names -value_type string -value {FSM, ,  ,   ,State,Transition,Sequence,}
+gui_create_state_key -category Layout_CovDetail_fsmListView -key orders -value_type string -value 3,0,1,2,5,4,6,
+gui_create_state_key -category Layout_CovDetail_fsmListView -key widths -value_type string -value 138,25,0,0,125,125,125,
+gui_create_state_key -category Layout_CovDetail_fsmlist -key names -value_type string -value {Coverage, ,  ,   ,Transition,}
+gui_create_state_key -category Layout_CovDetail_fsmlist -key orders -value_type string -value 3,0,1,2,4,
+gui_create_state_key -category Layout_CovDetail_fsmlist -key widths -value_type string -value 125,25,0,0,455,
+gui_create_state_key -category Layout_CovDetail_cndListView -key names -value_type string -value {Expression, ,  ,   ,ID,Coverage,Line No.,}
+gui_create_state_key -category Layout_CovDetail_cndListView -key orders -value_type string -value 3,0,1,2,4,5,6,
+gui_create_state_key -category Layout_CovDetail_cndListView -key widths -value_type string -value 320,25,0,0,0,125,92,
+gui_create_state_key -category Layout_CovDetail_brListView -key names -value_type string -value {Name, ,  ,   ,Coverage,Line No.,}
+gui_create_state_key -category Layout_CovDetail_brListView -key orders -value_type string -value 3,0,1,2,4,5,
+gui_create_state_key -category Layout_CovDetail_brListView -key widths -value_type string -value 100,25,0,0,125,68,
+gui_create_state_key -category Layout_CovDetail_designAssertListView -key names -value_type string -value {Assert Name, , ,  ,   ,Attempts,Real Successes,Failures,Incompletes,Category,Severity,}
+gui_create_state_key -category Layout_CovDetail_designAssertListView -key orders -value_type string -value 4,0,1,2,3,5,6,7,8,9,10,
+gui_create_state_key -category Layout_CovDetail_designAssertListView -key widths -value_type string -value 120,0,25,0,0,71,116,65,92,74,67,
+gui_create_state_key -category Layout_CovDetail_codeMiddleSplitter -key value1 -value_type integer -value 10
+gui_create_state_key -category Layout_CovDetail_codeMiddleSplitter -key value2 -value_type integer -value 329
+gui_create_state_key -category Layout_CovDetail_cndSplitter -key value1 -value_type integer -value 100
+gui_create_state_key -category Layout_CovDetail_cndSplitter -key value2 -value_type integer -value 234
+gui_create_state_key -category Layout_CovDetail_covGrpInsListView -key names -value_type string -value {Cover Group Item, , ,  ,   ,Definition,Score,Goal,Weight,}
+gui_create_state_key -category Layout_CovDetail_covGrpInsListView -key orders -value_type string -value 4,0,1,2,3,5,6,7,8,
+gui_create_state_key -category Layout_CovDetail_covGrpInsListView -key widths -value_type string -value 631,0,25,0,0,341,125,70,86,
+gui_create_state_key -category Layout_CovDetail_covGrpDefListView -key names -value_type string -value {Cover Group Item, , ,  ,   ,Score,Goal,Weight,}
+gui_create_state_key -category Layout_CovDetail_covGrpDefListView -key orders -value_type string -value 4,0,1,2,3,5,6,7,
+gui_create_state_key -category Layout_CovDetail_covGrpDefListView -key widths -value_type string -value 352,0,25,0,0,125,70,86,
+gui_create_state_key -category Layout_CovDetail_m_CovGrpTable -key names -value_type string -value {Bin Name, , ,  ,   ,Status,At Least,Size,Hit Count,}
+gui_create_state_key -category Layout_CovDetail_m_CovGrpTable -key orders -value_type string -value 4,0,1,2,3,5,6,7,8,
+gui_create_state_key -category Layout_CovDetail_m_CovGrpTable -key widths -value_type string -value 206,0,25,0,0,150,68,101,74,
+gui_create_state_key -category {Layout_CovDetail_assertion list} -key names -value_type string -value {Instance, , ,  ,   ,Assert Name,Attempts,Real Successes,Failures,Incompletes,Category,Severity,}
+gui_create_state_key -category {Layout_CovDetail_assertion list} -key orders -value_type string -value 4,0,1,2,3,5,6,7,8,9,10,11,
+gui_create_state_key -category {Layout_CovDetail_assertion list} -key widths -value_type string -value 93,0,25,0,0,129,98,145,110,119,98,92,
+gui_create_state_key -category Layout_CovDetail_funMiddleSplitter -key value1 -value_type integer -value 567
+gui_create_state_key -category Layout_CovDetail_funMiddleSplitter -key value2 -value_type integer -value 567
+gui_create_state_key -category Layout_CovDetail_splitterWithPrefVal -key value1 -value_type integer -value 100
+gui_create_state_key -category Layout_CovDetail_splitterWithPrefVal -key value2 -value_type integer -value 1
+gui_create_state_key -category Layout_CovDetail_vector -key names -value_type string -value {ID, ,  ,   ,Coverage,1,}
+gui_create_state_key -category Layout_CovDetail_vector -key orders -value_type string -value 3,0,1,2,4,5,
+gui_create_state_key -category Layout_CovDetail_vector -key widths -value_type string -value 0,25,0,0,80,24,
+gui_create_state_key -category Layout_CovDetail_tglDetailListView -key names -value_type string -value {Variable, ,  ,   ,0->1,1->0,}
+gui_create_state_key -category Layout_CovDetail_tglDetailListView -key orders -value_type string -value 3,0,1,2,4,5,
+gui_create_state_key -category Layout_CovDetail_tglDetailListView -key widths -value_type string -value 140,25,0,0,50,50,
+gui_state_default_create -off
+
+# Begin command logging
+gui_open_db -file sim/basic/waves.vpd
+gui_list_expand -id  Hier.1   frm_tb_top
+gui_list_select -id Hier.1 -current_item_name frm_tb_top.frm_i -current_item_type Scope  -selected  { frm_tb_top.frm_i   }
+gui_open_window Wave
+gui_list_add -id Wave.1 -from Hier.1 { frm_tb_top.frm_i } -insertionbar
+gui_zoom -window  Wave.1  -full
+gui_list_select -id Hier.1 -current_item_name frm_tb_top.alu_i -current_item_type Scope  -selected  { frm_tb_top.alu_i   }
+gui_list_add -id Wave.1 -from Hier.1 { frm_tb_top.alu_i } -insertionbar
+gui_list_select -id Wave.1 -selected  { frm_tb_top.frm_i.frame_bp   }
+gui_wv_zoom_timerange -id  Wave.1 5351.836 7017.639
+gui_marker_move -id  Wave.1 C1 5936
+#gui_exit
+
diff --git a/verif/frm/DVEfiles/dve_qtwarnings.log b/verif/frm/DVEfiles/dve_qtwarnings.log
new file mode 100644
index 0000000..e69de29
diff --git a/verif/frm/DVEfiles/session.tcl b/verif/frm/DVEfiles/session.tcl
new file mode 100644
index 0000000..59a2e0b
--- /dev/null
+++ b/verif/frm/DVEfiles/session.tcl
@@ -0,0 +1,307 @@
+# Begin_DVE_Session_Save_Info
+# DVE full session
+# Saved on Wed Sep 25 12:19:43 2013
+# Designs open: 1
+#   V1: /nfs/cadv1/bhunter/ostut/verif/frm/sim/basic/waves.vpd
+# Toplevel windows open: 1
+# 	TopLevel.1
+#   Source.1: frm_tb_top
+#   Wave.1: 20 signals
+#   Group count = 2
+#   Group frm_i signal count = 10
+# End_DVE_Session_Save_Info
+
+# DVE version: H-2013.06-2
+# DVE build date: Aug 15 2013 21:34:56
+
+
+#<Session mode="Full" path="/nfs/cadv1/bhunter/ostut/verif/frm/DVEfiles/session.tcl" type="Debug">
+
+gui_set_loading_session_type Post
+gui_continuetime_set
+
+# Close design
+if { [gui_sim_state -check active] } {
+    gui_sim_terminate
+}
+gui_close_db -all
+gui_expr_clear_all
+
+# Close all windows
+gui_close_window -type Console
+gui_close_window -type Wave
+gui_close_window -type Source
+gui_close_window -type Schematic
+gui_close_window -type Data
+gui_close_window -type DriverLoad
+gui_close_window -type List
+gui_close_window -type Memory
+gui_close_window -type HSPane
+gui_close_window -type DLPane
+gui_close_window -type Assertion
+gui_close_window -type CovHier
+gui_close_window -type CoverageTable
+gui_close_window -type CoverageMap
+gui_close_window -type CovDetail
+gui_close_window -type Local
+gui_close_window -type Stack
+gui_close_window -type Watch
+gui_close_window -type Group
+gui_close_window -type Transaction
+
+
+
+# Application preferences
+gui_set_pref_value -key app_default_font -value {Helvetica,10,-1,5,50,0,0,0,0,0}
+gui_src_preferences -tabstop 3 -maxbits 24 -windownumber 1
+#<WindowLayout>
+
+# DVE top-level session
+
+
+# Create and position top-level window: TopLevel.1
+
+if {![gui_exist_window -window TopLevel.1]} {
+    set TopLevel.1 [ gui_create_window -type TopLevel \
+       -icon $::env(DVE)/auxx/gui/images/toolbars/dvewin.xpm] 
+} else { 
+    set TopLevel.1 TopLevel.1
+}
+gui_show_window -window ${TopLevel.1} -show_state normal -rect {{29 46} {1914 1034}}
+
+# ToolBar settings
+gui_set_toolbar_attributes -toolbar {TimeOperations} -dock_state top
+gui_set_toolbar_attributes -toolbar {TimeOperations} -offset 0
+gui_show_toolbar -toolbar {TimeOperations}
+gui_hide_toolbar -toolbar {&File}
+gui_set_toolbar_attributes -toolbar {&Edit} -dock_state top
+gui_set_toolbar_attributes -toolbar {&Edit} -offset 0
+gui_show_toolbar -toolbar {&Edit}
+gui_hide_toolbar -toolbar {CopyPaste}
+gui_set_toolbar_attributes -toolbar {&Trace} -dock_state top
+gui_set_toolbar_attributes -toolbar {&Trace} -offset 0
+gui_show_toolbar -toolbar {&Trace}
+gui_hide_toolbar -toolbar {TraceInstance}
+gui_hide_toolbar -toolbar {BackTrace}
+gui_set_toolbar_attributes -toolbar {&Scope} -dock_state top
+gui_set_toolbar_attributes -toolbar {&Scope} -offset 0
+gui_show_toolbar -toolbar {&Scope}
+gui_set_toolbar_attributes -toolbar {&Window} -dock_state top
+gui_set_toolbar_attributes -toolbar {&Window} -offset 0
+gui_show_toolbar -toolbar {&Window}
+gui_set_toolbar_attributes -toolbar {Signal} -dock_state top
+gui_set_toolbar_attributes -toolbar {Signal} -offset 0
+gui_show_toolbar -toolbar {Signal}
+gui_set_toolbar_attributes -toolbar {Zoom} -dock_state top
+gui_set_toolbar_attributes -toolbar {Zoom} -offset 0
+gui_show_toolbar -toolbar {Zoom}
+gui_set_toolbar_attributes -toolbar {Zoom And Pan History} -dock_state top
+gui_set_toolbar_attributes -toolbar {Zoom And Pan History} -offset 0
+gui_show_toolbar -toolbar {Zoom And Pan History}
+gui_set_toolbar_attributes -toolbar {Grid} -dock_state top
+gui_set_toolbar_attributes -toolbar {Grid} -offset 0
+gui_show_toolbar -toolbar {Grid}
+gui_hide_toolbar -toolbar {Simulator}
+gui_hide_toolbar -toolbar {Interactive Rewind}
+gui_hide_toolbar -toolbar {Testbench}
+
+# End ToolBar settings
+
+# Docked window settings
+set HSPane.1 [gui_create_window -type HSPane -parent ${TopLevel.1} -dock_state left -dock_on_new_line true -dock_extent 431]
+catch { set Hier.1 [gui_share_window -id ${HSPane.1} -type Hier] }
+gui_set_window_pref_key -window ${HSPane.1} -key dock_width -value_type integer -value 431
+gui_set_window_pref_key -window ${HSPane.1} -key dock_height -value_type integer -value 723
+gui_set_window_pref_key -window ${HSPane.1} -key dock_offset -value_type integer -value 0
+gui_update_layout -id ${HSPane.1} {{left 0} {top 0} {width 430} {height 723} {dock_state left} {dock_on_new_line true} {child_hier_colhier 399} {child_hier_coltype 71} {child_hier_colpd 0} {child_hier_col1 0} {child_hier_col2 1} {child_hier_col3 -1}}
+set Console.1 [gui_create_window -type Console -parent ${TopLevel.1} -dock_state bottom -dock_on_new_line true -dock_extent 185]
+gui_set_window_pref_key -window ${Console.1} -key dock_width -value_type integer -value 1860
+gui_set_window_pref_key -window ${Console.1} -key dock_height -value_type integer -value 185
+gui_set_window_pref_key -window ${Console.1} -key dock_offset -value_type integer -value 0
+gui_update_layout -id ${Console.1} {{left 0} {top 0} {width 1885} {height 184} {dock_state bottom} {dock_on_new_line true}}
+#### Start - Readjusting docked view's offset / size
+set dockAreaList { top left right bottom }
+foreach dockArea $dockAreaList {
+  set viewList [gui_ekki_get_window_ids -active_parent -dock_area $dockArea]
+  foreach view $viewList {
+      if {[lsearch -exact [gui_get_window_pref_keys -window $view] dock_width] != -1} {
+        set dockWidth [gui_get_window_pref_value -window $view -key dock_width]
+        set dockHeight [gui_get_window_pref_value -window $view -key dock_height]
+        set offset [gui_get_window_pref_value -window $view -key dock_offset]
+        if { [string equal "top" $dockArea] || [string equal "bottom" $dockArea]} {
+          gui_set_window_attributes -window $view -dock_offset $offset -width $dockWidth
+        } else {
+          gui_set_window_attributes -window $view -dock_offset $offset -height $dockHeight
+        }
+      }
+  }
+}
+#### End - Readjusting docked view's offset / size
+gui_sync_global -id ${TopLevel.1} -option true
+
+# MDI window settings
+set DLPane.1 [gui_create_window -type {DLPane}  -parent ${TopLevel.1}]
+if {[gui_get_shared_view -id ${DLPane.1} -type Data] == {}} {
+        set Data.1 [gui_share_window -id ${DLPane.1} -type Data]
+} else {
+        set Data.1  [gui_get_shared_view -id ${DLPane.1} -type Data]
+}
+
+gui_show_window -window ${DLPane.1} -show_state maximized
+gui_update_layout -id ${DLPane.1} {{show_state maximized} {dock_state undocked} {dock_on_new_line false} {child_data_colvariable 464} {child_data_colvalue 550} {child_data_coltype 435} {child_data_col1 0} {child_data_col2 1} {child_data_col3 2}}
+set Source.1 [gui_create_window -type {Source}  -parent ${TopLevel.1}]
+gui_show_window -window ${Source.1} -show_state maximized
+gui_update_layout -id ${Source.1} {{show_state maximized} {dock_state undocked} {dock_on_new_line false}}
+set Wave.1 [gui_create_window -type {Wave}  -parent ${TopLevel.1}]
+gui_show_window -window ${Wave.1} -show_state maximized
+gui_update_layout -id ${Wave.1} {{show_state maximized} {dock_state undocked} {dock_on_new_line false} {child_wave_left 514} {child_wave_right 935} {child_wave_colname 236} {child_wave_colvalue 274} {child_wave_col1 0} {child_wave_col2 1}}
+
+# End MDI window settings
+
+gui_set_env TOPLEVELS::TARGET_FRAME(Source) ${TopLevel.1}
+gui_set_env TOPLEVELS::TARGET_FRAME(Schematic) ${TopLevel.1}
+gui_set_env TOPLEVELS::TARGET_FRAME(PathSchematic) ${TopLevel.1}
+gui_set_env TOPLEVELS::TARGET_FRAME(Wave) ${TopLevel.1}
+gui_set_env TOPLEVELS::TARGET_FRAME(List) ${TopLevel.1}
+gui_set_env TOPLEVELS::TARGET_FRAME(Memory) ${TopLevel.1}
+gui_set_env TOPLEVELS::TARGET_FRAME(DriverLoad) none
+gui_update_statusbar_target_frame ${TopLevel.1}
+
+#</WindowLayout>
+
+#<Database>
+
+# DVE Open design session: 
+
+if { ![gui_is_db_opened -db {/nfs/cadv1/bhunter/ostut/verif/frm/sim/basic/waves.vpd}] } {
+	gui_open_db -design V1 -file /nfs/cadv1/bhunter/ostut/verif/frm/sim/basic/waves.vpd -nosource
+}
+gui_set_precision 1ps
+gui_set_time_units 1ns
+#</Database>
+
+# DVE Global setting session: 
+
+
+# Global: Bus
+
+# Global: Expressions
+
+# Global: Signal Time Shift
+
+# Global: Signal Compare
+
+# Global: Signal Groups
+gui_load_child_values {frm_tb_top.alu_i}
+gui_load_child_values {frm_tb_top.frm_i}
+
+
+set _session_group_1 frm_i
+gui_sg_create "$_session_group_1"
+set frm_i "$_session_group_1"
+
+gui_sg_addsignal -group "$_session_group_1" { {frm_tb_top.frm_i.$unit} frm_tb_top.frm_i.clk frm_tb_top.frm_i.frame frm_tb_top.frm_i.frame_bp frm_tb_top.frm_i.frame_data frm_tb_top.frm_i.frame_len frm_tb_top.frm_i.frame_len_val frm_tb_top.frm_i.not_x frm_tb_top.frm_i.rst_n }
+
+set _session_group_2 $_session_group_1|
+append _session_group_2 alu_i
+gui_sg_create "$_session_group_2"
+set frm_i|alu_i "$_session_group_2"
+
+gui_sg_addsignal -group "$_session_group_2" { frm_tb_top.alu_i.ready_not_x frm_tb_top.alu_i.result_not_x frm_tb_top.alu_i.ctl_not_x frm_tb_top.alu_i.dat_not_x frm_tb_top.alu_i.result frm_tb_top.alu_i.ready frm_tb_top.alu_i.ctl frm_tb_top.alu_i.dat frm_tb_top.alu_i.clk frm_tb_top.alu_i.rst_n {frm_tb_top.alu_i.$unit} }
+
+# Global: Highlighting
+
+# Global: Stack
+gui_change_stack_mode -mode list
+
+# Post database loading setting...
+
+# Restore C1 time
+gui_set_time -C1_only 5936
+
+
+
+# Save global setting...
+
+# Wave/List view global setting
+gui_cov_show_value -switch false
+
+# Close all empty TopLevel windows
+foreach __top [gui_ekki_get_window_ids -type TopLevel] {
+    if { [llength [gui_ekki_get_window_ids -parent $__top]] == 0} {
+        gui_close_window -window $__top
+    }
+}
+gui_set_loading_session_type noSession
+# DVE View/pane content session: 
+
+
+# Hier 'Hier.1'
+gui_show_window -window ${Hier.1}
+gui_list_set_filter -id ${Hier.1} -list { {Package 0} {All 0} {Process 0} {UnnamedProcess 0} {Function 1} {Block 0} {OVA Unit 0} {LeafScCell 0} {LeafVlgCell 0} {Interface 1} {PowSwitch 0} {LeafVhdCell 0} {$unit 0} {NamedBlock 0} {Task 1} {VlgPackage 0} {ClassDef 0} {VirtIsoCell 0} }
+gui_list_set_filter -id ${Hier.1} -text {*}
+gui_hier_list_init -id ${Hier.1}
+gui_change_design -id ${Hier.1} -design V1
+catch {gui_list_expand -id ${Hier.1} frm_tb_top}
+catch {gui_list_select -id ${Hier.1} {frm_tb_top.alu_i}}
+gui_view_scroll -id ${Hier.1} -vertical -set 0
+gui_view_scroll -id ${Hier.1} -horizontal -set 0
+
+# Data 'Data.1'
+gui_list_set_filter -id ${Data.1} -list { {Buffer 1} {Input 1} {Others 1} {Linkage 1} {Output 1} {LowPower 1} {Parameter 1} {All 1} {Aggregate 1} {Event 1} {Assertion 1} {Constant 1} {Interface 1} {Signal 1} {$unit 1} {Inout 1} {Variable 1} }
+gui_list_set_filter -id ${Data.1} -text {*}
+gui_list_show_data -id ${Data.1} {frm_tb_top.alu_i}
+gui_view_scroll -id ${Data.1} -vertical -set 0
+gui_view_scroll -id ${Data.1} -horizontal -set 0
+gui_view_scroll -id ${Hier.1} -vertical -set 0
+gui_view_scroll -id ${Hier.1} -horizontal -set 0
+
+# Source 'Source.1'
+gui_src_value_annotate -id ${Source.1} -switch false
+gui_set_env TOGGLE::VALUEANNOTATE 0
+gui_open_source -id ${Source.1}  -replace -active frm_tb_top /nfs/cadv1/bhunter/ostut/verif/frm/../../verif/frm/frm_tb_top.sv
+gui_view_scroll -id ${Source.1} -vertical -set 391
+gui_src_set_reusable -id ${Source.1}
+
+# View 'Wave.1'
+gui_wv_sync -id ${Wave.1} -switch false
+set groupExD [gui_get_pref_value -category Wave -key exclusiveSG]
+gui_set_pref_value -category Wave -key exclusiveSG -value {false}
+set origWaveHeight [gui_get_pref_value -category Wave -key waveRowHeight]
+gui_list_set_height -id Wave -height 25
+set origGroupCreationState [gui_list_create_group_when_add -wave]
+gui_list_create_group_when_add -wave -disable
+gui_marker_set_ref -id ${Wave.1}  C1
+gui_wv_zoom_timerange -id ${Wave.1} 5352.416 7018.219
+gui_list_add_group -id ${Wave.1} -after {New Group} {frm_i}
+gui_list_add_group -id ${Wave.1}  -after frm_i {frm_i|alu_i}
+gui_list_show_data -id ${Wave.1} 
+gui_list_select -id ${Wave.1} {frm_tb_top.frm_i.frame_bp }
+gui_seek_criteria -id ${Wave.1} {Any Edge}
+
+
+
+gui_set_env TOGGLE::DEFAULT_WAVE_WINDOW ${Wave.1}
+gui_set_pref_value -category Wave -key exclusiveSG -value $groupExD
+gui_list_set_height -id Wave -height $origWaveHeight
+if {$origGroupCreationState} {
+	gui_list_create_group_when_add -wave -enable
+}
+if { $groupExD } {
+ gui_msg_report -code DVWW028
+}
+gui_list_set_filter -id ${Wave.1} -list { {Buffer 1} {Input 1} {Others 1} {Linkage 1} {Output 1} {Parameter 1} {All 1} {Aggregate 1} {Event 1} {Assertion 1} {Constant 1} {Interface 1} {Signal 1} {$unit 1} {Inout 1} {Variable 1} }
+gui_list_set_filter -id ${Wave.1} -text {*}
+gui_list_set_insertion_bar  -id ${Wave.1} -group frm_i  -position in
+
+gui_marker_move -id ${Wave.1} {C1} 5936
+gui_view_scroll -id ${Wave.1} -vertical -set 0
+gui_show_grid -id ${Wave.1} -enable false
+# Restore toplevel window zorder
+# The toplevel window could be closed if it has no view/pane
+if {[gui_exist_window -window ${TopLevel.1}]} {
+	gui_set_active_window -window ${TopLevel.1}
+	gui_set_active_window -window ${Wave.1}
+}
+#</Session>
+
diff --git a/verif/frm/alu_wrapper.sv b/verif/frm/alu_wrapper.sv
new file mode 100644
index 0000000..d08e04d
--- /dev/null
+++ b/verif/frm/alu_wrapper.sv
@@ -0,0 +1,38 @@
+
+// **********************************************************************
+// *
+// * legal mumbo jumbo
+// *
+// * Copyright 2013,
+// * (utg v0.8.2)
+// ***********************************************************************
+// File:   alutb_tb_top.sv
+// Author: bhunter
+/* About:  Wraps the ALU block to make the testbench look cleaner
+ *************************************************************************/
+
+module alu_wrapper(input logic tb_clk,
+                   tb_rst_n,
+                   ctx_intf ctx_i,
+						 alu_intf alu_i,
+						 frm_intf frm_i);
+
+   // obj: alu
+   alu dut(// Outputs
+           .ctx_out                     (ctx_i.out[7:0]),
+           .frame                       (frm_i.frame),
+           .frame_bp                    (frm_i.frame_bp),
+           .frame_data                  (frm_i.frame_data[31:0]),
+           .alu_ready                   (alu_i.ready),
+           .alu_result                  (alu_i.result[31:0]),
+           // Inputs
+           .alu_ctl                     (alu_i.ctl),
+           .alu_dat                     (alu_i.dat[7:0]),
+           .clk                         (tb_clk),
+           .ctx_in                      (ctx_i.in[7:0]),
+           .ctx_val                     (ctx_i.val),
+           .frame_len                   (frm_i.frame_len[4:0]),
+           .frame_len_val               (frm_i.frame_len_val),
+           .rst_n                       (tb_rst_n));
+
+endmodule
diff --git a/verif/frm/frm.flist b/verif/frm/frm.flist
new file mode 100644
index 0000000..fefe056
--- /dev/null
+++ b/verif/frm/frm.flist
@@ -0,0 +1,8 @@
++incdir+../../verif/frm
++incdir+../../verif/hdl
++incdir+../../verif/frm/tests
+../../verif/frm/alu_wrapper.sv
+../../verif/frm/frm_tb_top.sv
+../../verif/frm/tests/basic.sv
+../../verif/frm/tests/base_test.sv
+
diff --git a/verif/frm/frm_tb_top.sv b/verif/frm/frm_tb_top.sv
new file mode 100644
index 0000000..6a35c44
--- /dev/null
+++ b/verif/frm/frm_tb_top.sv
@@ -0,0 +1,78 @@
+
+// **********************************************************************
+// *
+// * legal mumbo jumbo
+// *
+// * (c) 2013
+// * (utg v1.0)
+// ***********************************************************************
+// File:   frm_tb_top.sv
+// Author: bhunter
+/* About:  <description>
+ *************************************************************************/
+
+
+// (`includes go here)
+
+import uvm_pkg::*;
+// (other imports go here)
+
+`include "cn_msg_hdl.vh"
+
+// package: frm_tb_top
+// Top-level testbench
+module frm_tb_top;
+
+   //----------------------------------------------------------------------------------------
+   // Group: Interfaces
+
+   // obj: tb_clk_i
+   // Testbench clock interface
+   cn_clk_intf tb_clk_i();
+   wire tb_clk = tb_clk_i.clk;
+
+   // obj: tb_rst_i
+   // Testbench reset interface
+   cn_rst_intf tb_rst_i();
+   wire tb_rst_n = tb_rst_i.rst_n;
+
+	// obj: frm_i
+   // The frm_intf instance.
+   frm_intf frm_i(.clk(tb_clk),
+                  .rst_n(tb_rst_n));
+
+   // field: ctx_i
+   // The <ctx_intf> instance.
+   ctx_intf ctx_i(.clk(tb_clk), .rst_n(tb_rst_n));
+
+   // field: alu_i
+   // The <alu_intf> instance
+   alu_intf alu_i(.clk(tb_clk), .rst_n(tb_rst_n));
+
+   //----------------------------------------------------------------------------------------
+   // Group: DUT
+   // (Instantiate the DUT and other modules here)
+   alu_wrapper alu_wrapper(/*AUTOINST*/
+                           // Interfaces
+                           .ctx_i               (ctx_i),
+                           .alu_i               (alu_i),
+                           .frm_i               (frm_i),
+                           // Inputs
+                           .tb_clk              (tb_clk),
+                           .tb_rst_n            (tb_rst_n));
+
+   //----------------------------------------------------------------------------------------
+   // Group: Procedural Blocks
+   function void pre_run_test();
+      `cn_set_intf(virtual cn_clk_intf    , "cn_pkg::clk_intf" , "tb_clk_vi", tb_clk_i);
+      `cn_set_intf(virtual cn_rst_intf    , "cn_pkg::rst_intf" , "tb_rst_vi", tb_rst_i);
+      `cn_set_intf(virtual ctx_intf.drv_mp, "ctx_pkg::ctx_intf", "ctx_vi"   , ctx_i.drv_mp);
+      `cn_set_intf(virtual ctx_intf.mon_mp, "ctx_pkg::ctx_intf", "ctx_vi"   , ctx_i.mon_mp);
+      `cn_set_intf(virtual alu_intf.drv_mp, "alu_pkg::alu_intf", "drv_vi"   , alu_i.drv_mp)
+      `cn_set_intf(virtual alu_intf.mon_mp, "alu_pkg::alu_intf", "mon_vi"   , alu_i.mon_mp)
+      `cn_set_intf(virtual frm_intf.drv_mp, "frm_pkg::frm_intf", "drv_vi"   , frm_i.drv_mp);
+      `cn_set_intf(virtual frm_intf.mon_mp, "frm_pkg::frm_intf", "mon_vi"   , frm_i.mon_mp);
+   endfunction : pre_run_test
+
+   `include "tb_common.v"
+endmodule : frm_tb_top
diff --git a/verif/frm/rtl.flist b/verif/frm/rtl.flist
new file mode 100644
index 0000000..cdeb685
--- /dev/null
+++ b/verif/frm/rtl.flist
@@ -0,0 +1,5 @@
++incdir+../../rtl/include
+-y ../../verif/hdl
+-y ../../rtl/include
+-y ../../rtl/alu
+
diff --git a/verif/frm/tb.py b/verif/frm/tb.py
new file mode 100644
index 0000000..72bfd95
--- /dev/null
+++ b/verif/frm/tb.py
@@ -0,0 +1,8 @@
+# Add vkit dependencies *in order*
+VKITS = ['cn', 'global', 'csr', 'ctx', 'alu', 'frm']
+
+# Add testbench flists
+FLISTS = ['frm.flist', 'rtl.flist']
+
+# Testbench Top-level
+TB_TOP = 'frm_tb_top'
diff --git a/verif/frm/tests/base_test.sv b/verif/frm/tests/base_test.sv
new file mode 100644
index 0000000..e6756a1
--- /dev/null
+++ b/verif/frm/tests/base_test.sv
@@ -0,0 +1,152 @@
+
+// **********************************************************************
+// *
+// * legal mumbo jumbo
+// *
+// * (c) 2013
+// * (utg v1.0)
+// ***********************************************************************
+// File:   base_test.sv
+// Author: bhunter
+/* About:  <description>
+ *************************************************************************/
+
+`ifndef __BASE_TEST_SV__
+   `define __BASE_TEST_SV__
+
+// (`includes go here)
+
+// class: base_test_c
+// (Describe me)
+class base_test_c extends uvm_test;
+   `uvm_component_utils_begin(base_test_c)
+      `uvm_field_object(cfg, UVM_ALL_ON)
+      `uvm_field_object(reg_block, UVM_ALL_ON)
+   `uvm_component_utils_end
+
+   //----------------------------------------------------------------------------------------
+   // Group: Configuration Fields
+
+   //----------------------------------------------------------------------------------------
+   // Group: Fields
+
+   // var: cfg
+   // The configuration class
+   frm_pkg::cfg_c cfg;
+
+   // var: reg_block
+   // The register block (reference to the one in cfg)
+   alu_csr_pkg::reg_block_c reg_block;
+
+   // var: env
+   // The frm environment
+   frm_pkg::env_c env;
+
+   // var: tb_clk_drv
+   // The testbench clock driver
+   cn_pkg::clk_drv_c tb_clk_drv;
+
+   // var: tb_rst_drv
+   // The testbench reset driver
+   cn_pkg::rst_drv_c tb_rst_drv;
+
+   //----------------------------------------------------------------------------------------
+   // Group: Methods
+
+   //----------------------------------------------------------------------------------------
+   // Group: Methods
+   function new(string name="frm",
+                uvm_component parent=null);
+      super.new(name, parent);
+   endfunction : new
+
+   ////////////////////////////////////////////
+   // func: build_phase
+   virtual function void build_phase(uvm_phase phase);
+      super.build_phase(phase);
+      // Create the global environment
+      global_pkg::env = global_pkg::env_c::type_id::create("global_env", this);
+
+      // create the random configurations
+      cfg = frm_pkg::cfg_c::type_id::create("cfg");
+
+      // create reg_block
+      if(reg_block == null) begin
+         reg_block = alu_csr_pkg::reg_block_c::type_id::create("reg_block", this);
+         reg_block.build();
+         reg_block.lock_model();
+      end
+
+      // randomize configs & CSRs
+      cfg.reg_block = reg_block;
+
+      // randomize the cfg and CSR fields
+      randomize_cfg();
+
+      uvm_config_db#(uvm_object)::set(this, "*", "reg_block", reg_block);
+      uvm_config_db#(uvm_object)::set(this, "*", "cfg",       cfg      );
+
+      env = frm_pkg::env_c::type_id::create("env", this);
+
+      // Not randomized by default.  Derived tests can randomize in end_of_elaboration_phase.
+      // Create the clock driver
+      uvm_config_db#(string)::set(this, "tb_clk_drv", "intf_name", "tb_clk_vi");
+      uvm_config_db#(int)::set(this, "tb_clk_drv", "period_ps", 2000);
+      tb_clk_drv = cn_pkg::clk_drv_c::type_id::create("tb_clk_drv", this);
+
+      // Create the reset driver
+      uvm_config_db#(string)::set(this,"tb_rst_drv", "intf_name",     "tb_rst_vi");
+      uvm_config_db#(int)::set(this, "tb_rst_drv", "reset_time_ps", 20000);
+      tb_rst_drv = cn_pkg::rst_drv_c::type_id::create("tb_rst_drv", this);
+
+      // set CTX interface name
+      uvm_config_db#(string)::set(this, "env.ctx_agent", "intf_name", "ctx_vi");
+   endfunction : build_phase
+
+   ////////////////////////////////////////////
+   // func: connect_phase
+   virtual function void connect_phase(uvm_phase phase);
+      super.connect_phase(phase);
+      if(reg_block.get_parent() == null) begin
+         ctx_pkg::reg_adapter_c ctx_adapter = ctx_pkg::reg_adapter_c::type_id::create("ctx_reg_adapter", , get_full_name());
+         reg_block.csr_map.set_sequencer(env.ctx_agent.sqr, ctx_adapter);
+         reg_block.csr_map.set_auto_predict(1);
+      end
+   endfunction : connect_phase
+
+   ////////////////////////////////////////////
+   // func: end_of_elaboration_phase
+   virtual function void end_of_elaboration_phase(uvm_phase phase);
+      super.end_of_elaboration_phase(phase);
+   endfunction : end_of_elaboration_phase
+
+   ////////////////////////////////////////////
+   // func: run_phase
+   virtual task run_phase(uvm_phase phase);
+      super.run_phase(phase);
+   endtask : run_phase
+
+
+   ////////////////////////////////////////////
+   virtual task configure_phase(uvm_phase phase);
+      uvm_status_e status;
+
+      phase.raise_objection(this);
+
+      reg_block.update(status);
+      // (alternatively, start a configuration sequence)
+
+      // ensure that all transactions complete
+      #(100ns);
+
+      phase.drop_objection(this);
+   endtask : configure_phase
+
+   ////////////////////////////////////////////
+   virtual function void randomize_cfg();
+      randomize(cfg);
+   endfunction : randomize_cfg
+
+endclass : base_test_c
+
+`endif // __BASE_TEST_SV__
diff --git a/verif/frm/tests/basic.sv b/verif/frm/tests/basic.sv
new file mode 100644
index 0000000..a5a35c2
--- /dev/null
+++ b/verif/frm/tests/basic.sv
@@ -0,0 +1,68 @@
+
+// **********************************************************************
+// *
+// * legal mumbo jumbo
+// *
+// * (c) 2013
+// * (utg v1.0)
+// ***********************************************************************
+// File:   basic.sv
+// Author: bhunter
+/* About:  <description>
+ *************************************************************************/
+
+`ifndef __BASIC_SV__
+   `define __BASIC_SV__
+
+   `include "base_test.sv"
+
+// class: basic_test_c
+// (Describe me)
+class basic_test_c extends base_test_c;
+   `uvm_component_utils_begin(basic_test_c)
+   `uvm_component_utils_end
+
+   //----------------------------------------------------------------------------------------
+   // Group: Configuration Fields
+
+   //----------------------------------------------------------------------------------------
+   // Group: Fields
+
+   //----------------------------------------------------------------------------------------
+   // Group: Methods
+   function new(string name="basic",
+                uvm_component parent=null);
+      super.new(name, parent);
+   endfunction : new
+
+   ////////////////////////////////////////////
+   // func: build_phase
+   virtual function void build_phase(uvm_phase phase);
+      super.build_phase(phase);
+      uvm_config_db#(uvm_object_wrapper)::set(this, "env.vsqr.main_phase",
+                                              "default_sequence",
+                                              frm_pkg::exer_vseq_c::type_id::get());
+   endfunction : build_phase
+
+   ////////////////////////////////////////////
+   // func: connect_phase
+   virtual function void connect_phase(uvm_phase phase);
+      super.connect_phase(phase);
+   endfunction : connect_phase
+
+   ////////////////////////////////////////////
+   // func: end_of_elaboration_phase
+   virtual function void end_of_elaboration_phase(uvm_phase phase);
+      super.end_of_elaboration_phase(phase);
+   endfunction : end_of_elaboration_phase
+
+   ////////////////////////////////////////////
+   // func: run_phase
+   virtual task run_phase(uvm_phase phase);
+      super.run_phase(phase);
+   endtask : run_phase
+
+endclass : basic_test_c
+
+`endif // __BASIC_SV__
+
diff --git a/verif/vkits/alu/alu.flist b/verif/vkits/alu/alu.flist
new file mode 100644
index 0000000..a67307d
--- /dev/null
+++ b/verif/vkits/alu/alu.flist
@@ -0,0 +1,3 @@
++incdir+../../verif/vkits/alu
+../../verif/vkits/alu/alu_intf.sv
+../../verif/vkits/alu/alu_pkg.sv
diff --git a/verif/vkits/alu/alu_agent.sv b/verif/vkits/alu/alu_agent.sv
new file mode 100644
index 0000000..4a25414
--- /dev/null
+++ b/verif/vkits/alu/alu_agent.sv
@@ -0,0 +1,132 @@
+
+// **********************************************************************
+// *
+// * legal mumbo jumbo
+// *
+// * (c) 2013
+// * (utg v1.0)
+// ***********************************************************************
+// File:   alu_agent.sv
+// Author: bhunter
+/* About:  <description>
+ *************************************************************************/
+
+`ifndef __ALU_AGENT_SV__
+   `define __ALU_AGENT_SV__
+
+`include "alu_drv.sv"
+`include "alu_mon.sv"
+`include "alu_sqr.sv"
+`include "alu_item.sv"
+`include "alu_pred.sv"
+
+// class: agent_c
+// (Description)
+class agent_c extends uvm_agent;
+   `uvm_component_utils_begin(alu_pkg::agent_c)
+      `uvm_field_enum(uvm_active_passive_enum, is_active, UVM_ALL_ON)
+	   `uvm_field_int(dev_ref_model, UVM_ALL_ON)
+   `uvm_component_utils_end
+
+   //----------------------------------------------------------------------------------------
+   // Group: Configuration Fields
+
+   // var: is_active
+   // When set to UVM_ACTIVE, the sqr and drv will be present.
+   uvm_active_passive_enum is_active = UVM_ACTIVE;
+
+   // field: dev_ref_model
+   // When set to 1, the predictor operates in reference mode and the monitor/driver are not enabled
+   bit dev_ref_model = 0;
+
+   //----------------------------------------------------------------------------------------
+   // Group: TLM Ports
+
+   // field: monitored_item_port
+   // All monitored transactions go out here
+   uvm_analysis_port #(item_c) monitored_item_port;
+
+   // field: monitored_result_port
+   // All monitored results go out here
+   uvm_analysis_port #(result_t) monitored_result_port;
+
+   //----------------------------------------------------------------------------------------
+   // Group: Fields
+
+   // vars: Driver, monitor, and sequencer
+   // Driver, monitor, and sequencer found in most agents
+   sqr_c sqr;
+   drv_c drv;
+   mon_c mon;
+
+   // var: pred
+   // Predictor
+   pred_c pred;
+
+   //----------------------------------------------------------------------------------------
+   // Group: Methods
+   function new(string name="[name]",
+                uvm_component parent=null);
+      super.new(name, parent);
+   endfunction : new
+
+   ////////////////////////////////////////////
+   // func: build_phase
+   virtual function void build_phase(uvm_phase phase);
+      super.build_phase(phase);
+
+      if(!dev_ref_model)
+         mon = mon_c::type_id::create("mon", this);
+      if(is_active) begin
+         if(!dev_ref_model)
+            drv = drv_c::type_id::create("drv", this);
+         sqr = sqr_c::type_id::create("sqr", this);
+      end
+
+      monitored_item_port = new("monitored_item_port", this);
+      monitored_result_port = new("monitored_result_port", this);
+
+      pred = pred_c::type_id::create("pred", this);
+      uvm_config_db#(int)::set(this, "pred", "dev_ref_model", dev_ref_model);
+   endfunction : build_phase
+
+   ////////////////////////////////////////////
+   // func: connect_phase
+   virtual function void connect_phase(uvm_phase phase);
+      super.connect_phase(phase);
+
+      if(!dev_ref_model) begin
+	      if(is_active) begin
+	         drv.seq_item_port.connect(sqr.seq_item_export);
+            mon.monitored_result_port.connect(sqr.monitored_result_exp);
+			end
+
+	      // connect to the monitor's analysis ports
+	      mon.monitored_item_port.connect(monitored_item_port);
+	      mon.monitored_result_port.connect(monitored_result_port);
+
+	      mon.monitored_item_port.connect(pred.monitored_item_imp);
+	      mon.monitored_result_port.connect(pred.monitored_result_imp);
+      end else begin
+         // as a reference model
+         pred.seq_item_port.connect(sqr.seq_item_export);
+         pred.monitored_item_port.connect(monitored_item_port);
+         pred.monitored_result_port.connect(monitored_result_port);
+      end
+   endfunction : connect_phase
+
+   ////////////////////////////////////////////
+   // func: end_of_elaboration_phase
+   virtual function void end_of_elaboration_phase(uvm_phase phase);
+      super.end_of_elaboration_phase(phase);
+   endfunction : end_of_elaboration_phase
+
+   ////////////////////////////////////////////
+   // func: run_phase
+   virtual task run_phase(uvm_phase phase);
+      super.run_phase(phase);
+   endtask : run_phase
+
+endclass : agent_c
+
+`endif // __ALU_AGENT_SV__
diff --git a/verif/vkits/alu/alu_drv.sv b/verif/vkits/alu/alu_drv.sv
new file mode 100644
index 0000000..d5b4245
--- /dev/null
+++ b/verif/vkits/alu/alu_drv.sv
@@ -0,0 +1,110 @@
+
+// **********************************************************************
+// *
+// * legal mumbo jumbo
+// *
+// * (c) 2013
+// * (utg v1.0)
+// ***********************************************************************
+// File:   alu_drv.sv
+// Author: bhunter
+/* About:  <description>
+ *************************************************************************/
+
+`ifndef __ALU_DRV_SV__
+   `define __ALU_DRV_SV__
+
+`include "alu_item.sv"
+
+// class: drv_c
+// (Describe me)
+class drv_c extends uvm_driver#(item_c);
+   `uvm_component_utils_begin(alu_pkg::drv_c)
+      `uvm_field_string(intf_name, UVM_ALL_ON)
+   `uvm_component_utils_end
+
+   //----------------------------------------------------------------------------------------
+   // Group: Configuration Fields
+
+   // field: intf_name
+   // The name of the virtual interface that we'll hook up to
+   string intf_name = "drv_vi";
+
+   //----------------------------------------------------------------------------------------
+   // Group: TLM Ports
+
+   //----------------------------------------------------------------------------------------
+   // Group: Fields
+
+   // field: drv_vi
+   // Virtual interface to drive on
+   virtual alu_intf.drv_mp drv_vi;
+
+   //----------------------------------------------------------------------------------------
+   // Group: Methods
+   function new(string name="[name]",
+                uvm_component parent=null);
+      super.new(name, parent);
+   endfunction : new
+
+   ////////////////////////////////////////////
+   // func: build_phase
+   virtual function void build_phase(uvm_phase phase);
+      super.build_phase(phase);
+      `cn_get_intf(virtual alu_intf.drv_mp, "alu_pkg::alu_intf", intf_name, drv_vi)
+   endfunction : build_phase
+
+   ////////////////////////////////////////////
+   // func: connect_phase
+   virtual function void connect_phase(uvm_phase phase);
+      super.connect_phase(phase);
+   endfunction : connect_phase
+
+   ////////////////////////////////////////////
+   // func: end_of_elaboration_phase
+   virtual function void end_of_elaboration_phase(uvm_phase phase);
+      super.end_of_elaboration_phase(phase);
+   endfunction : end_of_elaboration_phase
+
+   ////////////////////////////////////////////
+   // func: run_phase
+   virtual task run_phase(uvm_phase phase);
+      result_t prev_result;
+
+      drv_vi.reset();
+      driver();
+   endtask : run_phase
+
+   ////////////////////////////////////////////
+   // func: driver
+   // Drive transactions by packing into an array of bytes, then sending two 4-bit cycles
+   // for each byte. Then wait for the response and send it back.
+   task driver();
+      byte unsigned stream[];
+
+      @(posedge drv_vi.drv_cb.rst_n);
+      forever begin
+         seq_item_port.get_next_item(req);
+
+         req.pack_bytes(stream);
+         foreach(stream[x]) begin
+            @(drv_vi.drv_cb);
+
+            drv_vi.drv_cb.ctl <= (x == 0)? 1'b1 : 1'b0;
+            drv_vi.drv_cb.dat <= stream[x];
+         end
+
+         // wait 1 clock, then clear the bus
+         @(drv_vi.drv_cb);
+         drv_vi.reset();
+
+         // wait for result
+         @(posedge drv_vi.drv_cb.ready);
+         req.result = drv_vi.drv_cb.result;
+         seq_item_port.item_done(req);
+      end
+   endtask : driver
+
+endclass : drv_c
+
+`endif // __ALU_DRV_SV__
diff --git a/verif/vkits/alu/alu_intf.sv b/verif/vkits/alu/alu_intf.sv
new file mode 100644
index 0000000..e9301f8
--- /dev/null
+++ b/verif/vkits/alu/alu_intf.sv
@@ -0,0 +1,109 @@
+
+// **********************************************************************
+// *
+// * legal mumbo jumbo
+// *
+// * (c) 2013
+// * (utg v1.0)
+// ***********************************************************************
+// File:   alu_intf.sv
+// Author: bhunter
+/* About:  <description>
+ *************************************************************************/
+
+`ifndef __ALU_INTF_SV__
+   `define __ALU_INTF_SV__
+
+interface alu_intf(input logic clk,
+                   input logic rst_n);
+   import uvm_pkg::*;
+
+   //----------------------------------------------------------------------------------------
+   // Group: Signals
+
+   // var: ctl
+   // Asserted only on the first cycle of a new transaction, while dat contains the operation
+   logic        ctl;
+
+   // var: dat
+   // The input data nibble that contains the operation and operands
+   logic [7:0]  dat;
+
+   // var: ready
+   // The output of the ALU that indicates when the result data is valid
+   logic        ready;
+
+   // var: result
+   // The 32-bit result data
+   logic [31:0] result;
+
+   //----------------------------------------------------------------------------------------
+   // Group: Clocking blocks
+
+   // var: drv_cb
+   // A clocking block that represents how the environment's driver sees the interface
+   clocking drv_cb @(posedge clk);
+      output    ctl;
+      output    dat;
+      input     ready;
+      input     result;
+      input     rst_n;
+   endclocking : drv_cb
+
+   // var: mon_cb
+   // A clocking block that represents how the environment's monitor sees the interface
+   clocking mon_cb @(posedge clk);
+      input     ctl;
+      input     dat;
+      input     ready;
+      input     result;
+      input     rst_n;
+   endclocking : mon_cb
+
+   //----------------------------------------------------------------------------------------
+   // Group: Modports
+
+   modport drv_mp(clocking drv_cb,
+                  import reset);
+   modport mon_mp(clocking mon_cb);
+
+   //----------------------------------------------------------------------------------------
+   // Group: Methods
+
+   // func: reset
+   // Convenience function for the driver to reset its outputs
+   function void reset();
+      ctl = 0;
+      dat = 8'b0;
+   endfunction : reset
+
+   //----------------------------------------------------------------------------------------
+   // Group: Assertions
+
+   ctl_not_x :
+      assert property(@(posedge clk)
+                      disable iff (~rst_n || rst_n === 1'bx)
+                      (!$isunknown(ctl))) else
+         `cn_err_intf(("ctl signal is an X"))
+
+   dat_not_x :
+      assert property(@(posedge clk)
+                      disable iff (~rst_n || rst_n === 1'bx)
+                      (!$isunknown(dat))) else
+         `cn_err_intf(("dat signal is an X"))
+
+   ready_not_x :
+      assert property(@(posedge clk)
+                      disable iff (~rst_n || rst_n === 1'bx)
+                      (!$isunknown(ready))) else
+         `cn_err_intf(("ready signal is an X"))
+
+   result_not_x :
+      assert property(@(posedge clk)
+                      disable iff (~rst_n || rst_n === 1'bx || ready == 0)
+                      (!$isunknown(result))) else
+         `cn_err_intf(("result signal is an X"))
+
+endinterface : alu_intf
+
+`endif // __ALU_INTF_SV__
diff --git a/verif/vkits/alu/alu_item.sv b/verif/vkits/alu/alu_item.sv
new file mode 100644
index 0000000..261082c
--- /dev/null
+++ b/verif/vkits/alu/alu_item.sv
@@ -0,0 +1,118 @@
+
+// **********************************************************************
+// *
+// * legal mumbo jumbo
+// *
+// * (c) 2013
+// * (utg v1.0)
+// ***********************************************************************
+// File:   alu_item.sv
+// Author: bhunter
+/* About:  <description>
+ *************************************************************************/
+
+`ifndef __ALU_ITEM_SV__
+   `define __ALU_ITEM_SV__
+
+// class: item_c
+// An ALU Transaction as a sequence item
+class item_c extends uvm_sequence_item;
+   //----------------------------------------------------------------------------------------
+   // Group: Types
+   typedef enum bit [7:0] {
+                           ADD_A_B = 0,
+                           SUB_A_B = 1,
+                           SUB_B_A = 2,
+                           MUL_A_B = 3,
+                           DIV_A_B = 4,
+                           DIV_B_A = 5,
+                           INC_A   = 6,
+                           INC_B   = 7,
+                           CLR_RES = 8,
+                           ACCUM   = 9
+                           } operation_e;
+
+   `uvm_object_utils_begin(alu_pkg::item_c)
+      `uvm_field_enum(operation_e, operation, UVM_ALL_ON)
+      `uvm_field_int (alpha,                  UVM_ALL_ON | UVM_NOPACK | UVM_NOCOMPARE)
+      `uvm_field_int (beta,                   UVM_ALL_ON | UVM_NOPACK | UVM_NOCOMPARE)
+   `uvm_object_utils_end
+
+   //----------------------------------------------------------------------------------------
+   // Group: Fields
+
+   // field: operation
+   rand operation_e operation;
+
+   // field: A variable
+   rand bit [15:0] alpha;
+
+   // field: B variable
+   rand bit [15:0] beta;
+
+   // ensure that all operands have legal values
+   constraint protocol_cnstr {
+      (operation == DIV_A_B) -> beta != 0;
+      (operation == DIV_B_A) -> alpha != 0;
+      (operation == SUB_A_B) -> alpha > beta;
+      (operation == SUB_B_A) -> beta > alpha;
+   }
+
+   // field: result
+   // This is the result of the operation, filled in by the driver and sent back with the response
+   result_t result;
+
+   //----------------------------------------------------------------------------------------
+   // Group: Methods
+   function new(string name="item");
+      super.new(name);
+   endfunction : new
+
+   //----------------------------------------------------------------------------------------
+   // func: convert2string
+   // Single-line printing
+   virtual function string convert2string();
+      convert2string = $sformatf("%s A:%04X B:%04X", operation, alpha, beta);
+   endfunction : convert2string
+
+   ////////////////////////////////////////////
+   // func: do_pack
+   virtual function void do_pack(uvm_packer packer);
+      super.do_pack(packer);
+
+      if(operation inside {[ADD_A_B : INC_A], ACCUM})
+         packer.pack_field_int(alpha, 16);
+      if(operation inside {[ADD_A_B : DIV_B_A], INC_B})
+         packer.pack_field_int(beta, 16);
+   endfunction : do_pack
+
+   ////////////////////////////////////////////
+   // func: do_unpack
+   virtual function void do_unpack(uvm_packer packer);
+      super.do_unpack(packer);
+
+      if(operation inside {[ADD_A_B : INC_A], ACCUM})
+         alpha = packer.unpack_field_int(16);
+      if(operation inside {[ADD_A_B : DIV_B_A], INC_B})
+         beta = packer.unpack_field_int(16);
+   endfunction : do_unpack
+
+   ////////////////////////////////////////////
+   // func: do_compare
+   virtual function bit do_compare(uvm_object rhs,
+                                   uvm_comparer comparer);
+      item_c _rhs;
+      $cast(_rhs, rhs);
+      do_compare = super.do_compare(rhs, comparer);
+      if(operation inside {[ADD_A_B : INC_A], ACCUM})
+         do_compare &= comparer.compare_field_int("alpha", alpha, _rhs.alpha, 16);
+      if(operation inside {[ADD_A_B : DIV_B_A], INC_B})
+         do_compare &= comparer.compare_field_int("beta", beta, _rhs.beta, 16);
+   endfunction : do_compare
+
+endclass : item_c
+
+
+
+`endif // __ALU_ITEM_SV__
+
diff --git a/verif/vkits/alu/alu_mon.sv b/verif/vkits/alu/alu_mon.sv
new file mode 100644
index 0000000..87cb5f6
--- /dev/null
+++ b/verif/vkits/alu/alu_mon.sv
@@ -0,0 +1,150 @@
+
+// **********************************************************************
+// *
+// * legal mumbo jumbo
+// *
+// * (c) 2013
+// * (utg v1.0)
+// ***********************************************************************
+// File:   alu_mon.sv
+// Author: bhunter
+/* About:  <description>
+ *************************************************************************/
+
+`ifndef __ALU_MON_SV__
+   `define __ALU_MON_SV__
+
+`include "alu_item.sv"
+
+// class: mon_c
+// Monitors an ALU bus and reports activity.
+class mon_c extends uvm_monitor;
+   `uvm_component_utils_begin(alu_pkg::mon_c)
+      `uvm_field_string(intf_name, UVM_ALL_ON)
+   `uvm_component_utils_end
+
+   //----------------------------------------------------------------------------------------
+   // Group: Configuration Fields
+
+   // field: intf_name
+   // The name of the virtual interface that we'll hook up to
+   string intf_name = "mon_vi";
+
+   //----------------------------------------------------------------------------------------
+   // Group: TLM Ports
+
+   // field: monitored_item_port
+   // All monitored transactions go out here
+   uvm_analysis_port #(item_c) monitored_item_port;
+
+   // field: monitored_result_port
+   // All monitored results go out here
+   uvm_analysis_port #(result_t) monitored_result_port;
+
+   //----------------------------------------------------------------------------------------
+   // Group: Fields
+
+   // field: mon_vi
+   // Virtual interface to monitor
+   virtual alu_intf.mon_mp mon_vi;
+
+   //----------------------------------------------------------------------------------------
+   // Group: Methods
+   function new(string name="mon",
+                uvm_component parent=null);
+      super.new(name, parent);
+   endfunction : new
+
+   ////////////////////////////////////////////
+   // func: build_phase
+   virtual function void build_phase(uvm_phase phase);
+      super.build_phase(phase);
+
+      // get the interface
+      `cn_get_intf(virtual alu_intf.mon_mp, "alu_pkg::alu_intf", intf_name, mon_vi)
+
+      monitored_item_port = new("monitored_item_port", this);
+      monitored_result_port = new("monitored_result_port", this);
+   endfunction : build_phase
+
+   ////////////////////////////////////////////
+   // func: run_phase
+   virtual task run_phase(uvm_phase phase);
+      forever begin
+         @(posedge mon_vi.mon_cb.rst_n);
+
+         fork
+            monitor_item();
+            monitor_result();
+            @(negedge mon_vi.mon_cb.rst_n);
+         join_any
+
+         `cn_info(("Stopping monitor due to reset."))
+         disable fork;
+      end
+
+   endtask : run_phase
+
+   ////////////////////////////////////////////
+   // func: monitor_item
+   // Watch and broadcast the transactions on the bus
+   virtual task monitor_item();
+      int num_clocks;
+      byte unsigned data[];
+      item_c item;
+
+      forever begin
+         // wait for the rising edge of the control
+         @(posedge mon_vi.mon_cb.ctl);
+
+         // determine how many clocks are in this item
+         case(mon_vi.mon_cb.dat)
+            // 5-cycle transactions
+            item_c::ADD_A_B, item_c::SUB_A_B, item_c::SUB_B_A,
+            item_c::MUL_A_B, item_c::DIV_A_B, item_c::DIV_B_A :
+               num_clocks = 5;
+
+            // 3-cycle transactions
+            item_c::INC_A, item_c::INC_B, item_c::ACCUM :
+               num_clocks = 3;
+
+            // 1-cycle transactions
+            item_c::CLR_RES :
+               num_clocks = 1;
+
+            default:
+               `cn_err(("Unknown operation type: %02X", mon_vi.mon_cb.dat))
+         endcase
+
+         // collect the data for each cycle
+         data = new[num_clocks];
+         for(int clk=0; clk < num_clocks; clk++) begin
+            data[clk] = mon_vi.mon_cb.dat;
+            @(mon_vi.mon_cb);
+            if(mon_vi.mon_cb.ctl == 1)
+               `cn_err(("The CTL signal is high during a transaction that should have been %0d clocks.", num_clocks))
+         end
+
+         // create the transaction, unpack into it, and write it out the monitored_item_port
+         item = item_c::type_id::create("mon_item");
+         item.unpack_bytes(data);
+         `cn_info(("Monitored: %s", item.convert2string()))
+         monitored_item_port.write(item);
+      end
+   endtask : monitor_item
+
+   ////////////////////////////////////////////
+   // func: monitor_result
+   // Monitor the ready and result signal and broadcast it out the monitored_result_port
+   virtual task monitor_result();
+      forever begin
+         @(posedge mon_vi.mon_cb.ready);
+         `cn_info(("Monitored Result: %08X", mon_vi.mon_cb.result))
+         monitored_result_port.write(mon_vi.mon_cb.result);
+      end
+   endtask : monitor_result
+
+endclass : mon_c
+
+`endif // __ALU_MON_SV__
+
diff --git a/verif/vkits/alu/alu_pkg.sv b/verif/vkits/alu/alu_pkg.sv
new file mode 100644
index 0000000..ba048e3
--- /dev/null
+++ b/verif/vkits/alu/alu_pkg.sv
@@ -0,0 +1,49 @@
+
+// **********************************************************************
+// *
+// * legal mumbo jumbo
+// *
+// * (c) 2013
+// * (utg v1.0)
+// ***********************************************************************
+// File:   alu_pkg.sv
+// Author: bhunter
+/* About:  alu package
+ *************************************************************************/
+
+`include "uvm_macros.svh"
+
+// package: alu_pkg
+package alu_pkg;
+
+   //----------------------------------------------------------------------------------------
+   // Group: Imports
+   import uvm_pkg::*;
+
+   //----------------------------------------------------------------------------------------
+   // Group: Imp Declarations
+
+   `uvm_analysis_imp_decl(_item)
+   `uvm_analysis_imp_decl(_result)
+
+   //----------------------------------------------------------------------------------------
+   // Group: Types
+
+   // type: result_t
+   // All ALU results are of this type
+	typedef logic [31:0] result_t;
+
+   //----------------------------------------------------------------------------------------
+   // Group: Includes
+
+`include "alu_agent.sv"
+`include "alu_drv.sv"
+`include "alu_item.sv"
+`include "alu_mon.sv"
+`include "alu_pred.sv"
+`include "alu_seq_lib.sv"
+`include "alu_sqr.sv"
+
+endpackage : alu_pkg
+
+
diff --git a/verif/vkits/alu/alu_pred.sv b/verif/vkits/alu/alu_pred.sv
new file mode 100644
index 0000000..d850784
--- /dev/null
+++ b/verif/vkits/alu/alu_pred.sv
@@ -0,0 +1,150 @@
+
+// **********************************************************************
+// *
+// * legal mumbo jumbo
+// *
+// * (c) 2013
+// * (utg v1.0)
+// ***********************************************************************
+// File:   alu_pred.sv
+// Author: bhunter
+/* About:  <description>
+ *************************************************************************/
+
+`ifndef __ALU_PRED_SV__
+   `define __ALU_PRED_SV__
+
+`include "alu_item.sv"
+
+class pred_c extends uvm_component;
+   `uvm_component_utils_begin(pred_c)
+      `uvm_field_object(reg_block,   UVM_REFERENCE)
+      `uvm_field_int(dev_ref_model, UVM_ALL_ON)
+   `uvm_component_utils_end
+
+   //----------------------------------------------------------------------------------------
+   // Group: Configuration Fields
+
+   // field: reg_block
+   // Auto-generated Register Block
+   alu_csr_pkg::reg_block_c reg_block;
+
+   // field: dev_ref_model
+   // When set, operates in reference model mode
+   bit dev_ref_model = 0;
+
+   //----------------------------------------------------------------------------------------
+   // Group: TLM Ports
+
+   // field: monitored_item_imp
+   uvm_analysis_imp_item #(item_c, pred_c) monitored_item_imp;
+
+   // field: monitored_result_imp
+   uvm_analysis_imp_result #(result_t, pred_c) monitored_result_imp;
+
+   // field: seq_item_port
+   // As a reference model, pulls transactions from the sequencer
+   uvm_seq_item_pull_port #(item_c) seq_item_port;
+
+   // field: monitored_item_port
+   // As a reference model, drives out the transactions that were "driven"
+   uvm_analysis_port #(item_c) monitored_item_port;
+
+   // field: monitored_result_port
+   // As a reference model, drives out the results that were "seen"
+   uvm_analysis_port #(result_t) monitored_result_port;
+
+   //----------------------------------------------------------------------------------------
+   // Group: Fields
+
+   // field: result
+   // The result of the monitored transaction is stored here and checked with the received result
+   result_t result = 0;
+
+   // field:
+   //----------------------------------------------------------------------------------------
+   // Group: Methods
+   function new(string name="pred",
+                uvm_component parent=null);
+      super.new(name, parent);
+   endfunction : new
+
+   ////////////////////////////////////////////
+   // func: build_phase
+   function void build_phase(uvm_phase phase);
+      super.build_phase(phase);
+
+      if(dev_ref_model) begin
+         seq_item_port = new("seq_item_port", this);
+         monitored_item_port = new("monitored_item_port", this);
+         monitored_result_port = new("monitored_result_port", this);
+      end else begin
+         monitored_item_imp = new("monitored_item_imp", this);
+         monitored_result_imp = new("monitored_result_imp", this);
+      end
+
+   endfunction : build_phase
+
+   ////////////////////////////////////////////
+   // func: main_phase
+   task main_phase(uvm_phase phase);
+      if(dev_ref_model) begin
+         item_c item;
+         forever begin
+            seq_item_port.get_next_item(item);
+
+            `cn_dbg(30, ("Dev_Ref_Model: %s", item.convert2string()))
+
+            // create a delay that models the transmission of the transaction
+            #5ns;
+            monitored_item_port.write(item);
+
+            // calculate result
+            write_item(item);
+
+            // create a delay that models the ALU calulation speed
+            #15ns;
+
+            // send back the result
+            write_result(result);
+            item.result = result;
+            seq_item_port.item_done(item);
+            monitored_result_port.write(result);
+         end
+      end
+   endtask : main_phase
+
+   ////////////////////////////////////////////
+   // func: write_item
+   // Accepts ALU transactions and sets the next expected result
+   virtual function void write_item(item_c _item);
+      bit [7:0] k_val = reg_block.CONST.K_VAL.value;
+      bit [7:0] c_val = reg_block.CONST.C_VAL.value;
+
+      case(_item.operation)
+         item_c::ADD_A_B :  result = k_val * (_item.alpha + _item.beta) + c_val;
+         item_c::SUB_A_B :  result = k_val * (_item.alpha - _item.beta) + c_val;
+         item_c::SUB_B_A :  result = k_val * (_item.beta  - _item.alpha) + c_val;
+         item_c::MUL_A_B :  result = k_val * (_item.alpha * _item.beta) + c_val;
+         item_c::DIV_A_B :  result = k_val * (_item.alpha / _item.beta) + c_val;
+         item_c::DIV_B_A :  result = k_val * (_item.beta  / _item.alpha) + c_val;
+         item_c::INC_A   :  result = k_val * (_item.alpha + 1) + c_val;
+         item_c::INC_B   :  result = k_val * (_item.beta  + 1) + c_val;
+         item_c::CLR_RES :  result = 0;
+         item_c::ACCUM   :  result += _item.alpha;
+      endcase
+
+      `cn_dbg(30, ("Calculated result %08X on item: %s", result, _item.convert2string()))
+   endfunction : write_item
+
+   ////////////////////////////////////////////
+   // func: write_result
+   // Called when a result is monitored
+   virtual function void write_result(result_t _result);
+      if(_result != result)
+         `cn_err(("Actual result: %08X != Expected result: %08x",
+                  _result, result))
+   endfunction : write_result
+endclass : pred_c
+
+`endif // __ALU_PRED_SV__
diff --git a/verif/vkits/alu/alu_seq_lib.sv b/verif/vkits/alu/alu_seq_lib.sv
new file mode 100644
index 0000000..db5b95d
--- /dev/null
+++ b/verif/vkits/alu/alu_seq_lib.sv
@@ -0,0 +1,284 @@
+
+// **********************************************************************
+// *
+// * legal mumbo jumbo
+// *
+// * (c) 2013
+// * (utg v1.0)
+// ***********************************************************************
+// File:   alu_seq_lib.sv
+// Author: bhunter
+/* About:  [description]
+ *************************************************************************/
+
+`ifndef __ALU_SEQ_LIB_SV__
+   `define __ALU_SEQ_LIB_SV__
+
+`include "alu_item.sv"
+
+// Forward declaration of library sequence and sequencer
+typedef class lib_seq_c;
+typedef class sqr_c;
+
+//****************************************************************************************
+// class: exer_seq_c
+// Runs <count> transactions
+class exer_seq_c extends uvm_sequence #(item_c, item_c);
+   `uvm_object_utils_begin(alu_pkg::exer_seq_c)
+      `uvm_field_int(count, UVM_ALL_ON | UVM_DEC)
+   `uvm_object_utils_end
+
+   //----------------------------------------------------------------------------------------
+   // Group: Fields
+
+   // field: count
+   // The number of random transactions to perform
+   rand int count;
+   constraint reasonable_cnstr { count inside {[1:100]}; }
+
+   //----------------------------------------------------------------------------------------
+   // Group: Methods
+
+   function new(string name="alu_seq");
+      super.new(name);
+   endfunction : new
+
+   ////////////////////////////////////////////
+   // func: body
+   virtual task body();
+      item_c item;
+
+      repeat(count) begin
+         `uvm_do(item)
+         get_response(rsp);
+         `cn_info(("Got response result: %08X", rsp.result))
+      end
+   endtask
+endclass : exer_seq_c
+
+//****************************************************************************************
+class factorial_seq_c extends uvm_sequence #(item_c, item_c);
+   `uvm_object_utils_begin(alu_pkg::factorial_seq_c)
+      `uvm_field_int(operand, UVM_ALL_ON)
+      `uvm_field_int(result,  UVM_ALL_ON)
+   `uvm_object_utils_end
+   `uvm_add_to_seq_lib(factorial_seq_c, lib_seq_c);
+
+   //----------------------------------------------------------------------------------------
+   // Group: Fields
+
+   // field: operand
+   // The value to perform the factorial on
+   rand bit [15:0] operand;
+   constraint operand_cnstr { operand <= 9; }
+
+   // field: result
+   // The final result
+   result_t result = 1;
+
+   //----------------------------------------------------------------------------------------
+   // Group: Methods
+   function new(string name="factorial_seq");
+      super.new(name);
+   endfunction : new
+
+   ////////////////////////////////////////////
+   // func: body
+   // Loop from 1..operand and multiply all the numbers together
+   virtual task body();
+      item_c item;
+      byte num;
+
+      for(num = 1; num <= operand; num++) begin
+         `uvm_do_with(item, { operation == MUL_A_B; alpha == num; beta == local::result[15:0]; })
+         get_response(rsp);
+         result = rsp.result;
+         `cn_info(("num=%0d, result=%0d", num, result))
+      end
+      `cn_info(("%0d! = %0d", operand, result))
+   endtask : body
+endclass : factorial_seq_c
+
+//****************************************************************************************
+class sum_array_seq_c extends uvm_sequence #(item_c, item_c);
+   `uvm_object_utils_begin(alu_pkg::sum_array_seq_c)
+      `uvm_field_array_int(data, UVM_ALL_ON | UVM_DEC)
+   `uvm_object_utils_end
+   `uvm_add_to_seq_lib(sum_array_seq_c, lib_seq_c);
+
+   //----------------------------------------------------------------------------------------
+   // Group: Fields
+
+   // field: data
+   // An array of words to be summed
+   rand bit [15:0] data[];
+
+   // constraint: data_cnstr
+   // keep it to a reasonable size
+   // and use small numbers only
+   constraint data_cnstr {
+      data.size() inside {[1:50]};
+      foreach(data[x]) {
+         data[x] inside {[0:100]};
+      }
+   }
+
+   // field: result
+   // The final result
+   result_t result;
+
+   //----------------------------------------------------------------------------------------
+   // Group: Methods
+
+   function new(string name="sum_array_seq");
+      super.new(name);
+   endfunction : new
+
+   ////////////////////////////////////////////
+   // func: body
+   virtual task body();
+      item_c item;
+
+      lock();
+      `uvm_do_with(item, { operation == CLR_RES; })
+      get_response(rsp);
+      foreach(data[x]) begin
+         `uvm_do_with(item, { operation == ACCUM; alpha == data[x]; })
+         get_response(rsp);
+      end
+      unlock();
+      result = rsp.result;
+      `cn_info(("Sum of this array = %0x:", result))
+   endtask : body
+
+endclass : sum_array_seq_c
+
+//****************************************************************************************
+class sum_of_factorials_seq_c extends uvm_sequence #(item_c);
+   `uvm_object_utils_begin(alu_pkg::sum_of_factorials_seq_c)
+      `uvm_field_int(op_x, UVM_ALL_ON | UVM_DEC)
+      `uvm_field_int(op_y, UVM_ALL_ON | UVM_DEC)
+      `uvm_field_int(result, UVM_ALL_ON | UVM_DEC)
+   `uvm_object_utils_end
+   `uvm_add_to_seq_lib(sum_of_factorials_seq_c, lib_seq_c);
+
+   //----------------------------------------------------------------------------------------
+   // Group: Fields
+
+   // vars: op_x, op_y
+   // Operands for this summation function
+   rand bit [15:0] op_x;
+   rand bit [15:0] op_y;
+
+   constraint operands_cnstr {
+      op_x < op_y;
+      op_x inside {[1:8]};
+      op_y inside {[1:8]};
+   }
+
+   // field: result
+   // The final result
+   result_t result;
+
+   //----------------------------------------------------------------------------------------
+   // Group: Methods
+   function new(string name="sum_of_factorials_array_seq");
+      super.new(name);
+   endfunction : new
+
+   ////////////////////////////////////////////
+   // func: body
+   virtual task body();
+      int num;
+      bit [15:0] data[];
+      factorial_seq_c fact_seq;
+      sum_array_seq_c sum_seq;
+      int  idx;
+
+      // fill the data array with all the factorials
+      data = new[(op_y - op_x + 1)];
+      idx = 0;
+      for(num = op_x; num <= op_y; num++) begin
+         `uvm_do_with(fact_seq, { operand == num; })
+         data[idx] = fact_seq.result;
+         idx++;
+      end
+
+      // now sum the array
+      `uvm_create(sum_seq)
+      sum_seq.data = data;
+      `uvm_send(sum_seq)
+      result = sum_seq.result;
+      `cn_info(("The sum of factorials from %0d to %0d is %0d.",
+                op_x, op_y, result))
+   endtask : body
+endclass : sum_of_factorials_seq_c
+
+//****************************************************************************************
+class sor_clr_seq_c extends uvm_sequence#(item_c);
+   `uvm_object_utils(alu_pkg::sor_clr_seq_c)
+   `uvm_declare_p_sequencer(sqr_c)
+
+   //----------------------------------------------------------------------------------------
+   // Group: Methods
+   function new(string name="sor_clr_seq");
+      super.new(name);
+   endfunction : new
+
+   ////////////////////////////////////////////
+   // func: body
+   virtual task body();
+      result_t accum_result = 0;
+      result_t new_result;
+      uvm_status_e status;
+      uvm_reg result_reg = p_sequencer.reg_block.RESULT;
+      uvm_reg_data_t sor_value;
+
+      forever begin
+         // get the next monitored transaction and add it to the accumulated results
+         p_sequencer.monitored_result_fifo.get(new_result);
+         accum_result += new_result;
+         `cn_dbg(30, ("accum_result = %8X", accum_result))
+
+         if(accum_result >= 32'h100_0000) begin
+            grab();
+            result_reg.read(status, sor_value);
+
+            // ensure status was ok
+            if(status == UVM_NOT_OK) begin
+               `cn_err(("Unable to read from RESULT register."))
+            end else begin
+               // ensure that current value exceeds 'h100_0000
+               `cn_dbg(30, ("SOR read as %08X", sor_value))
+               if(sor_value < 'h100_0000)
+                 `cn_err(("Read from RESULT[SOR] but its value was %08X", sor_value))
+
+               // clear out accum_result
+               accum_result = 0;
+
+               // empty out FIFO in case any have been added since the read started
+               p_sequencer.monitored_result_fifo.flush();
+            end
+            ungrab();
+         end
+      end
+   endtask : body
+
+endclass : sor_clr_seq_c
+
+//****************************************************************************************
+class lib_seq_c extends uvm_sequence_library #(item_c);
+   `uvm_object_utils(alu_pkg::lib_seq_c)
+   `uvm_sequence_library_utils(lib_seq_c)
+
+   //----------------------------------------------------------------------------------------
+   // Group: Methods
+   function new(string name="lib_seq");
+      super.new(name);
+      init_sequence_library();
+   endfunction : new
+
+endclass : lib_seq_c
+
+`endif // __ALU_SEQ_LIB_SV__
+
diff --git a/verif/vkits/alu/alu_sqr.sv b/verif/vkits/alu/alu_sqr.sv
new file mode 100644
index 0000000..8dafd21
--- /dev/null
+++ b/verif/vkits/alu/alu_sqr.sv
@@ -0,0 +1,85 @@
+
+// **********************************************************************
+// *
+// * legal mumbo jumbo
+// *
+// * (c) 2013
+// * (utg v1.0)
+// ***********************************************************************
+// File:   alu_sqr.sv
+// Author: bhunter
+/* About:  <description>
+ *************************************************************************/
+
+`ifndef __ALU_SQR_SV__
+   `define __ALU_SQR_SV__
+
+`include "alu_item.sv"
+`include "alu_seq_lib.sv"
+
+// class: sqr_c
+// (Describe me)
+class sqr_c extends uvm_sequencer#(item_c);
+   `uvm_component_utils_begin(alu_pkg::sqr_c)
+   	`uvm_field_object(reg_block, UVM_REFERENCE)
+   `uvm_component_utils_end
+
+   //----------------------------------------------------------------------------------------
+   // Group: Configuration Fields
+
+   // field: reg_block
+   // Auto-generated Register block
+   alu_csr_pkg::reg_block_c reg_block;
+
+   //----------------------------------------------------------------------------------------
+   // Group: TLM Ports
+
+   // field: monitored_result_exp
+   // An export to connect to the FIFO
+   uvm_analysis_export#(result_t) monitored_result_exp;
+
+   //----------------------------------------------------------------------------------------
+   // Group: Fields
+
+   // field: monitored_result_fifo
+   // A FIFO that holds monitored results
+   uvm_tlm_analysis_fifo #(result_t) monitored_result_fifo;
+
+   //----------------------------------------------------------------------------------------
+   // Group: Methods
+   function new(string name="[name]",
+                uvm_component parent=null);
+      super.new(name, parent);
+   endfunction : new
+
+   ////////////////////////////////////////////
+   // func: build_phase
+   virtual function void build_phase(uvm_phase phase);
+      super.build_phase(phase);
+      monitored_result_exp = new("monitored_result_exp", this);
+	   monitored_result_fifo = new("monitored_result_fifo", this);
+  endfunction : build_phase
+
+   ////////////////////////////////////////////
+   // func: connect_phase
+   virtual function void connect_phase(uvm_phase phase);
+      super.connect_phase(phase);
+      monitored_result_exp.connect(monitored_result_fifo.analysis_export);
+   endfunction : connect_phase
+
+   ////////////////////////////////////////////
+   // func: end_of_elaboration_phase
+   virtual function void end_of_elaboration_phase(uvm_phase phase);
+      super.end_of_elaboration_phase(phase);
+   endfunction : end_of_elaboration_phase
+
+   ////////////////////////////////////////////
+   // func: run_phase
+   virtual task run_phase(uvm_phase phase);
+      sor_clr_seq_c sor_clr_seq = sor_clr_seq_c::type_id::create("sor_clr_seq");
+      sor_clr_seq.start(this);
+   endtask : run_phase
+
+endclass : sqr_c
+
+`endif // __ALU_SQR_SV__
diff --git a/verif/vkits/alutb/alutb_alu_item_subscriber.sv b/verif/vkits/alutb/alutb_alu_item_subscriber.sv
new file mode 100644
index 0000000..3c21323
--- /dev/null
+++ b/verif/vkits/alutb/alutb_alu_item_subscriber.sv
@@ -0,0 +1,37 @@
+
+// **********************************************************************
+// *
+// * legal mumbo jumbo
+// *
+// * (c) 2013
+// * (utg v1.0)
+// ***********************************************************************
+// File:   alutb_alu_item_subscriber.sv
+// Author: bhunter
+/* About:  Listens for all monitored ALU transactions.
+ *************************************************************************/
+
+`ifndef __ALUTB_ALU_ITEM_SUBSCRIBER_SV__
+   `define __ALUTB_ALU_ITEM_SUBSCRIBER_SV__
+
+// class: alu_item_subscriber_c
+// Print out all ALU transactions.
+class alu_item_subscriber_c extends uvm_subscriber#(alu_pkg::item_c);
+   `uvm_component_utils(alutb_pkg::alu_item_subscriber_c)
+
+   //----------------------------------------------------------------------------------------
+   // Group: Methods
+   function new(string name="alu_item_subscriber",
+                uvm_component parent=null);
+      super.new(name, parent);
+   endfunction : new
+
+    ////////////////////////////////////////////
+   // func: write
+   // Receives the alu_pkg::item_c
+   virtual function void write(alu_pkg::item_c t);
+      `cn_info(("Received this ALU transaction: %s", t.convert2string()))
+   endfunction : write
+endclass : alu_item_subscriber_c
+
+`endif // __ALUTB_ALU_ITEM_SUBSCRIBER_SV__
diff --git a/verif/vkits/alutb/alutb_cfg.sv b/verif/vkits/alutb/alutb_cfg.sv
index a24eb2e..d2a45b1 100755
--- a/verif/vkits/alutb/alutb_cfg.sv
+++ b/verif/vkits/alutb/alutb_cfg.sv
@@ -18,20 +18,49 @@
 // class: cfg_c
 // ALUTB Configuration Class
 class cfg_c extends uvm_object;
+   //----------------------------------------------------------------------------------------
+   // Group: Types
+
+   // enum: alu_const_knob_e
+   // Used to constrain the K and C values for ALU
+   typedef enum { INNOCUOUS, SMALL, LARGE, XLARGE, UNLIMITED } alu_const_knob_e;
+
    `uvm_object_utils_begin(alutb_pkg::cfg_c)
       `uvm_field_object(reg_block, UVM_REFERENCE)
+      `uvm_field_enum(alu_const_knob_e, alu_const_knob, UVM_ALL_ON)
    `uvm_object_utils_end
 
    //----------------------------------------------------------------------------------------
    // Group: Configuration Fields
 
-   // var: reg_block
+   // field: reg_block
    // Register block for this environment
    rand alu_csr_pkg::reg_block_c reg_block;
 
-   constraint innocuous_cnstr {
-      reg_block.CONST.K_VAL.value == 1;
-      reg_block.CONST.C_VAL.value == 0;
+   // field: alu_const_knob
+   // Constrains the K_VAL and C_VAL
+   rand alu_const_knob_e alu_const_knob;
+   constraint const_knob_cnstr { alu_const_knob == INNOCUOUS; }
+
+   //----------------------------------------------------------------------------------------
+   // Group: Constraints
+
+   // constrain K_VAL based on alu_const_knob
+   constraint kval_cnstr {
+      alu_const_knob == INNOCUOUS -> (reg_block.CONST.K_VAL.value == 1);
+      alu_const_knob == SMALL     -> (reg_block.CONST.K_VAL.value inside {[2:5]});
+      alu_const_knob == LARGE     -> (reg_block.CONST.K_VAL.value inside {[6:50]});
+      alu_const_knob == XLARGE    -> (reg_block.CONST.K_VAL.value inside {[51:255]});
+      alu_const_knob == UNLIMITED -> (reg_block.CONST.K_VAL.value inside {[0:255]});
+   }
+
+   // constrain C_VAL based on alu_const_knob
+   constraint cval_cnstr {
+      alu_const_knob == INNOCUOUS -> (reg_block.CONST.C_VAL.value == 0);
+      alu_const_knob == SMALL     -> (reg_block.CONST.C_VAL.value inside {[2:10]});
+      alu_const_knob == LARGE     -> (reg_block.CONST.C_VAL.value inside {[11:128]});
+      alu_const_knob == XLARGE    -> (reg_block.CONST.C_VAL.value inside {[129:255]});
+      alu_const_knob == UNLIMITED -> (reg_block.CONST.C_VAL.value inside {[0:255]});
    }
 
    //----------------------------------------------------------------------------------------
diff --git a/verif/vkits/alutb/alutb_env.sv b/verif/vkits/alutb/alutb_env.sv
index 460d334..47e8ba5 100755
--- a/verif/vkits/alutb/alutb_env.sv
+++ b/verif/vkits/alutb/alutb_env.sv
@@ -16,6 +16,7 @@
    `define __ALUTB_ENV_SV__
 
    `include "alutb_cfg.sv"
+   `include "alutb_alu_item_subscriber.sv"
 
 // class: env_c
 // ALUTB Environment class
@@ -36,6 +37,14 @@ class env_c extends uvm_env;
    // alu register block (reference to the one in cfg)
    alu_csr_pkg::reg_block_c reg_block;
 
+   // field: alu_agent
+   // The ALU agent
+   alu_pkg::agent_c alu_agent;
+
+   // var: alu_item_subscriber
+   // Prints all monitored alu items
+   alu_item_subscriber_c alu_item_subscriber;
+
    //----------------------------------------------------------------------------------------
    // Group: Fields
 
@@ -58,12 +67,19 @@ class env_c extends uvm_env;
       // build ctx agent
       if(ctx_agent == null)
          ctx_agent = ctx_pkg::agent_c::type_id::create("ctx_agent", this);
+
+      // create the ALU agent
+      uvm_config_db#(int)::set(this, "alu_agent", "is_active", UVM_ACTIVE);
+      alu_agent = alu_pkg::agent_c::type_id::create("alu_agent", this);
+
+      alu_item_subscriber = alu_item_subscriber_c::type_id::create("alu_item_subscriber", this);
    endfunction : build_phase
 
    ////////////////////////////////////////////
    // func: connect_phase
    virtual function void connect_phase(uvm_phase phase);
       super.connect_phase(phase);
+      alu_agent.monitored_item_port.connect(alu_item_subscriber.analysis_export);
    endfunction : connect_phase
 
 endclass : env_c
diff --git a/verif/vkits/alutb/alutb_pkg.sv b/verif/vkits/alutb/alutb_pkg.sv
index 0d7aa97..7f2422e 100755
--- a/verif/vkits/alutb/alutb_pkg.sv
+++ b/verif/vkits/alutb/alutb_pkg.sv
@@ -26,6 +26,7 @@ package alutb_pkg;
    // Group: Includes
 `include "alutb_cfg.sv"
 `include "alutb_env.sv"
+`include "alutb_alu_item_subscriber.sv"
 
 endpackage : alutb_pkg
 
diff --git a/verif/vkits/frm/frm_env.sv b/verif/vkits/frm/frm_env.sv
index 127748e..8d6ae5b 100755
--- a/verif/vkits/frm/frm_env.sv
+++ b/verif/vkits/frm/frm_env.sv
@@ -16,6 +16,7 @@
 
 `include "frm_agent.sv"
 `include "frm_frame.sv"
+`include "frm_vsqr.sv"
 
 // class: env_c
 // FRM Testbench Environment
@@ -54,6 +55,10 @@ class env_c extends uvm_env;
    // The FRM agent
    agent_c frm_agent;
 
+   // var: vsqr
+   // Virtual sequencer
+   vsqr_c vsqr;
+
    //----------------------------------------------------------------------------------------
    // Methods
    function new(string name="env",
@@ -75,12 +80,21 @@ class env_c extends uvm_env;
 
       // build ctx agent
       ctx_agent = ctx_pkg::agent_c::type_id::create("ctx_agent", this);
+
+      // build vsqr
+      vsqr = vsqr_c::type_id::create("vsqr", this);
    endfunction : build_phase
 
    ////////////////////////////////////////////
    // func: connect_phase
    virtual function void connect_phase(uvm_phase phase);
       super.connect_phase(phase);
+
+      if(!frm_agent.sqr || !alu_agent.sqr)
+         `cn_fatal(("frame_agent.sqr or alu_agent.sqr are not present!"))
+
+      vsqr.frm_sqr = frm_agent.sqr;
+      vsqr.alu_sqr = alu_agent.sqr;
    endfunction : connect_phase
 
 endclass : env_c
diff --git a/verif/vkits/frm/frm_pkg.sv b/verif/vkits/frm/frm_pkg.sv
index b5a55f5..74ef12b 100755
--- a/verif/vkits/frm/frm_pkg.sv
+++ b/verif/vkits/frm/frm_pkg.sv
@@ -33,6 +33,7 @@ package frm_pkg;
 `include "frm_seq_lib.sv"
 `include "frm_sqr.sv"
 `include "frm_vseq_lib.sv"
+`include "frm_vsqr.sv"
 
 endpackage : frm_pkg
 
diff --git a/verif/vkits/frm/frm_vseq_lib.sv b/verif/vkits/frm/frm_vseq_lib.sv
index 2e343a4..2814615 100755
--- a/verif/vkits/frm/frm_vseq_lib.sv
+++ b/verif/vkits/frm/frm_vseq_lib.sv
@@ -14,12 +14,6 @@
 `ifndef __FRM_VSEQ_LIB_SV__
    `define __FRM_VSEQ_LIB_SV__
 
-
-//
-// UNCOMMENT THE FOLLOWING FOR PROBLEM 16-1:
-//
-
-/*
 `include "frm_vsqr.sv"
 
 //-****************************************************************************************
@@ -56,6 +50,90 @@ class basic_vseq_c extends uvm_sequence;
    endtask : body
 
 endclass : basic_vseq_c
-*/
+
+//****************************************************************************************
+// class: basic_delay_vseq_c
+class basic_delay_vseq_c extends uvm_sequence;
+   `uvm_object_utils(frm_pkg::basic_delay_vseq_c)
+   `uvm_declare_p_sequencer(vsqr_c)
+
+   //----------------------------------------------------------------------------------------
+   // Group: Fields
+
+   // frame_delay_ns
+   // Delay of sending the frame, with respect to starting the ALU transactions
+   // If frame_delay_ns is negative, then send the frame first, otherwise, send transactions first
+   rand int frame_delay_ns;
+   constraint frame_delay_cnstr { frame_delay_ns inside {[-100:100]}; }
+
+   //----------------------------------------------------------------------------------------
+   // Group: Methods
+   function new(string name="basic_delay_vseq");
+      super.new(name);
+   endfunction : new
+
+   ////////////////////////////////////////////
+   // func: body
+   virtual task body();
+      frame_c frame;
+      alu_pkg::exer_seq_c alu_exer_seq;
+
+      // create and randomize to see how many ALU transactions to send
+      `uvm_create_on(frame, p_sequencer.frm_sqr)
+      frame.randomize();
+
+      `cn_info(("Sending this frame: %s", frame.convert2string()))
+
+      fork
+         begin
+            if(frame_delay_ns > 0)
+               #(frame_delay_ns * 1ns);
+            `uvm_send(frame);
+            get_response(rsp);
+            `cn_info(("Frame completed: %s", rsp.convert2string()))
+         end
+
+         begin
+            if(frame_delay_ns < 0)
+               #((-frame_delay_ns) * 1ns);
+            `uvm_do_on_with(alu_exer_seq, p_sequencer.alu_sqr, { count == frame.frame_len; })
+         end
+      join
+
+   endtask : body
+endclass : basic_delay_vseq_c
+
+//****************************************************************************************
+// class: exer_vseq_c
+class exer_vseq_c extends uvm_sequence;
+   `uvm_object_utils_begin(frm_pkg::exer_vseq_c)
+      `uvm_field_int(count, UVM_ALL_ON | UVM_DEC)
+   `uvm_object_utils_end
+
+   //----------------------------------------------------------------------------------------
+   // Group: Fields
+
+   // field: count
+   // The number of basic_vseq to do
+   rand int count;
+   constraint count_cnstr { count inside {[20:100]}; }
+
+   //----------------------------------------------------------------------------------------
+   // Group: Methods
+   function new(string name="exer_vseq");
+      super.new(name);
+   endfunction : new
+
+   ////////////////////////////////////////////
+   // func: body
+   virtual task body();
+      basic_delay_vseq_c vseq;
+      `cn_info(("Transmitting %0d frames.", count))
+      `cn_seq_raise
+      repeat(count)
+         `uvm_do(vseq)
+      `cn_seq_drop
+   endtask : body
+endclass : exer_vseq_c
 
 `endif // __FRM_VSEQ_LIB_SV__
diff --git a/verif/vkits/frm/frm_vsqr.sv b/verif/vkits/frm/frm_vsqr.sv
new file mode 100644
index 0000000..e026783
--- /dev/null
+++ b/verif/vkits/frm/frm_vsqr.sv
@@ -0,0 +1,52 @@
+
+// **********************************************************************
+// *
+// * legal mumbo jumbo
+// *
+// * (c) 2013
+// * (utg v1.0)
+// ***********************************************************************
+// File:   frm_vsqr.sv
+// Author: bhunter
+/* About:  <description>
+ *************************************************************************/
+
+`ifndef __FRM_VSQR_SV__
+   `define __FRM_VSQR_SV__
+
+`include "frm_sqr.sv"
+
+// class: vsqr_c
+// Virtual sequencer holding references to frm_sqr and alu_sqr
+class vsqr_c extends uvm_sequencer;
+   `uvm_component_utils_begin(frm_pkg::vsqr_c)
+      `uvm_field_object(frm_sqr,         UVM_REFERENCE)
+      `uvm_field_object(alu_sqr,         UVM_REFERENCE)
+      `uvm_field_object(reg_block,       UVM_REFERENCE)
+   `uvm_component_utils_end
+
+   //----------------------------------------------------------------------------------------
+   // Group: Sequencer references
+
+   // field: frm_sqr
+   sqr_c frm_sqr;
+
+   // field: alu_sqr
+   alu_pkg::sqr_c alu_sqr;
+
+   //----------------------------------------------------------------------------------------
+   // Group: Fields
+
+   // field: reg_block
+   // alutb register block (reference to the one in cfg)
+   alu_csr_pkg::reg_block_c reg_block;
+
+   //----------------------------------------------------------------------------------------
+   // Group: Methods
+   function new(string name="vsqr",
+                uvm_component parent=null);
+      super.new(name, parent);
+   endfunction : new
+endclass : vsqr_c
+
+`endif // __FRM_VSQR_SV__
