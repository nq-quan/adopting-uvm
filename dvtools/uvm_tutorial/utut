#!/usr/bin/env python2.7

"""
UVM Tutorial Script:

    code:    Returns 1 or more code snippets as plain text from the
             tutorial. May specify as many code numbers as you like. Separate
             ranges with a - character.
             usage: utut code <N1> [<N2>-<N3> <N4> ...]

    chapter: Makes an area up-to-date with the solutions from the given chapter.
             usage: utut chapter <NUM>

    fix:     Patches the current rtl/ directory with a fix number.
             usage: utut fix <FNUM>

"""

__version__     = '1.0'
__author__      = 'Brian Hunter'
__email__       = 'brian.hunter@cavium.com'


########################################################################################
# Imports
import argparse
import logging
import os
import sys
import re
import utils

########################################################################################
# Constants

COMMANDS    = ('code', 'chapter', 'fix', 'clean',)
DEFAULT_REVISION  = 'v1.0'
UTUT_DIR    = os.path.dirname(os.path.realpath(__file__))

########################################################################################
# Global Variables
Options = None
Log = None

#######################################################################################
def parseArgs():
    """
    Parse arguments
    """

    global Options, Log

    p = argparse.ArgumentParser(usage="utut <command> <options>",
                                formatter_class=argparse.RawDescriptionHelpFormatter,
                                description=__doc__,
                                add_help=True)

    p.add_argument("cmd",              action="store",      choices=COMMANDS)
    p.add_argument("extras",           action="store",      nargs="*")
    p.add_argument("--revision", '-r', action="store",      default=DEFAULT_REVISION, help="Use a different revision of the tutorial (default:%s)" % DEFAULT_REVISION)
    p.add_argument("--dbg", '-d',      action='store_true', default=False,     help="Run with debug information.")
    Options = p.parse_args()

    # create Log
    level = {True: logging.DEBUG,
             False: logging.INFO}[Options.dbg]
    Log = utils.get_logger('utut_log', level)
    utils.Log = Log

    # Ensure that code option has at least 1 argument
    if Options.cmd == 'code' and len(Options.extras) == 0:
        Log.critical("usage: utut code n0 [n1 n2 ...]")

    # Ensure that chapter number is valid
    if Options.cmd in ('chapter', 'fix'):
        if len(Options.extras) != 1:
            Log.critical("usage: utut [chapter|fix] <LNUM>")

    # Modify revision to comply
    rexp = re.compile("v\d\.\d+")
    rexp_results = rexp.match(Options.revision)
    if not rexp_results:
        Log.critical("usage: revision must be similar to 'v0.4'")

    # Ensure that specified revision is available for fixes and chapter
    availableRevisions = [it for it in os.listdir(UTUT_DIR) if it.startswith('v')]
    if Options.revision not in availableRevisions:
        Log.critical("Revision %s not available.\nSelect from: %s" % (Options.revision, ','.join(availableRevisions)))

########################################################################################
def print_codes(code_nums):
    """
    Fetch the code dictionary from inserter and print out each code
    """

    import inserter
    inserter.Log = Log

    codes = inserter.fetch_code(code_nums, Options.revision)
    for code_num in code_nums:
        (fName, snippet) = codes[code_num]
        print "###################"
        print "# CODE:", code_num
        if Options.revision != DEFAULT_REVISION:
            print "# REV:", Options.revision
        if fName:
            print "# FILE:", fName
        print "###################"
        print snippet
        print

########################################################################################
def fetch_chapter(chapter_num):
    import fetcher
    import utils

    fetcher.Log = utils.Log = Log

    # first, ensure that this is a legal chapter number
    if chapter_num not in fetcher.available_patches(fetcher.CHAPTERS, Options.revision):
        Log.critical("Chapter #%0d is not an available patch." % chapter_num)

    # now get the root directory
    try:
        root_dir = utils.calc_root_dir()
    except utils.AreaError:
        Log.critical("command must be run from within the project tree.")

    # check status of given area. If it has modifications, then make sure user
    # is ok with scrubbing them clean
    Log.info("The %s directory will first be scrubbed clean because it has modifications." % root_dir)
    try:
        while True:
            answer = raw_input("Are you sure [y/n]? ")
            if answer in ('y', 'n'):
                break
            Log.info("Please answer y or n.")

        if answer == 'n':
            Log.info("No changes made.")
            sys.exit(0)

        # scrub area clean
        utils.gitscrub()
    except KeyboardInterrupt:
        Log.critical("\nCTRL-C detected.  Exiting.")

    # the cwd may have been removed during the scrub command, so change to the root directory
    os.chdir(root_dir)

    # apply the patch
    fetcher.fetch_patch(fetcher.CHAPTERS, chapter_num, Options.revision)

########################################################################################
def fetch_fix(fix_num):
    import fetcher
    fetcher.Log = Log

    fetcher.fetch_patch(fetcher.FIXES, fix_num, Options.revision)

#######################################################################################
def main():
    parseArgs()

    Log.info("Working with UVM Tutorial version %s" % Options.revision)

    if Options.cmd == 'code':
        items = []
        try:
            for extra in Options.extras:
                if '-' in extra:
                    vals = [int(it) for it in extra.split('-')]
                    items.extend(xrange(vals[0], vals[1]+1))
                else:
                    items.append(int(extra))
        except ValueError:
            raise
            Log.critical("Invalid code. usage: utut code <N1> [<N2> <N3> ...]")

        print_codes([int(it) for it in items])

    elif Options.cmd == 'chapter':
        fetch_chapter(int(Options.extras[0]))

    elif Options.cmd == 'fix':
        fetch_fix(int(Options.extras[0]))

    elif Options.cmd == 'clean':
        utils.gitscrub()

#######################################################################################
if __name__ == '__main__':
    # from cmdline import logUsage
    from exceptions import SystemExit

    # logUsage('utut', __version__)

    try:
        main()
    except SystemExit, e:
        try:
            exit(int(str(e)))
        except ValueError:
            print e
            exit(1)
    except KeyboardInterrupt:
        Log.info("Exiting due to Ctrl-C.")
        sys.exit(0)
    except:
        # import email_utils
        # email_utils.mail_traceback('webmaster@cavium.com', __email__,
        #                            'utut v%s Error Detected' % (__version__),
        #                            toolname='utut')
        raise
