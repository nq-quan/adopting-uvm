Index: verif/vkits/alu/alu.flist
===================================================================
--- verif/vkits/alu/alu.flist	(.../svn+ssh://masvn/svn/o68/branches/uvmtut_v0.5/verif)	(revision 0)
+++ verif/vkits/alu/alu.flist	(.../verif)	(revision 0)
@@ -0,0 +1,2 @@
++incdir+../../verif/vkits/alu
+../../verif/vkits/alu/alu_pkg.sv
Index: verif/vkits/alu/alu_item.sv
===================================================================
--- verif/vkits/alu/alu_item.sv	(.../svn+ssh://masvn/svn/o68/branches/uvmtut_v0.5/verif)	(revision 0)
+++ verif/vkits/alu/alu_item.sv	(.../verif)	(revision 0)
@@ -0,0 +1,123 @@
+//-*- mode: Verilog; verilog-indent-level: 3; indent-tabs-mode: nil; tab-width: 1 -*-
+
+// **********************************************************************
+// * CAVIUM CONFIDENTIAL                                                 
+// *                                                                     
+// *                         PROPRIETARY NOTE                            
+// *                                                                     
+// * This software contains information confidential and proprietary to  
+// * Cavium, Inc. It shall not be reproduced in whole or in part, or     
+// * transferred to other documents, or disclosed to third parties, or   
+// * used for any purpose other than that for which it was obtained,     
+// * without the prior written consent of Cavium, Inc.                   
+// * (c) 2012, Cavium, Inc.  All rights reserved.                      
+// * (utg v0.6.6)
+// ***********************************************************************
+// File:   alu_item.sv
+// Author: bhunter
+/* About:  <description>
+ *************************************************************************/
+
+`ifndef __ALU_ITEM_SV__
+   `define __ALU_ITEM_SV__
+
+// class: item_c
+// An ALU Transaction as a sequence item
+class item_c extends uvm_sequence_item;
+   //----------------------------------------------------------------------------------------
+   // Group: Types
+   typedef enum bit [7:0] {
+                           ADD_A_B = 0,
+                           SUB_A_B = 1,
+                           SUB_B_A = 2,
+                           MUL_A_B = 3,
+                           DIV_A_B = 4,
+                           DIV_B_A = 5,
+                           INC_A   = 6,
+                           INC_B   = 7,
+                           CLR_RES = 8,
+                           ACCUM   = 9
+                           } operation_e;
+
+   `uvm_object_utils_begin(alu_pkg::item_c)
+      `uvm_field_enum(operation_e, operation, UVM_ALL_ON)
+      `uvm_field_int (alpha,                  UVM_ALL_ON | UVM_NOPACK | UVM_NOCOMPARE)
+      `uvm_field_int (beta,                   UVM_ALL_ON | UVM_NOPACK | UVM_NOCOMPARE)
+   `uvm_object_utils_end
+
+   //----------------------------------------------------------------------------------------
+   // Group: Fields
+
+   // var: operation
+   rand operation_e operation;
+
+   // var: A variable
+   rand bit [15:0] alpha;
+
+   // var: B variable
+   rand bit [15:0] beta;
+
+   // ensure that all operands have legal values
+   constraint protocol_cnstr {
+      (operation == DIV_A_B) -> beta != 0;
+      (operation == DIV_B_A) -> alpha != 0;
+      (operation == SUB_A_B) -> alpha > beta;
+      (operation == SUB_B_A) -> beta > alpha;
+   }
+
+   // var: result
+   // This is the result of the operation, filled in by the driver and sent back with the response
+   result_t result;
+
+   //----------------------------------------------------------------------------------------
+   // Group: Methods
+   function new(string name="item");
+      super.new(name);
+   endfunction : new
+
+   //----------------------------------------------------------------------------------------
+   // func: convert2string
+   // Single-line printing
+   virtual              function string convert2string();
+      convert2string = $psprintf("%s A:%04X B:%04X", operation, alpha, beta);
+   endfunction : convert2string
+
+   ////////////////////////////////////////////
+   // func: do_pack
+   virtual              function void do_pack(uvm_packer packer);
+      super.do_pack(packer);
+
+      if(operation inside {[ADD_A_B : INC_A], ACCUM})
+        packer.pack_field_int(alpha, 16);
+      if(operation inside {[ADD_A_B : DIV_B_A], INC_B})
+        packer.pack_field_int(beta, 16);
+   endfunction : do_pack
+
+   ////////////////////////////////////////////
+   // func: do_unpack
+   virtual              function void do_unpack(uvm_packer packer);
+      super.do_unpack(packer);
+
+      if(operation inside {[ADD_A_B : INC_A], ACCUM})
+        alpha = packer.unpack_field_int(16);
+      if(operation inside {[ADD_A_B : DIV_B_A], INC_B})
+        beta = packer.unpack_field_int(16);
+   endfunction : do_unpack
+
+   ////////////////////////////////////////////
+   // func: do_compare
+   virtual              function bit do_compare(uvm_object rhs,
+                                                uvm_comparer comparer);
+      item_c _rhs;
+      $cast(_rhs, rhs);
+      do_compare = super.do_compare(rhs, comparer);
+      if(operation inside {[ADD_A_B : INC_A], ACCUM})
+        do_compare &= comparer.compare_field_int("alpha", alpha, _rhs.alpha, 16);
+      if(operation inside {[ADD_A_B : DIV_B_A], INC_B})
+        do_compare &= comparer.compare_field_int("beta", beta, _rhs.beta, 16);
+   endfunction : do_compare
+endclass : item_c
+
+
+  `endif // __ALU_ITEM_SV__
+
Index: verif/vkits/alu/alu_pkg.sv
===================================================================
--- verif/vkits/alu/alu_pkg.sv	(.../svn+ssh://masvn/svn/o68/branches/uvmtut_v0.5/verif)	(revision 0)
+++ verif/vkits/alu/alu_pkg.sv	(.../verif)	(revision 0)
@@ -0,0 +1,46 @@
+//-*- mode: Verilog; verilog-indent-level: 3; indent-tabs-mode: nil; tab-width: 1 -*-
+
+// **********************************************************************
+// * CAVIUM CONFIDENTIAL                                                 
+// *                                                                     
+// *                         PROPRIETARY NOTE                            
+// *                                                                     
+// * This software contains information confidential and proprietary to  
+// * Cavium, Inc. It shall not be reproduced in whole or in part, or     
+// * transferred to other documents, or disclosed to third parties, or   
+// * used for any purpose other than that for which it was obtained,     
+// * without the prior written consent of Cavium, Inc.                   
+// * (c) 2012, Cavium, Inc.  All rights reserved.                      
+// * (utg v0.6.6)
+// ***********************************************************************
+// File:   alu_pkg.sv
+// Author: bhunter
+/* About:  alu package
+ *************************************************************************/
+
+
+// (`includes of macros may go here)
+`include "uvm_macros.svh"
+
+// package: alu_pkg
+// (Describe me)
+package alu_pkg;
+
+   //----------------------------------------------------------------------------------------
+   // Group: Imports
+   import uvm_pkg::*;
+
+   //----------------------------------------------------------------------------------------
+   // Group: Types
+   
+   // type: result_t
+   // The output type of the ALU
+   typedef logic [31:0] result_t;
+
+   //----------------------------------------------------------------------------------------
+   // Group: Includes
+`include "alu_item.sv"
+   
+endpackage : alu_pkg
+   
+
Index: verif/alutb/tests/basic.sv
===================================================================
--- verif/alutb/tests/basic.sv	(.../svn+ssh://masvn/svn/o68/branches/uvmtut_v0.5/verif)	(revision 103396)
+++ verif/alutb/tests/basic.sv	(.../verif)	(working copy)
@@ -29,19 +29,35 @@
    `uvm_component_utils(basic_test_c)
 
    //----------------------------------------------------------------------------------------
-   // Methods
+   // Group: Methods
    function new(string name="test",
                 uvm_component parent=null);
       super.new(name, parent);
    endfunction : new
 
    ////////////////////////////////////////////
-   // func: build_phase
-   virtual function void build_phase(uvm_phase phase);
-      super.build_phase(phase);
-   endfunction : build_phase
+   // func: run_phase
+   virtual task main_phase(uvm_phase phase);
+      byte unsigned stream[];
+      alu_pkg::item_c item;
+      alu_pkg::item_c unp_item = alu_pkg::item_c::type_id::create("unp_item");;
+      phase.raise_objection(this);
+
+      repeat(50) begin
+         item = alu_pkg::item_c::type_id::create("item");
+         item.randomize();
+         `cn_info(("Created ALU transaction: %s", item.convert2string()))
+         item.pack_bytes(stream);
+         `cn_info(("Bytes: %s", cn_pkg::print_ubyte_array(stream)))
+         unp_item.unpack_bytes(stream);
+         `cn_info(("Unpacked: %s", unp_item.convert2string()))
+         if(item.compare(unp_item) == 0)
+            `cn_err(("Miscompare!"))
+      end
+      phase.drop_objection(this);
+   endtask : main_phase
+
+ endclass : basic_test_c
    
-endclass : basic_test_c
-   
 `endif // __BASIC_SV__
       
\ No newline at end of file
Index: verif/alutb/tests/duty_cycle.sv
===================================================================
--- verif/alutb/tests/duty_cycle.sv	(.../svn+ssh://masvn/svn/o68/branches/uvmtut_v0.5/verif)	(revision 0)
+++ verif/alutb/tests/duty_cycle.sv	(.../verif)	(revision 0)
@@ -0,0 +1,48 @@
+//-*- mode: Verilog; verilog-indent-level: 3; indent-tabs-mode: nil; tab-width: 1 -*-
+
+// **********************************************************************
+// * CAVIUM CONFIDENTIAL                                                 
+// *                                                                     
+// *                         PROPRIETARY NOTE                            
+// *                                                                     
+// * This software contains information confidential and proprietary to  
+// * Cavium, Inc. It shall not be reproduced in whole or in part, or     
+// * transferred to other documents, or disclosed to third parties, or   
+// * used for any purpose other than that for which it was obtained,     
+// * without the prior written consent of Cavium, Inc.                   
+// * (c) 2012, Cavium, Inc.  All rights reserved.                      
+// * (utg v0.6.6)
+// ***********************************************************************
+// File:   duty_cycle.sv
+// Author: bhunter
+/* About:  <description>
+ *************************************************************************/
+
+`ifndef __DUTY_CYCLE_SV__
+ `define __DUTY_CYCLE_SV__
+
+ `include "base_test.sv"
+ `include "clk_duty_cycle.sv"
+
+// class: duty_cycle_test_c
+// Run using the clk_duty_cycle_c instead of cn_pkg::clk_drv_c
+class duty_cycle_test_c extends base_test_c;
+   `uvm_component_utils(duty_cycle_test_c)
+
+   //----------------------------------------------------------------------------------------
+   // Group: Methods
+   function new(string name="duty_cycle_test",
+                uvm_component parent=null);
+      super.new(name, parent);
+   endfunction : new
+
+   ////////////////////////////////////////////
+   // func: build_phase
+   virtual function void build_phase(uvm_phase phase);
+      set_type_override_by_type(cn_pkg::clk_drv_c::get_type(),
+                                clk_duty_cycle_c::get_type(), .replace(1));
+      super.build_phase(phase);
+   endfunction : build_phase
+
+endclass : duty_cycle_test_c
+`endif // __DUTY_CYCLE_SV__
Index: verif/alutb/tests/fast_clk.sv
===================================================================
--- verif/alutb/tests/fast_clk.sv	(.../svn+ssh://masvn/svn/o68/branches/uvmtut_v0.5/verif)	(revision 0)
+++ verif/alutb/tests/fast_clk.sv	(.../verif)	(revision 0)
@@ -0,0 +1,59 @@
+//-*- mode: Verilog; verilog-indent-level: 3; indent-tabs-mode: nil; tab-width: 1 -*-
+
+// **********************************************************************
+// * CAVIUM CONFIDENTIAL                                                 
+// *                                                                     
+// *                         PROPRIETARY NOTE                            
+// *                                                                     
+// * This software contains information confidential and proprietary to  
+// * Cavium, Inc. It shall not be reproduced in whole or in part, or     
+// * transferred to other documents, or disclosed to third parties, or   
+// * used for any purpose other than that for which it was obtained,     
+// * without the prior written consent of Cavium, Inc.                   
+// * (c) 2012, Cavium, Inc.  All rights reserved.                      
+// * (utg v0.6.6)
+// ***********************************************************************
+// File:   fast_clk.sv
+// Author: bhunter
+/* About:  <description>
+ *************************************************************************/
+
+`ifndef __FAST_CLK_SV__
+   `define __FAST_CLK_SV__
+   
+   `include "base_test.sv"
+// (`includes go here)
+
+// class: fast_clk_test_c
+// (Describe me)
+class fast_clk_test_c extends base_test_c;
+   `uvm_component_utils_begin(fast_clk_test_c)
+   `uvm_component_utils_end
+
+   //----------------------------------------------------------------------------------------
+   // Group: Configuration Fields
+
+   //----------------------------------------------------------------------------------------
+   // Group: Fields
+
+   //----------------------------------------------------------------------------------------
+   // Group: Methods
+   function new(string name="test",
+                uvm_component parent=null);
+      super.new(name, parent);
+   endfunction : new
+
+   ////////////////////////////////////////////
+   // func: end_of_elaboration_phase
+   virtual function void end_of_elaboration_phase(uvm_phase phase);
+      super.end_of_elaboration_phase(phase);
+      tb_clk_drv.randomize(period_ps) with {
+         period_ps inside {[1800:1999]};
+      };
+      `cn_info(("Selected a period of %0dps", tb_clk_drv.period_ps))
+   endfunction : end_of_elaboration_phase
+
+endclass : fast_clk_test_c
+   
+`endif // __FAST_CLK_SV__
+      
\ No newline at end of file
Index: verif/alutb/clk_duty_cycle.sv
===================================================================
--- verif/alutb/clk_duty_cycle.sv	(.../svn+ssh://masvn/svn/o68/branches/uvmtut_v0.5/verif)	(revision 0)
+++ verif/alutb/clk_duty_cycle.sv	(.../verif)	(revision 0)
@@ -0,0 +1,56 @@
+//-*- mode: Verilog; verilog-indent-level: 3; indent-tabs-mode: nil; tab-width: 1 -*-
+
+// **********************************************************************
+// * CAVIUM CONFIDENTIAL                                                 
+// *                                                                     
+// *                         PROPRIETARY NOTE                            
+// *                                                                     
+// * This software contains information confidential and proprietary to  
+// * Cavium, Inc. It shall not be reproduced in whole or in part, or     
+// * transferred to other documents, or disclosed to third parties, or   
+// * used for any purpose other than that for which it was obtained,     
+// * without the prior written consent of Cavium, Inc.                   
+// * (c) 2012, Cavium, Inc.  All rights reserved.                      
+// * (utg v0.6.6)
+// ***********************************************************************
+// File:   clk_duty_cycle.sv
+// Author: bhunter
+/* About:  <description>
+ *************************************************************************/
+
+`ifndef __CLK_DUTY_CYCLE_SV__
+   `define __CLK_DUTY_CYCLE_SV__
+   
+// class: clk_duty_cycle_c
+// A clock with a duty cycle of 75/25.
+class clk_duty_cycle_c extends cn_pkg::clk_drv_c;
+   `uvm_component_utils(clk_duty_cycle_c)
+
+   //----------------------------------------------------------------------------------------
+   // Group: Methods
+   function new(string name="clk_duty_cycle",
+                uvm_component parent=null);
+      super.new(name, parent);
+   endfunction : new
+
+   ////////////////////////////////////////////
+   // func: run_phase
+   virtual task run_phase(uvm_phase phase);
+      int uptime = 3*period_ps / 4;
+      int downtime = period_ps - uptime;
+
+      // set to initial value
+      clk_vi.clk = (init_x)? 'bx : init_value;
+      #(init_delay_ps * 1ps);
+      forever begin
+         clk_vi.clk = 1;
+         #(uptime * 1ps);
+         clk_vi.clk = 0;
+         #(downtime * 1ps);
+      end
+   endtask : run_phase
+
+endclass : clk_duty_cycle_c
+   
+`endif // __CLK_DUTY_CYCLE_SV__
+   
\ No newline at end of file
Index: verif/alutb/alutb.flist
===================================================================
--- verif/alutb/alutb.flist	(.../svn+ssh://masvn/svn/o68/branches/uvmtut_v0.5/verif)	(revision 103396)
+++ verif/alutb/alutb.flist	(.../verif)	(working copy)
@@ -7,4 +7,5 @@
 ../../verif/alutb/alu_wrapper.sv
 ../../verif/alutb/tests/basic.sv
 ../../verif/alutb/tests/base_test.sv
-
+../../verif/alutb/tests/fast_clk.sv
+../../verif/alutb/tests/duty_cycle.sv
Index: verif/alutb/Makefile
===================================================================
--- verif/alutb/Makefile	(.../svn+ssh://masvn/svn/o68/branches/uvmtut_v0.5/verif)	(revision 103396)
+++ verif/alutb/Makefile	(.../verif)	(working copy)
@@ -38,10 +38,11 @@
 CSR_PKGS = $(ROOT_DIR)/verif/vkits/reg/obj/unit/regs__alu.sv
 
 FLISTS= verif/vkits/cn/cn.flist \
-   verif/vkits/global/global.flist \
+	verif/vkits/global/global.flist \
 	verif/vkits/reg/reg.flist \
 	verif/vkits/ncb/ncb.flist \
+	verif/vkits/alu/alu.flist \
 	verif/vkits/alutb/alutb.flist \
 	verif/alutb/alutb.flist \
 	verif/alutb/rtl.flist
 
