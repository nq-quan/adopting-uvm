#!/usr/bin/env python2.7
#-*- mode: Python;-*-

"""
A lightweight compile and simulate script
Includes some support for Verdi, too.
"""

__version__       = '0.0'
__author__        = "Brian Hunter"
__email__         = 'brian.hunter@cavium.com'

import os
import subprocess
import sys
import argparse

########################################################################################
# Globals

# The names of all the library files that will be imported
Libraries = ('project', 'tb')

# A dictionary of all the global variables imported from the libraries
GVars = None

# All of the global variables in the GVars dictionary
Keys = (
        # Global variables
        'UVM_REV',           # (string) UVM Revision to use

        # Testbench-related variables
        'VKITS',             # (list of strings) Vkits that this testbench relies upon, in order
        'FLISTS',            # (list of strings) Testbench FLISTs to include

        # Build-related
        'BUILD_TOOL',        # (string) Command needed to run a build
        'BUILD_OPTIONS',     # (string) Additional build options
        'PLI_FILES',         # (list of strings) PLI files that should also be added to the build command-line
        'VCOMP_DIR',         # (string) The name of the compile directory

        # Simulation-related
        'SIM_GUI',           # (string) Add this to simulation command-line when you want to run in GUI mode

        # LSF-related
        'LSF_SUBMIT_TOOL',   # (string) The LSF tool to call
        'LSF_BUILD_LICS',    # (string) Additional licenses used for building
        'LSF_SIM_LICS',      # (string) Additional licences used for simulation

        # Cleaning-related
        'CLEAN_DIRS',        # (list of strings) Names of directories to delete
        'CLEAN_FILES',       # (list of strings) Names of files to delete
)

# Command-line Options
Options = None

########################################################################################
def setup_globals():
    """
    Set up the GVars dictionary with imported information from project and the local tb.py
    """

    global GVars

    GVars = {it : None for it in Keys}

    def import_lib(mod_name):
        try:
            lib = __import__(mod_name)
        except ImportError:
            print "!! %s.py file not found!" % mod_name
            print "!! Ensure that your PYTHONPATH variable includes '.'"
            sys.exit(1)

        lib_dict = lib.__dict__
        for key in GVars:
            if key in lib_dict:
                GVars[key] = lib_dict[key]

    map(import_lib, Libraries)

    GVars['VKITS_DIR'] = '../vkits'
    GVars['UVM_DIR']   = os.path.join(GVars['VKITS_DIR'], 'uvm/%s' % GVars['UVM_REV'])
    GVars['UVM_FLIST'] = os.path.join(GVars['UVM_DIR'], 'uvm.flist')

    for key in GVars:
        if GVars[key] is None:
            print "!! %s is not defined in any of %s." % (key, ','.join(["%s.py" % it for it in Libraries]))
            sys.exit(1)

########################################################################################
def parse_args():
    """
    Parse Command-Line
    """

    global Options

    p = argparse.ArgumentParser(
        prog='gogo',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        usage="%(prog)s [verbs] [options]",
        version=("%(prog)s v"+__version__),
        description="""
Launch SV compile and/or simulation with simulator.
        """)

    verb_choices = ['bld', 'sim', 'cln', 'b', 's', 'c']
    p.add_argument('verbs',          action='append', nargs=argparse.REMAINDER, choices=verb_choices)

    p.add_argument('--test', '-t',   action='store',             default='basic', help="Specify UVM test name [default:basic]")
    p.add_argument('--dir',  '-d',   action='store',             default=None,    help="Specify alternate directory for results.")
    p.add_argument('--verb', '-V',   action='store',             default=None,    help="Specify UVM Verbosity.")

    p.add_argument('--sim',  '-s',   action='store',             default=None,    help="Add simulation opts as a string to simulator command-line.")
    p.add_argument('--comp', '-c',   action='store',             default=None,    help="Add compilation opts as a string to compiler command-line.")

    p.add_argument('--topo',         action='store', type=int,   default=None,    help="Print UVM topology at this depth.")
    p.add_argument('--wdog', '-w',   action='store', type=int,   default=None,    help="Time (in ns) at which the testbench will watchdog timeout.")
    p.add_argument('--gui',  '-g',   action='store_true',        default=False,   help="Run DVE in GUI mode.")
    p.add_argument('--fsdb', '-f',   action='store_true',        default=False,   help="Run with Verdi wave dumping.")

    p.add_argument('--seed',         action='store', type=int,   default=1,       help="Run with the given seed.")

    Options = p.parse_args()

    if Options.verbs == [[]]:
        Options.verbs = [['bld', 'sim']]

########################################################################################
def run_cmd(cmd_line):
    """
    Run the given command in a sub-process, exiting on failure
    """

    print "++ Running", cmd_line

    proc = subprocess.Popen(args=cmd_line, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=file(os.devnull, 'r+'))
    while True:
        line = proc.stdout.readline()
        if not line:
            break
        print line.rstrip()

    returnCode = proc.poll()
    if returnCode != 0:
        print
        print '*'*40
        print ' '*15 + "FAILED"
        print '*'*40
        sys.exit(returnCode)

########################################################################################
def clean():
    """
    Remove unwanted directories and files.
    """
    from shutil import rmtree

    print "Cleaning..."
    for dname in GVars['CLEAN_DIRS']:
        try:
            rmtree(dname)
            print "++ Removed dir", dname
        except:
            pass

    for fname in GVars['CLEAN_FILES']:
        try:
            os.remove(fname)
            print "++ Removed file", fname
        except:
            pass

########################################################################################
def build():
    """
    Build the simulation executable
    """

    # determine all of the vkits and flists
    vkits = [os.path.join(GVars['VKITS_DIR'], it, "%s.flist" % it) for it in GVars['VKITS']]
    flists = [GVars['UVM_FLIST']] + vkits + GVars['FLISTS']

    if not os.path.exists(GVars['VCOMP_DIR']):
        os.makedirs(GVars['VCOMP_DIR'], 0777)

    build_cmd = GVars['BUILD_TOOL']
    build_cmd += ' -o %s -Mupdate' % (os.path.join(GVars['VCOMP_DIR'], 'sim.exe'))
    build_cmd += " %s/src/dpi/uvm_dpi.cc" % GVars['UVM_DIR']
    build_cmd += ' -f ' + ' -f '.join(flists)
    build_cmd += " %s" % GVars['BUILD_OPTIONS']

    if GVars['PLI_FILES']:
        build_cmd += ' -P ' + ' '.join(GVars['PLI_FILES'])

    # compile-time options specified on command-line
    if Options.comp:
        build_cmd += " " + Options.comp

    cmd_line = '%s %s=1 -N build "%s"' % (GVars['LSF_SUBMIT_TOOL'], GVars['LSF_BUILD_LICS'], build_cmd)
    run_cmd(cmd_line)

########################################################################################
def simulate(test_name):
    """
    Run the simulation
    """

    sim_cmd = os.path.join(GVars['VCOMP_DIR'], 'sim.exe')
    sim_cmd += " +UVM_TESTNAME=%s_test_c" % test_name

    sim_dir = os.path.join('sim', (Options.dir if Options.dir else test_name))
    sim_cmd += " -l %s/logfile" % sim_dir
    sim_cmd += " +seed=%d" % Options.seed

    if not os.path.exists(sim_dir):
        os.makedirs(sim_dir)

    # OPTIONS
    if Options.verb:
        sim_cmd += " +UVM_VERBOSITY=%s" % Options.verb

    if Options.topo:
        sim_cmd += " +UVM_TOPO_DEPTH=%d" % Options.topo

    if Options.wdog:
        sim_cmd += " +wdog=%d" % Options.wdog

    if Options.gui:
        sim_cmd += GVars['SIM_GUI']

    elif Options.fsdb:
        # make .signal_list file
        sigList = os.path.join(sim_dir, '.signal_list')
        with open(sigList, 'w') as f:
            print >>f, "0 %s" % GVars['TB_TOP']

        sim_cmd += " +fsdb_trace +fsdb_outfile=%s +fsdb_siglist=%s" % (os.path.join(sim_dir, "waves.fsdb", sigList))

    # add simulation command-line options
    if Options.sim:
        sim_cmd += " " + Options.sim

    cmd_line = '%s %s=1 -N %s "%s"' % (GVars['LSF_SUBMIT_TOOL'], GVars['LSF_SIM_LICS'], test_name, sim_cmd)
    run_cmd(cmd_line)

########################################################################################
if __name__ == '__main__':
    setup_globals()
    parse_args()

    verbs = Options.verbs[0]

    try:
        if 'cln' in verbs or 'c' in verbs:
            clean()

        if 'bld' in verbs or 'b' in verbs:
            build()

        if 'sim' in verbs or 's' in verbs:
            simulate(Options.test)
    except KeyboardInterrupt:
        print "++ Exiting due to Ctrl-C."
        sys.exit(255)

    # if we get here, we must have passed
    sys.exit(0)
